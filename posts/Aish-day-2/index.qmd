---
title: "day-2"
author: "Aishwarya"
---

## Introduction

I am working with data summaries. First, mpg, then something else.

```{r}
#| label: setup
library(tidyverse)
library(mosaic)
library(ggformula)
library(kableExtra)
```

## Look at this mpg dataset

```{r}
glimpse(mpg)
```

### Purpose of glimpse():

-   Provides a compact overview of a dataset, showing variable names, types, and a preview of the values in each column.

-   comes under 'tidyverse package'.

```{r}
mpg
  head(10)
```

```{r}
inspect(mpg)
```

### Purpose of inspect():

-   Provides a detailed comparison of the structure and contents of data frames. You use it when you want a deeper inspection of your dataset.

```{r}
skimr::skim(mpg)
```

### Purpose of skim():

-   Comes under 'skimr'.

-   Provides an in-depth summary of your data, including counts, mean, median, min/max, unique values, and missing values for each variable. You use it when you need detailed description for each column in your dataset, both for numeric and catagorical values.

```{r}
mpg_modified <- mpg %>%
  dplyr::mutate(
    cyl = as_factor(cyl),
    fl = as_factor(fl),
    drv = as_factor(drv),
    class = as_factor(class),
    trans = as_factor(trans)
  )
glimpse(mpg_modified)
```

### Factors?? what are those?

A **factor** in R is a data type used to represent **categorical variables**. It stores both the values of the variable (called **levels**) and the actual data. Factors are particularly useful for handling **nominal** (unordered categories) and **ordinal** (ordered categories) data.

-   **Nominal variables**: Categories that do not have a specific order (e.g., "Male", "Female", "Yes", "No").

<!-- -->

-   **Ordinal variables**: Categories that have a meaningful order (e.g., "Low", "Medium", "High").

When you convert a variable into a factor, R internally stores it as an integer where each integer corresponds to a category (or level), but displays the original categories as labels.

The **need to convert data into factors** arises when you want to treat variables as categorical, ensure correct ordering for ordinal data, save memory, and properly represent your data in models or plots.

```{r}
mpg_modified %>%
  group_by(cyl) %>%
  summarize(average_hwy = mean(hwy), count = n())
```

```{r}
mpg_modified %>%
  group_by(cyl, fl) %>%
  summarize(average_hwy = mean(hwy), count = n())
```

# Math Anxiety data set ("your turn")

We are working with Math anxiety data set, Nagesh and I.

```{r}
math_anxiety <- read_csv("../../data/MathAnxiety.csv")
math_anxiety
```

```{r}
math_anxiety %>% 
  head(10)
```

```{r}
glimpse(math_anxiety)
```

```{r}
inspect(math_anxiety)
```

```{r}
skimr::skim(math_anxiety)
```

```{r}
math_anxiety <- read_delim(file = "../../data/MathAnxiety.csv",delim =";")
```

```{r}
math_anxiety %>% 
  head(10)
```

```{r}
math_anxiety_modified <- math_anxiety %>% dplyr::mutate( 
  Age = Age/120, 
  Gender = as_factor(Gender),

) 
glimpse(math_anxiety_modified)
```

```{r}
inspect(math_anxiety)
```

```{r}
math_anxiety_modified %>%
  group_by(Gender) %>%
  summarize(average_AMAS = mean(AMAS, na.rm = TRUE),count = n())
```

```{r}
math_anxiety_modified %>%
  group_by(Gender) %>%
  summarize(average_RCMAS = mean(RCMAS, na.rm = TRUE),count = n())
```
