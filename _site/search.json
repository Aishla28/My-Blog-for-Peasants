[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/My-name-is-Aish/index.html",
    "href": "posts/My-name-is-Aish/index.html",
    "title": "My name is Aish K",
    "section": "",
    "text": "Hey there, I am Aish"
  },
  {
    "objectID": "posts/My-name-is-Aish/index.html#introduction",
    "href": "posts/My-name-is-Aish/index.html#introduction",
    "title": "My name is Aish K",
    "section": "",
    "text": "Hey there, I am Aish"
  },
  {
    "objectID": "posts/My-name-is-Aish/index.html#my-first-piece-of-r-code",
    "href": "posts/My-name-is-Aish/index.html#my-first-piece-of-r-code",
    "title": "My name is Aish K",
    "section": "My first piece of R code",
    "text": "My first piece of R code\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(babynames)\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\n\n\nbabynames::babynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\n\nbabynames %&gt;% filter(name == \"Aditi\")\n\n# A tibble: 40 × 5\n    year sex   name      n       prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n 1  1977 F     Aditi     5 0.00000304\n 2  1978 F     Aditi     9 0.00000548\n 3  1979 F     Aditi     9 0.00000522\n 4  1980 F     Aditi     6 0.00000337\n 5  1982 F     Aditi    10 0.00000551\n 6  1983 F     Aditi    12 0.00000671\n 7  1984 F     Aditi    10 0.00000555\n 8  1985 F     Aditi    17 0.00000921\n 9  1986 F     Aditi    22 0.0000119 \n10  1987 F     Aditi    21 0.0000112 \n# ℹ 30 more rows\n\n\n\nbabynames %&gt;% filter(name == \"Shashank\") %&gt;% \n  gf_line(n ~ year)\n\n\n\n\n\n\n\n\nMy name is damn cool!"
  },
  {
    "objectID": "posts/blog-day-3/index.html",
    "href": "posts/blog-day-3/index.html",
    "title": "Day-3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\ntaxi &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv\")\n\nRows: 10000 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): tip, company, local, dow, month\ndbl (3): rownames, distance, hour\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntaxi\n\n# A tibble: 10,000 × 8\n   rownames tip   distance company                      local dow   month  hour\n      &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;                        &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1        1 yes      17.2  Chicago Independents         no    Thu   Feb      16\n 2        2 yes       0.88 City Service                 yes   Thu   Mar       8\n 3        3 yes      18.1  other                        no    Mon   Feb      18\n 4        4 yes      20.7  Chicago Independents         no    Mon   Apr       8\n 5        5 yes      12.2  Chicago Independents         no    Sun   Mar      21\n 6        6 yes       0.94 Sun Taxi                     yes   Sat   Apr      23\n 7        7 yes      17.5  Flash Cab                    no    Fri   Mar      12\n 8        8 yes      17.7  other                        no    Sun   Jan       6\n 9        9 yes       1.85 Taxicab Insurance Agency Llc no    Fri   Apr      12\n10       10 yes       1.47 City Service                 no    Tue   Mar      14\n# ℹ 9,990 more rows\n\n\n\nglimpse(taxi)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;chr&gt; \"no\", \"yes\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\",…\n$ dow      &lt;chr&gt; \"Thu\", \"Thu\", \"Mon\", \"Mon\", \"Sun\", \"Sat\", \"Fri\", \"Sun\", \"Fri\"…\n$ month    &lt;chr&gt; \"Feb\", \"Mar\", \"Feb\", \"Apr\", \"Mar\", \"Apr\", \"Mar\", \"Jan\", \"Apr\"…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\nskim(taxi)\n\n\nData summary\n\n\nName\ntaxi\n\n\nNumber of rows\n10000\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntip\n0\n1\n2\n3\n0\n2\n0\n\n\ncompany\n0\n1\n5\n28\n0\n7\n0\n\n\nlocal\n0\n1\n2\n3\n0\n2\n0\n\n\ndow\n0\n1\n3\n3\n0\n7\n0\n\n\nmonth\n0\n1\n3\n3\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n5000.50\n2886.90\n1\n2500.75\n5000.50\n7500.25\n10000.0\n▇▇▇▇▇\n\n\ndistance\n0\n1\n6.22\n7.38\n0\n0.94\n1.78\n15.56\n42.3\n▇▁▂▁▁\n\n\nhour\n0\n1\n14.18\n4.36\n0\n11.00\n15.00\n18.00\n23.0\n▁▃▅▇▃\n\n\n\n\n\n\ninspect(taxi)\n\n\ncategorical variables:  \n     name     class levels     n missing\n1     tip character      2 10000       0\n2 company character      7 10000       0\n3   local character      2 10000       0\n4     dow character      7 10000       0\n5   month character      4 10000       0\n                                   distribution\n1 yes (92.1%), no (7.9%)                       \n2 other (27.1%) ...                            \n3 no (81.2%), yes (18.8%)                      \n4 Thu (19.6%), Wed (17.5%), Tue (16.3%) ...    \n5 Apr (31.8%), Mar (31.4%), Feb (20.4%) ...    \n\nquantitative variables:  \n      name   class min      Q1  median        Q3     max        mean\n1 rownames numeric   1 2500.75 5000.50 7500.2500 10000.0 5000.500000\n2 distance numeric   0    0.94    1.78   15.5625    42.3    6.224144\n3     hour numeric   0   11.00   15.00   18.0000    23.0   14.177300\n           sd     n missing\n1 2886.895680 10000       0\n2    7.381397 10000       0\n3    4.359904 10000       0\n\n\n\ntaxi_modified &lt;- taxi %&gt;%\n  mutate(\n    dow = factor(dow,\n      levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      labels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      ordered = TRUE\n    ),\n    ##\n    local = factor(local,\n      levels = c(\"no\", \"yes\"),\n      labels = c(\"no\", \"yes\"),\n      ordered = TRUE\n    ),\n    ##\n    month = factor(month,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      ordered = TRUE\n    )\n  )\ntaxi_modified %&gt;% glimpse()\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;ord&gt; no, yes, no, no, no, yes, no, no, no, no, no, no, no, yes, no…\n$ dow      &lt;ord&gt; Thu, Thu, Mon, Mon, Sun, Sat, Fri, Sun, Fri, Tue, Tue, Sun, W…\n$ month    &lt;ord&gt; Feb, Mar, Feb, Apr, Mar, Apr, Mar, Jan, Apr, Mar, Mar, Apr, A…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\n## Set graph theme\n\ngf_bar(~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"stack\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Stacked Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"dodge\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Dodged Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"fill\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Dodged Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~company,\n    fill = ~tip,\n    position = \"fill\"\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2D: Filled Bar Chart\",\n    subtitle = \"Shows Per group differences in Proportions!\"\n  )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~hour,\n    fill = ~tip,\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot B: Counts of Tips by Hour\"\n  )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~dow,\n    fill = ~tip,\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot C: Counts of Tips by Day of Week\"\n  )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~month,\n    fill = ~tip\n  ) %&gt;% \n  gf_labs( title = \"Plot D: Counts of Tips by Month\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~month | dow,\n    fill = ~tip\n  ) %&gt;% \n  gf_labs( title = \"Plot D: Counts of Tips by day of week and month\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~dow | hour,\n    fill = ~tip\n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour and Day of Week\",\n    subtitle = \"Is this plot arrangement easy to grasp?\"\n    )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~dow | hour,\n    fill = ~tip,\n    position = \"fill\"\n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour and Day of Week\",\n    subtitle = \"Is this plot arrangement easy to grasp?\"\n    )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~hour | dow,\n    fill = ~tip,\n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour and Day of Week\",\n    subtitle = \"Is this plot arrangement easy to grasp?\"\n    )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~hour,\n    fill = ~tip,     \n    position = \"fill\"     \n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\napartments &lt;- read_csv(\"../../data/apartments.csv\")\n\nRows: 1460 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): GrLivArea;SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\napartments\n\n# A tibble: 1,460 × 1\n   `GrLivArea;SalePrice`\n   &lt;chr&gt;                \n 1 1710;208500          \n 2 1262;181500          \n 3 1786;223500          \n 4 1717;140000          \n 5 2198;250000          \n 6 1362;143000          \n 7 1694;307000          \n 8 2090;200000          \n 9 1774;129900          \n10 1077;118000          \n# ℹ 1,450 more rows\n\n\n\nglimpse(apartments)\n\nRows: 1,460\nColumns: 1\n$ `GrLivArea;SalePrice` &lt;chr&gt; \"1710;208500\", \"1262;181500\", \"1786;223500\", \"17…\n\n\n\n\n\napartments &lt;- read_delim(file = \"../../data/apartments.csv\",delim =\";\")\n\nRows: 1460 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (2): GrLivArea, SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nthe delimiter (delim) refers to the character that separates the columns of data in the file. In this case, the delimiter is specified as a semicolon (;). The delim = \";\" argument tells R that the columns in the CSV file are separated by semicolons.\n\nglimpse(apartments)\n\nRows: 1,460\nColumns: 2\n$ GrLivArea &lt;dbl&gt; 1710, 1262, 1786, 1717, 2198, 1362, 1694, 2090, 1774, 1077, …\n$ SalePrice &lt;dbl&gt; 208500, 181500, 223500, 140000, 250000, 143000, 307000, 2000…\n\n\n\nskim(apartments)\n\n\nData summary\n\n\nName\napartments\n\n\nNumber of rows\n1460\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGrLivArea\n0\n1\n1515.46\n525.48\n334\n1129.5\n1464\n1776.75\n5642\n▇▇▁▁▁\n\n\nSalePrice\n0\n1\n180921.20\n79442.50\n34900\n129975.0\n163000\n214000.00\n755000\n▇▅▁▁▁\n\n\n\n\n\n\ninspect(apartments)\n\n\nquantitative variables:  \n       name   class   min       Q1 median        Q3    max       mean\n1 GrLivArea numeric   334   1129.5   1464   1776.75   5642   1515.464\n2 SalePrice numeric 34900 129975.0 163000 214000.00 755000 180921.196\n          sd    n missing\n1   525.4804 1460       0\n2 79442.5029 1460       0\n\n\n\n\n\n\n\nFertility &lt;- read_csv(\"../../data/Fertility.csv\")\n\nRows: 254654 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): morekids, gender1, gender2, afam, hispanic, other\ndbl (3): rownames, age, work\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nFertility\n\n# A tibble: 254,654 × 9\n   rownames morekids gender1 gender2   age afam  hispanic other  work\n      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n 1        1 no       male    female     27 no    no       no        0\n 2        2 no       female  male       30 no    no       no       30\n 3        3 no       male    female     27 no    no       no        0\n 4        4 no       male    female     35 yes   no       no        0\n 5        5 no       female  female     30 no    no       no       22\n 6        6 no       male    female     26 no    no       no       40\n 7        7 no       female  male       29 no    no       no        0\n 8        8 no       male    male       33 no    no       no       52\n 9        9 no       female  male       29 no    no       no        0\n10       10 no       male    female     27 no    no       no        0\n# ℹ 254,644 more rows\n\n\n\nglimpse(Fertility)\n\nRows: 254,654\nColumns: 9\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ morekids &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ gender1  &lt;chr&gt; \"male\", \"female\", \"male\", \"male\", \"female\", \"male\", \"female\",…\n$ gender2  &lt;chr&gt; \"female\", \"male\", \"female\", \"female\", \"female\", \"female\", \"ma…\n$ age      &lt;dbl&gt; 27, 30, 27, 35, 30, 26, 29, 33, 29, 27, 28, 28, 35, 34, 32, 2…\n$ afam     &lt;chr&gt; \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ hispanic &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ other    &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ work     &lt;dbl&gt; 0, 30, 0, 0, 22, 40, 0, 52, 0, 0, 0, 52, 52, 52, 8, 7, 0, 40,…\n\n\n\nskim(Fertility)\n\n\nData summary\n\n\nName\nFertility\n\n\nNumber of rows\n254654\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmorekids\n0\n1\n2\n3\n0\n2\n0\n\n\ngender1\n0\n1\n4\n6\n0\n2\n0\n\n\ngender2\n0\n1\n4\n6\n0\n2\n0\n\n\nafam\n0\n1\n2\n3\n0\n2\n0\n\n\nhispanic\n0\n1\n2\n3\n0\n2\n0\n\n\nother\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n127327.50\n73512.42\n1\n63664.25\n127327.5\n190990.8\n254654\n▇▇▇▇▇\n\n\nage\n0\n1\n30.39\n3.39\n21\n28.00\n31.0\n33.0\n35\n▁▃▅▇▇\n\n\nwork\n0\n1\n19.02\n21.87\n0\n0.00\n5.0\n44.0\n52\n▇▁▁▁▃\n\n\n\n\n\n\ninspect(Fertility)\n\n\ncategorical variables:  \n      name     class levels      n missing\n1 morekids character      2 254654       0\n2  gender1 character      2 254654       0\n3  gender2 character      2 254654       0\n4     afam character      2 254654       0\n5 hispanic character      2 254654       0\n6    other character      2 254654       0\n                                   distribution\n1 no (61.9%), yes (38.1%)                      \n2 male (51.4%), female (48.6%)                 \n3 male (51.3%), female (48.7%)                 \n4 no (94.8%), yes (5.2%)                       \n5 no (92.6%), yes (7.4%)                       \n6 no (94.4%), yes (5.6%)                       \n\nquantitative variables:  \n      name   class min       Q1   median       Q3    max         mean\n1 rownames numeric   1 63664.25 127327.5 190990.8 254654 127327.50000\n2      age numeric  21    28.00     31.0     33.0     35     30.39327\n3     work numeric   0     0.00      5.0     44.0     52     19.01833\n            sd      n missing\n1 73512.422063 254654       0\n2     3.386447 254654       0\n3    21.867277 254654       0\n\n\nWe need to convert six of these variables into factors.\n\nFertility_modified &lt;- Fertility %&gt;% dplyr::mutate(\n  morekids = as_factor(morekids),\n  gender1 = as_factor(gender1),\n  gender2 = as_factor(gender2),\n  afam = as_factor(afam),\n  hispanic = as_factor(hispanic),\n  other = as_factor(other)\n)\n\nglimpse(Fertility_modified)\n\nRows: 254,654\nColumns: 9\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ morekids &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, yes, no, no, no, no, …\n$ gender1  &lt;fct&gt; male, female, male, male, female, male, female, male, female,…\n$ gender2  &lt;fct&gt; female, male, female, female, female, female, male, male, mal…\n$ age      &lt;dbl&gt; 27, 30, 27, 35, 30, 26, 29, 33, 29, 27, 28, 28, 35, 34, 32, 2…\n$ afam     &lt;fct&gt; no, no, no, yes, no, no, no, no, no, no, no, no, no, no, no, …\n$ hispanic &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, n…\n$ other    &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, n…\n$ work     &lt;dbl&gt; 0, 30, 0, 0, 22, 40, 0, 52, 0, 0, 0, 52, 52, 52, 8, 7, 0, 40,…\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~morekids,\n    fill = ~gender1,\n    position = \"dodge\",\n  ) %&gt;%\n  gf_labs(title = \"Distribution gender1 based on morekids\")\n\n\n\n\n\n\n\n\n\nthis graph shows that within gender1, there are more individuals that do not have another kid. Ratio of men:women is closer to equal, with men being more, for the ones that do have more kids.\nIt appears that more individuals under the category of gender1 have chosen not to have more than one little menaces in their lives.\n\nLet’s now see what’s the case with gender2.\n\nFertility_modified %&gt;%\n  gf_bar(~morekids,\n    fill = ~gender2,\n    position = \"dodge\",\n  ) %&gt;%\n  gf_labs(title = \"Distribution gender2 based on morekids\")\n\n\n\n\n\n\n\n\n\nHere, the ratio of women is more than men in both the cases.\n\n\nFertility_modified %&gt;%\n  gf_bar(~age | ~gender2,\n         fill = ~gender1,\n         position = \"dodge\"\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Age by gender1 and gender2\")\n\n\n\n\n\n\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~work,\n         fill = ~afam,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Work Hours by afam\")\n\n\n\n\n\n\n\n\n\nHere, the real problem is that I have terribly, horribly failed at understanding what ‘afam’ actually is. Is it short for -’ African American’, or is it - ‘Alliance for Action to Strengthen Marriages and Family’ (suggested by google)? The former obviously makes more sense.\n\n\nFertility_modified %&gt;%\n  gf_bar(~work,\n         fill = ~gender1,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Work Hours by gender1\")\n\n\n\n\n\n\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~work,\n         fill = ~gender2,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Work Hours by gender2\")\n\n\n\n\n\n\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~hispanic,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of hispanic\")"
  },
  {
    "objectID": "posts/blog-day-3/index.html#we-are-examining-the-taxi-data-set",
    "href": "posts/blog-day-3/index.html#we-are-examining-the-taxi-data-set",
    "title": "Day-3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\ntaxi &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv\")\n\nRows: 10000 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): tip, company, local, dow, month\ndbl (3): rownames, distance, hour\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntaxi\n\n# A tibble: 10,000 × 8\n   rownames tip   distance company                      local dow   month  hour\n      &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;                        &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1        1 yes      17.2  Chicago Independents         no    Thu   Feb      16\n 2        2 yes       0.88 City Service                 yes   Thu   Mar       8\n 3        3 yes      18.1  other                        no    Mon   Feb      18\n 4        4 yes      20.7  Chicago Independents         no    Mon   Apr       8\n 5        5 yes      12.2  Chicago Independents         no    Sun   Mar      21\n 6        6 yes       0.94 Sun Taxi                     yes   Sat   Apr      23\n 7        7 yes      17.5  Flash Cab                    no    Fri   Mar      12\n 8        8 yes      17.7  other                        no    Sun   Jan       6\n 9        9 yes       1.85 Taxicab Insurance Agency Llc no    Fri   Apr      12\n10       10 yes       1.47 City Service                 no    Tue   Mar      14\n# ℹ 9,990 more rows\n\n\n\nglimpse(taxi)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;chr&gt; \"no\", \"yes\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\",…\n$ dow      &lt;chr&gt; \"Thu\", \"Thu\", \"Mon\", \"Mon\", \"Sun\", \"Sat\", \"Fri\", \"Sun\", \"Fri\"…\n$ month    &lt;chr&gt; \"Feb\", \"Mar\", \"Feb\", \"Apr\", \"Mar\", \"Apr\", \"Mar\", \"Jan\", \"Apr\"…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\nskim(taxi)\n\n\nData summary\n\n\nName\ntaxi\n\n\nNumber of rows\n10000\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntip\n0\n1\n2\n3\n0\n2\n0\n\n\ncompany\n0\n1\n5\n28\n0\n7\n0\n\n\nlocal\n0\n1\n2\n3\n0\n2\n0\n\n\ndow\n0\n1\n3\n3\n0\n7\n0\n\n\nmonth\n0\n1\n3\n3\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n5000.50\n2886.90\n1\n2500.75\n5000.50\n7500.25\n10000.0\n▇▇▇▇▇\n\n\ndistance\n0\n1\n6.22\n7.38\n0\n0.94\n1.78\n15.56\n42.3\n▇▁▂▁▁\n\n\nhour\n0\n1\n14.18\n4.36\n0\n11.00\n15.00\n18.00\n23.0\n▁▃▅▇▃\n\n\n\n\n\n\ninspect(taxi)\n\n\ncategorical variables:  \n     name     class levels     n missing\n1     tip character      2 10000       0\n2 company character      7 10000       0\n3   local character      2 10000       0\n4     dow character      7 10000       0\n5   month character      4 10000       0\n                                   distribution\n1 yes (92.1%), no (7.9%)                       \n2 other (27.1%) ...                            \n3 no (81.2%), yes (18.8%)                      \n4 Thu (19.6%), Wed (17.5%), Tue (16.3%) ...    \n5 Apr (31.8%), Mar (31.4%), Feb (20.4%) ...    \n\nquantitative variables:  \n      name   class min      Q1  median        Q3     max        mean\n1 rownames numeric   1 2500.75 5000.50 7500.2500 10000.0 5000.500000\n2 distance numeric   0    0.94    1.78   15.5625    42.3    6.224144\n3     hour numeric   0   11.00   15.00   18.0000    23.0   14.177300\n           sd     n missing\n1 2886.895680 10000       0\n2    7.381397 10000       0\n3    4.359904 10000       0\n\n\n\ntaxi_modified &lt;- taxi %&gt;%\n  mutate(\n    dow = factor(dow,\n      levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      labels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      ordered = TRUE\n    ),\n    ##\n    local = factor(local,\n      levels = c(\"no\", \"yes\"),\n      labels = c(\"no\", \"yes\"),\n      ordered = TRUE\n    ),\n    ##\n    month = factor(month,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      ordered = TRUE\n    )\n  )\ntaxi_modified %&gt;% glimpse()\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;ord&gt; no, yes, no, no, no, yes, no, no, no, no, no, no, no, yes, no…\n$ dow      &lt;ord&gt; Thu, Thu, Mon, Mon, Sun, Sat, Fri, Sun, Fri, Tue, Tue, Sun, W…\n$ month    &lt;ord&gt; Feb, Mar, Feb, Apr, Mar, Apr, Mar, Jan, Apr, Mar, Mar, Apr, A…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\n## Set graph theme\n\ngf_bar(~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"stack\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Stacked Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"dodge\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Dodged Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"fill\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Dodged Bar Chart\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~company,\n    fill = ~tip,\n    position = \"fill\"\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2D: Filled Bar Chart\",\n    subtitle = \"Shows Per group differences in Proportions!\"\n  )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~hour,\n    fill = ~tip,\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot B: Counts of Tips by Hour\"\n  )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~dow,\n    fill = ~tip,\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot C: Counts of Tips by Day of Week\"\n  )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~month,\n    fill = ~tip\n  ) %&gt;% \n  gf_labs( title = \"Plot D: Counts of Tips by Month\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~month | dow,\n    fill = ~tip\n  ) %&gt;% \n  gf_labs( title = \"Plot D: Counts of Tips by day of week and month\")\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~dow | hour,\n    fill = ~tip\n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour and Day of Week\",\n    subtitle = \"Is this plot arrangement easy to grasp?\"\n    )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~dow | hour,\n    fill = ~tip,\n    position = \"fill\"\n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour and Day of Week\",\n    subtitle = \"Is this plot arrangement easy to grasp?\"\n    )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~hour | dow,\n    fill = ~tip,\n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour and Day of Week\",\n    subtitle = \"Is this plot arrangement easy to grasp?\"\n    )\n\n\n\n\n\n\n\n\n\ntaxi_modified %&gt;% \n  gf_bar(~hour,\n    fill = ~tip,     \n    position = \"fill\"     \n  ) %&gt;% \n  gf_labs( \n    title = \"Plot F: Counts of Tips by Hour\"\n    )"
  },
  {
    "objectID": "posts/blog-day-3/index.html#analysing-the-apartment-dataset-your-turn",
    "href": "posts/blog-day-3/index.html#analysing-the-apartment-dataset-your-turn",
    "title": "Day-3",
    "section": "",
    "text": "apartments &lt;- read_csv(\"../../data/apartments.csv\")\n\nRows: 1460 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): GrLivArea;SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\napartments\n\n# A tibble: 1,460 × 1\n   `GrLivArea;SalePrice`\n   &lt;chr&gt;                \n 1 1710;208500          \n 2 1262;181500          \n 3 1786;223500          \n 4 1717;140000          \n 5 2198;250000          \n 6 1362;143000          \n 7 1694;307000          \n 8 2090;200000          \n 9 1774;129900          \n10 1077;118000          \n# ℹ 1,450 more rows\n\n\n\nglimpse(apartments)\n\nRows: 1,460\nColumns: 1\n$ `GrLivArea;SalePrice` &lt;chr&gt; \"1710;208500\", \"1262;181500\", \"1786;223500\", \"17…\n\n\n\n\n\napartments &lt;- read_delim(file = \"../../data/apartments.csv\",delim =\";\")\n\nRows: 1460 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (2): GrLivArea, SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nthe delimiter (delim) refers to the character that separates the columns of data in the file. In this case, the delimiter is specified as a semicolon (;). The delim = \";\" argument tells R that the columns in the CSV file are separated by semicolons.\n\nglimpse(apartments)\n\nRows: 1,460\nColumns: 2\n$ GrLivArea &lt;dbl&gt; 1710, 1262, 1786, 1717, 2198, 1362, 1694, 2090, 1774, 1077, …\n$ SalePrice &lt;dbl&gt; 208500, 181500, 223500, 140000, 250000, 143000, 307000, 2000…\n\n\n\nskim(apartments)\n\n\nData summary\n\n\nName\napartments\n\n\nNumber of rows\n1460\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGrLivArea\n0\n1\n1515.46\n525.48\n334\n1129.5\n1464\n1776.75\n5642\n▇▇▁▁▁\n\n\nSalePrice\n0\n1\n180921.20\n79442.50\n34900\n129975.0\n163000\n214000.00\n755000\n▇▅▁▁▁\n\n\n\n\n\n\ninspect(apartments)\n\n\nquantitative variables:  \n       name   class   min       Q1 median        Q3    max       mean\n1 GrLivArea numeric   334   1129.5   1464   1776.75   5642   1515.464\n2 SalePrice numeric 34900 129975.0 163000 214000.00 755000 180921.196\n          sd    n missing\n1   525.4804 1460       0\n2 79442.5029 1460       0"
  },
  {
    "objectID": "posts/blog-day-3/index.html#fertility-dataset",
    "href": "posts/blog-day-3/index.html#fertility-dataset",
    "title": "Day-3",
    "section": "",
    "text": "Fertility &lt;- read_csv(\"../../data/Fertility.csv\")\n\nRows: 254654 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): morekids, gender1, gender2, afam, hispanic, other\ndbl (3): rownames, age, work\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nFertility\n\n# A tibble: 254,654 × 9\n   rownames morekids gender1 gender2   age afam  hispanic other  work\n      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n 1        1 no       male    female     27 no    no       no        0\n 2        2 no       female  male       30 no    no       no       30\n 3        3 no       male    female     27 no    no       no        0\n 4        4 no       male    female     35 yes   no       no        0\n 5        5 no       female  female     30 no    no       no       22\n 6        6 no       male    female     26 no    no       no       40\n 7        7 no       female  male       29 no    no       no        0\n 8        8 no       male    male       33 no    no       no       52\n 9        9 no       female  male       29 no    no       no        0\n10       10 no       male    female     27 no    no       no        0\n# ℹ 254,644 more rows\n\n\n\nglimpse(Fertility)\n\nRows: 254,654\nColumns: 9\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ morekids &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ gender1  &lt;chr&gt; \"male\", \"female\", \"male\", \"male\", \"female\", \"male\", \"female\",…\n$ gender2  &lt;chr&gt; \"female\", \"male\", \"female\", \"female\", \"female\", \"female\", \"ma…\n$ age      &lt;dbl&gt; 27, 30, 27, 35, 30, 26, 29, 33, 29, 27, 28, 28, 35, 34, 32, 2…\n$ afam     &lt;chr&gt; \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ hispanic &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ other    &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ work     &lt;dbl&gt; 0, 30, 0, 0, 22, 40, 0, 52, 0, 0, 0, 52, 52, 52, 8, 7, 0, 40,…\n\n\n\nskim(Fertility)\n\n\nData summary\n\n\nName\nFertility\n\n\nNumber of rows\n254654\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmorekids\n0\n1\n2\n3\n0\n2\n0\n\n\ngender1\n0\n1\n4\n6\n0\n2\n0\n\n\ngender2\n0\n1\n4\n6\n0\n2\n0\n\n\nafam\n0\n1\n2\n3\n0\n2\n0\n\n\nhispanic\n0\n1\n2\n3\n0\n2\n0\n\n\nother\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n127327.50\n73512.42\n1\n63664.25\n127327.5\n190990.8\n254654\n▇▇▇▇▇\n\n\nage\n0\n1\n30.39\n3.39\n21\n28.00\n31.0\n33.0\n35\n▁▃▅▇▇\n\n\nwork\n0\n1\n19.02\n21.87\n0\n0.00\n5.0\n44.0\n52\n▇▁▁▁▃\n\n\n\n\n\n\ninspect(Fertility)\n\n\ncategorical variables:  \n      name     class levels      n missing\n1 morekids character      2 254654       0\n2  gender1 character      2 254654       0\n3  gender2 character      2 254654       0\n4     afam character      2 254654       0\n5 hispanic character      2 254654       0\n6    other character      2 254654       0\n                                   distribution\n1 no (61.9%), yes (38.1%)                      \n2 male (51.4%), female (48.6%)                 \n3 male (51.3%), female (48.7%)                 \n4 no (94.8%), yes (5.2%)                       \n5 no (92.6%), yes (7.4%)                       \n6 no (94.4%), yes (5.6%)                       \n\nquantitative variables:  \n      name   class min       Q1   median       Q3    max         mean\n1 rownames numeric   1 63664.25 127327.5 190990.8 254654 127327.50000\n2      age numeric  21    28.00     31.0     33.0     35     30.39327\n3     work numeric   0     0.00      5.0     44.0     52     19.01833\n            sd      n missing\n1 73512.422063 254654       0\n2     3.386447 254654       0\n3    21.867277 254654       0\n\n\nWe need to convert six of these variables into factors.\n\nFertility_modified &lt;- Fertility %&gt;% dplyr::mutate(\n  morekids = as_factor(morekids),\n  gender1 = as_factor(gender1),\n  gender2 = as_factor(gender2),\n  afam = as_factor(afam),\n  hispanic = as_factor(hispanic),\n  other = as_factor(other)\n)\n\nglimpse(Fertility_modified)\n\nRows: 254,654\nColumns: 9\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ morekids &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, yes, no, no, no, no, …\n$ gender1  &lt;fct&gt; male, female, male, male, female, male, female, male, female,…\n$ gender2  &lt;fct&gt; female, male, female, female, female, female, male, male, mal…\n$ age      &lt;dbl&gt; 27, 30, 27, 35, 30, 26, 29, 33, 29, 27, 28, 28, 35, 34, 32, 2…\n$ afam     &lt;fct&gt; no, no, no, yes, no, no, no, no, no, no, no, no, no, no, no, …\n$ hispanic &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, n…\n$ other    &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, n…\n$ work     &lt;dbl&gt; 0, 30, 0, 0, 22, 40, 0, 52, 0, 0, 0, 52, 52, 52, 8, 7, 0, 40,…\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~morekids,\n    fill = ~gender1,\n    position = \"dodge\",\n  ) %&gt;%\n  gf_labs(title = \"Distribution gender1 based on morekids\")\n\n\n\n\n\n\n\n\n\nthis graph shows that within gender1, there are more individuals that do not have another kid. Ratio of men:women is closer to equal, with men being more, for the ones that do have more kids.\nIt appears that more individuals under the category of gender1 have chosen not to have more than one little menaces in their lives.\n\nLet’s now see what’s the case with gender2.\n\nFertility_modified %&gt;%\n  gf_bar(~morekids,\n    fill = ~gender2,\n    position = \"dodge\",\n  ) %&gt;%\n  gf_labs(title = \"Distribution gender2 based on morekids\")\n\n\n\n\n\n\n\n\n\nHere, the ratio of women is more than men in both the cases.\n\n\nFertility_modified %&gt;%\n  gf_bar(~age | ~gender2,\n         fill = ~gender1,\n         position = \"dodge\"\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Age by gender1 and gender2\")\n\n\n\n\n\n\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~work,\n         fill = ~afam,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Work Hours by afam\")\n\n\n\n\n\n\n\n\n\nHere, the real problem is that I have terribly, horribly failed at understanding what ‘afam’ actually is. Is it short for -’ African American’, or is it - ‘Alliance for Action to Strengthen Marriages and Family’ (suggested by google)? The former obviously makes more sense.\n\n\nFertility_modified %&gt;%\n  gf_bar(~work,\n         fill = ~gender1,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Work Hours by gender1\")\n\n\n\n\n\n\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~work,\n         fill = ~gender2,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of Work Hours by gender2\")\n\n\n\n\n\n\n\n\n\nFertility_modified %&gt;%\n  gf_bar(~hispanic,\n  ) %&gt;%\n  gf_labs(title = \"Distribution of hispanic\")"
  },
  {
    "objectID": "posts/Aish-day-5/index.html",
    "href": "posts/Aish-day-5/index.html",
    "title": "day-5",
    "section": "",
    "text": "Today, we are learning all about box plots.\n\ndata visualization that gives us an idea of the distribution of a Quant variable, for each level of another Qual variable.\nboxplot focuses on the mean and quartiles. It uses sequence number or ranks of Quant variable.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(palmerpenguins) # Our new favourite dataset\n\n\nwages &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/stevedata/gss_wages.csv\")\n\nRows: 61697 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): occrecode, wrkstat, gender, educcat, maritalcat\ndbl (7): rownames, year, realrinc, age, occ10, prestg10, childs\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(wages)\n\nRows: 61,697\nColumns: 12\n$ rownames   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ year       &lt;dbl&gt; 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974,…\n$ realrinc   &lt;dbl&gt; 4935, 43178, NA, NA, 18505, 22206, 55515, NA, NA, 4935, NA,…\n$ age        &lt;dbl&gt; 21, 41, 83, 69, 58, 30, 48, 67, 51, 54, 89, 71, 27, 30, 22,…\n$ occ10      &lt;dbl&gt; 5620, 2040, NA, NA, 5820, 910, 230, 6355, 4720, 3940, 4810,…\n$ occrecode  &lt;chr&gt; \"Office and Administrative Support\", \"Professional\", NA, NA…\n$ prestg10   &lt;dbl&gt; 25, 66, NA, NA, 37, 45, 59, 49, 28, 38, 47, 45, 50, 29, 33,…\n$ childs     &lt;dbl&gt; 0, 3, 2, 2, 0, 0, 2, 1, 2, 2, 3, 1, 4, 3, 0, 1, 2, 3, 4, 8,…\n$ wrkstat    &lt;chr&gt; \"School\", \"Full-Time\", \"Housekeeper\", \"Housekeeper\", \"Full-…\n$ gender     &lt;chr&gt; \"Male\", \"Male\", \"Female\", \"Female\", \"Female\", \"Male\", \"Male…\n$ educcat    &lt;chr&gt; \"High School\", \"Bachelor\", \"Less Than High School\", \"Less T…\n$ maritalcat &lt;chr&gt; \"Married\", \"Married\", \"Widowed\", \"Widowed\", \"Never Married\"…\n\n\n\nskimr::skim(wages)\n\n\nData summary\n\n\nName\nwages\n\n\nNumber of rows\n61697\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\noccrecode\n3561\n0.94\n5\n37\n0\n11\n0\n\n\nwrkstat\n21\n1.00\n5\n23\n0\n8\n0\n\n\ngender\n0\n1.00\n4\n6\n0\n2\n0\n\n\neduccat\n135\n1.00\n8\n21\n0\n5\n0\n\n\nmaritalcat\n27\n1.00\n7\n13\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1.00\n30849.00\n17810.53\n1\n15425\n30849\n46273\n61697.0\n▇▇▇▇▇\n\n\nyear\n0\n1.00\n1996.07\n12.79\n1974\n1985\n1996\n2006\n2018.0\n▆▇▇▇▇\n\n\nrealrinc\n23810\n0.61\n22326.36\n28581.79\n227\n8156\n16563\n27171\n480144.5\n▇▁▁▁▁\n\n\nage\n219\n1.00\n46.18\n17.56\n18\n32\n44\n59\n89.0\n▇▇▆▅▂\n\n\nocc10\n3561\n0.94\n4695.77\n2627.72\n10\n2710\n4720\n6230\n9997.0\n▃▅▇▂▃\n\n\nprestg10\n4186\n0.93\n43.06\n12.99\n16\n33\n42\n50\n80.0\n▃▇▇▃▁\n\n\nchilds\n189\n1.00\n1.92\n1.76\n0\n0\n2\n3\n8.0\n▇▇▂▁▁\n\n\n\n\n\n\ninspect(wages)\n\n\ncategorical variables:  \n        name     class levels     n missing\n1  occrecode character     11 58136    3561\n2    wrkstat character      8 61676      21\n3     gender character      2 61697       0\n4    educcat character      5 61562     135\n5 maritalcat character      5 61670      27\n                                   distribution\n1 Professional (19%), Service (16.9%) ...      \n2 Full-Time (49.4%), Housekeeper (15.1%) ...   \n3 Female (56.1%), Male (43.9%)                 \n4 High School (51.5%) ...                      \n5 Married (51.7%), Never Married (21.8%) ...   \n\nquantitative variables:  \n      name   class  min    Q1 median    Q3      max         mean           sd\n1 rownames numeric    1 15425  30849 46273  61697.0 30849.000000 17810.534116\n2     year numeric 1974  1985   1996  2006   2018.0  1996.073715    12.794470\n3 realrinc numeric  227  8156  16563 27171 480144.5 22326.359234 28581.794499\n4      age numeric   18    32     44    59     89.0    46.176177    17.561065\n5    occ10 numeric   10  2710   4720  6230   9997.0  4695.774081  2627.724076\n6 prestg10 numeric   16    33     42    50     80.0    43.060701    12.987526\n7   childs numeric    0     0      2     3      8.0     1.923457     1.763569\n      n missing\n1 61697       0\n2 61697       0\n3 37887   23810\n4 61478     219\n5 58136    3561\n6 57511    4186\n7 61508     189\n\n\n\nwages_clean &lt;-\n  wages %&gt;%\n  tidyr::drop_na(realrinc) # choose column or leave blank to choose all\n\n\nwages_clean &lt;-  wages %&gt;% tidyr::drop_na(realrinc)\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(realrinc ~ \"Income\") %&gt;% # Dummy X-axis \"variable\"\n  gf_labs(\n    title = \"Plot 1A: Income has a skewed distribution\",\n    subtitle = \"Many outliers on the high side\"\n  )\n\n\n\n\n\n\n\n\n\nIncome is a very skewed distribution, as might be expected.\nPresence of many higher-side outliers is noted.\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(gender ~ realrinc) %&gt;%\n  gf_labs(title = \"Plot 2A: Income by Gender\")\n\n\n\n\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(gender ~ log10(realrinc)) %&gt;%\n  gf_labs(title = \"Plot 2B: Log(Income) by Gender\")\n\n\n\n\n\n\n\n\n\nlog10(realrinc) means we’re using a math trick to shrink down the income numbers so they’re easier to compare (think of it like zooming out to see the differences better).\nboth codes are making pictures to show how much each gender makes, but the second one uses a “zoomed-out” version of income numbers to make things clearer.\n\n\nwages_clean %&gt;%\n  gf_boxplot(gender ~ realrinc, fill = ~gender) %&gt;%\n  gf_refine(scale_x_log10()) %&gt;%\n  gf_labs(title = \"Plot 2C: Income filled by Gender, log scale\")\n\n\n\n\n\n\n\n\n\nThe IQR for males is smaller than the IQR for females. There is less variation in the middle ranges of realrinc for men.\nThere are outliers on both sides, indicating that there may be many people who make very small amounts of money and large amounts of money in both genders.\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(educcat ~ realrinc) %&gt;%\n  gf_labs(title = \"Plot 3A: Income by Education Category\")\n\n\n\n\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(educcat ~ log10(realrinc)) %&gt;%\n  gf_labs(title = \"Plot 3B: Log(Income) by Education Category\")\n\n\n\n\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(\n    reorder(educcat, realrinc, FUN = median) ~ log(realrinc),\n    fill = ~educcat,\n    alpha = 0.3\n  ) %&gt;%\n  gf_labs(title = \"Plot 3C: Log(Income) by Education Category, sorted\") %&gt;%\n  gf_labs(\n    x = \"Log Income\",\n    y = \"Education Category\"\n  )\n\n\n\n\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(reorder(educcat, realrinc, FUN = median) ~ realrinc,\n    fill = ~educcat,\n    alpha = 0.5\n  ) %&gt;%\n  gf_refine(scale_x_log10()) %&gt;%\n  gf_labs(\n    title = \"Plot 3D: Income by Education Category, sorted\",\n    subtitle = \"Log Income\"\n  ) %&gt;%\n  gf_labs(\n    x = \"Income\",\n    y = \"Education Category\"\n  )\n\n\n\n\n\n\n\n\n\nrealrinc rises with educcat, which is to be expected.\nHowever, there are people with very low and very high income in all categories of educcat\nHence educcat alone may not be a good predictor for realrinc.\n\n\n\n\n\nwages %&gt;%\n  drop_na() %&gt;%\n  gf_boxplot(reorder(educcat, realrinc) ~ log10(realrinc),\n    fill = ~educcat,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(childs)) %&gt;%\n  gf_refine(scale_fill_brewer(type = \"qual\", palette = \"Dark2\")) %&gt;%\n  gf_labs(\n    title = \"Plot 4A: Log Income by Education Category and Family Size\",\n    x = \"Log income\",\n    y = \"No. of Children\"\n  )\n\n\n\n\n\n\n\n\n\nwages %&gt;%\n  drop_na() %&gt;%\n  mutate(childs = as_factor(childs)) %&gt;%\n  gf_boxplot(childs ~ log10(realrinc),\n    group = ~childs,\n    fill = ~childs,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(~gender) %&gt;%\n  gf_refine(scale_fill_brewer(type = \"qual\", palette = \"Set3\")) %&gt;%\n  gf_labs(\n    title = \"Plot 4B: Log Income by Gender and Family Size\",\n    x = \"Log income\",\n    y = \"No. of Children\"\n  )\n\n\n\n\n\n\n\n\n\nFrom Figure 6, we see that realrinc increases with educcat, across (almost) all family sizes childs.\nHowever, this trend breaks a little when family sizes childs is large, say &gt;= 7. Be aware that the data observations for such large families may be sparse and this inference may not be necessarily valid.\nFrom Figure 7, we see that the effect of childs on realrinc is different for each gender! For females, the income steadily drops with the number of children, whereas for males it actually increases up to a certain family size before decreasing again."
  },
  {
    "objectID": "posts/Aish-day-5/index.html#correlations",
    "href": "posts/Aish-day-5/index.html#correlations",
    "title": "day-5",
    "section": "Correlations",
    "text": "Correlations\n\nlibrary(tidyverse) # Tidy data processing and plotting\nlibrary(ggformula) # Formula based plots\nlibrary(mosaic) # Our go-to package\nlibrary(skimr) # Another Data inspection package\n\n\nAttaching package: 'skimr'\n\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(kableExtra) # Making good tables with data\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(GGally) # Corr plots\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nlibrary(corrplot) # More corrplots\n\ncorrplot 0.94 loaded\n\nlibrary(ggExtra) # Making Combination Plots\n\nlibrary(devtools)\n\nLoading required package: usethis\n\ndevtools::install_github(\"rpruim/Lock5withR\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'Lock5withR' from a github remote, the SHA1 (f2773d9f) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(Lock5withR) # Datasets\nlibrary(palmerpenguins) # A famous dataset\n\nlibrary(easystats) # Easy Statistical Analysis and Charts\n\n# Attaching packages: easystats 0.7.3\n✔ bayestestR  0.14.0   ✔ correlation 0.8.5 \n✔ datawizard  0.13.0   ✔ effectsize  0.8.9 \n✔ insight     0.20.5   ✔ modelbased  0.8.8 \n✔ performance 0.12.3   ✔ parameters  0.22.2\n✔ report      0.5.9    ✔ see         0.9.0 \n\nlibrary(correlation) # Different Types of Correlations\n# From the easystats collection of packages\n\nIn statistical terms we use correlation to denote association between two quantitative variables. We also assume that the association is linear, that one variable increases or decreases a fixed amount for a unit increase or decrease in the other.\n\nHollywoodMovies2011 -&gt; movies\nglimpse(movies)\n\nRows: 136\nColumns: 14\n$ Movie             &lt;fct&gt; \"Insidious\", \"Paranormal Activity 3\", \"Bad Teacher\",…\n$ LeadStudio        &lt;fct&gt; Sony, Independent, Independent, Warner Bros, Relativ…\n$ RottenTomatoes    &lt;int&gt; 67, 68, 44, 96, 90, 93, 75, 35, 63, 69, 69, 49, 26, …\n$ AudienceScore     &lt;int&gt; 65, 58, 38, 92, 77, 84, 91, 58, 74, 73, 72, 57, 68, …\n$ Story             &lt;fct&gt; Monster Force, Monster Force, Comedy, Rivalry, Rival…\n$ Genre             &lt;fct&gt; Horror, Horror, Comedy, Fantasy, Comedy, Romance, Dr…\n$ TheatersOpenWeek  &lt;int&gt; 2408, 3321, 3049, 4375, 2918, 944, 2534, 3615, NA, 2…\n$ BOAverageOpenWeek &lt;int&gt; 5511, 15829, 10365, 38672, 8995, 6177, 10278, 23775,…\n$ DomesticGross     &lt;dbl&gt; 54.01, 103.66, 100.29, 381.01, 169.11, 56.18, 169.22…\n$ ForeignGross      &lt;dbl&gt; 43.00, 98.24, 115.90, 947.10, 119.28, 83.00, 30.10, …\n$ WorldGross        &lt;dbl&gt; 97.009, 201.897, 216.196, 1328.111, 288.382, 139.177…\n$ Budget            &lt;dbl&gt; 1.5, 5.0, 20.0, 125.0, 32.5, 17.0, 25.0, 80.0, 0.2, …\n$ Profitability     &lt;dbl&gt; 64.672667, 40.379400, 10.809800, 10.624888, 8.873292…\n$ OpeningWeekend    &lt;dbl&gt; 13.27, 52.57, 31.60, 169.19, 26.25, 5.83, 26.04, 85.…"
  },
  {
    "objectID": "posts/Aish-day-5/index.html#scatter-plots",
    "href": "posts/Aish-day-5/index.html#scatter-plots",
    "title": "day-5",
    "section": "Scatter Plots",
    "text": "Scatter Plots\n\nmovies_quant &lt;- movies %&gt;%\n  drop_na() %&gt;%\n  select(where(is.numeric))\nmovies_quant\n\n    RottenTomatoes AudienceScore TheatersOpenWeek BOAverageOpenWeek\n1               67            65             2408              5511\n2               68            58             3321             15829\n3               44            38             3049             10365\n4               96            92             4375             38672\n5               90            77             2918              8995\n6               93            84              944              6177\n7               75            91             2534             10278\n8               35            58             3615             23775\n9               69            73             2756              6860\n10              69            72             3040              9310\n11              49            57             3018              6512\n12              26            68             4061             34012\n13              35            67             4088             23937\n14              56            52             2994              8469\n15              71            73             3826             10252\n16              82            78             3379             10492\n17              83            87             3648             15024\n18              23            31             3328              2615\n19              23            50             3395             10489\n20              93            93             2458              3517\n21              93            79             2886              3929\n22              82            80             3925             12142\n23              55            57             3043              7183\n24              85            76             2199              4761\n25              71            68             2926              6364\n26              34            61             4155             21697\n27              61            56             3155              5715\n28              92            81             2961              5002\n29              93            86             3448              8672\n30              37            54             1719              2955\n31              30            39             2787              3390\n32              60            79             3703             10704\n33              38            55             1552              2470\n34              47            63             3167              7500\n35              47            54             3339              5524\n36              38            55             3122              3860\n37              60            72             2817              5979\n38              35            50             3417             10411\n39              77            80             3955             16618\n40              26            50             3579             10490\n41              78            81             3020              6326\n42              38            56             4115             16072\n43              22            40             3295              3534\n44              19            63             3548              8601\n45              78            75             3715             17512\n46              20            43             2985              4955\n47              71            71             3549              4383\n48              72            67             2840              7450\n49               4            29             2534              5921\n50              46            79             2214              4789\n51              58            81             3440              7942\n52              72            70             2802              4655\n53              36            59             3112             10349\n54              58            57             3305              5656\n55              32            57             3154              6167\n56              84            81             3507              5461\n57               4            46             3118              3504\n58              35            44             2950              4588\n59              10            32             2816              3769\n60              76            70             1826              5427\n61              84            63             3222              6935\n62              87            88             3641             15134\n63              83            76             3952              8623\n64              14            42             3482              5763\n65              71            67             2535              4880\n66              11            41             3030              4622\n67              95            89             2993              6516\n68              38            50             2473              3014\n69              44            47             3584              9335\n70              84            82             2707              4879\n71              88            69             3917              9722\n72              24            48             3017              2875\n73              34            46             2973              4405\n74              84            61                4             93230\n75              19            50             1952              5047\n76              68            61             3367              7135\n77              97            87             3440              8500\n78              16            25             2806              2995\n79              28            55             2614              3982\n80              24            50             3002              1806\n81              43            48             2888              4616\n82              24            53             2913              4645\n83              17            37             2864              5221\n84              53            52             2703              4226\n85              59            37             2760              3089\n86              75            68             3114              2477\n87              26            49             3276              3731\n88              91            79             2405              3267\n89              27            48             3816             13935\n90              23            48             3033              6284\n91              39            43             2296              3782\n92              44            50             3750              9715\n93               4            59             3438              7273\n94              23            31             2940              6060\n95              83            93             1869              2805\n96              83            84              247              7174\n97              41            59             3606              5889\n98               7            38             2661              3055\n99              25            48             2986              3132\n100             36            52             2996              2835\n101             45            38             2290              2265\n102             92            82             3376              3537\n103             56            65              707              4960\n104             22            34             3015              3324\n105             26            36             2769              3380\n106             50            48             2273              2259\n107             46            66              265              3856\n108             66            55              106              6111\n109             62            57               22              4890\n110             36            43             3117              2218\n111             38            62             2150              1513\n    DomesticGross ForeignGross WorldGross Budget Profitability OpeningWeekend\n1           54.01        43.00     97.009    1.5    64.6726667          13.27\n2          103.66        98.24    201.897    5.0    40.3794000          52.57\n3          100.29       115.90    216.196   20.0    10.8098000          31.60\n4          381.01       947.10   1328.111  125.0    10.6248880         169.19\n5          169.11       119.28    288.382   32.5     8.8732923          26.25\n6           56.18        83.00    139.177   17.0     8.1868824           5.83\n7          169.22        30.10    199.324   25.0     7.9729600          26.04\n8          254.46       327.00    581.464   80.0     7.2683000          85.95\n9           79.25        82.60    161.849   27.0     5.9944074          18.91\n10         117.54        92.10    209.638   35.0     5.9896571          28.30\n11          70.60        77.10    147.700   25.0     5.9080000          19.70\n12         260.80       374.00    634.800  110.0     5.7709091         138.12\n13         352.39       770.81   1123.195  195.0     5.7599744          97.85\n14          99.97        94.00    193.967   36.0     5.3879722          25.36\n15         143.62       341.02    484.634   90.0     5.3848222          39.23\n16         127.00       132.71    259.713   50.0     5.1942600          35.45\n17         176.70       304.52    481.226   93.0     5.1744731          54.81\n18          17.69         7.88     25.562    5.0     5.1124000           8.70\n19         142.61       419.54    562.158  110.0     5.1105273          35.61\n20          34.90         1.62     36.511    8.0     4.5638750           8.64\n21          34.68        32.33     67.007   15.0     4.4671333          11.34\n22         165.25       497.78    663.024  150.0     4.4201600          47.66\n23          63.69        67.10    130.786   30.0     4.3595333          21.86\n24          40.49        13.70     54.194   12.5     4.3355200          10.47\n25          55.80        93.74    149.541   35.0     4.2726000          18.62\n26         241.07       802.80   1043.871  250.0     4.1754840          90.15\n27          42.59       115.30    157.887   40.0     3.9471750          18.03\n28          54.71        68.57    123.278   32.0     3.8524375          14.81\n29         197.80       336.70    534.500  145.0     3.6862069          29.55\n30          13.84        41.40     55.241   15.0     3.6827333           5.08\n31          23.20        85.40    108.600   30.0     3.6200000           9.40\n32         179.04       261.00    440.040  125.0     3.5203200          39.63\n33           8.31       149.63    157.939   45.0     3.5097556           3.83\n34          52.70        19.72     72.416   21.0     3.4483810          23.75\n35          68.22       119.14    187.355   55.0     3.4064545          18.45\n36          36.49        90.90    127.393   40.0     3.1848250          12.05\n37          58.71        58.39    117.094   38.0     3.0814211          16.84\n38          83.55       128.27    211.818   70.0     3.0259714          35.57\n39         181.03       267.48    448.512  150.0     2.9900800          65.72\n40         108.09        75.87    183.953   63.0     2.9198889          37.54\n41          84.34        58.50    142.841   50.0     2.8568200          19.10\n42         191.45       360.40    551.850  200.0     2.7592500          66.14\n43          38.54        35.54     74.080   27.0     2.7437037          11.64\n44         103.03       111.92    214.945   80.0     2.6868125          30.51\n45         176.65       191.75    368.404  140.0     2.6314571          65.06\n46          33.00        63.00     96.000   37.0     2.5945946          14.80\n47          51.16        10.90     62.053   24.0     2.5855417          15.56\n48          62.50        65.37    127.868   50.2     2.5471713          21.16\n49          37.30         3.19     40.492   16.0     2.5307500          15.00\n50          43.85         0.41     44.267   18.0     2.4592778          10.60\n51          83.61       186.20    269.811  110.0     2.4528273          27.32\n52          37.41        60.57     97.983   40.0     2.4495750          13.04\n53          80.49       102.00    182.485   75.0     2.4331333          32.21\n54          38.18        58.96     97.137   40.0     2.4284250          18.69\n55          55.10        89.40    144.500   60.0     2.4083333          19.45\n56          71.08        16.86     87.947   37.0     2.3769459          19.15\n57          28.07        54.00     82.069   35.0     2.3448286          10.93\n58          45.06        38.10     83.160   36.0     2.3100000          13.54\n59          24.80        66.80     91.600   40.0     2.2900000          10.60\n60          31.18        14.25     45.429   20.0     2.2714500           9.91\n61          75.64        59.80    135.443   60.0     2.2573833          22.40\n62         146.41       207.22    353.623  160.0     2.2101437          55.10\n63         142.09       142.30    284.386  130.0     2.1875846          34.08\n64          80.36        89.94    170.301   80.0     2.1287625          20.07\n65          40.26        23.52     63.781   30.0     2.1260333          12.37\n66          37.66        51.50     89.162   42.0     2.1229048          14.01\n67          74.21        27.90    102.109   50.0     2.0421800          19.50\n68          23.18        16.48     39.664   20.0     1.9832000           7.45\n69          98.80       129.00    227.800  120.0     1.8983333          33.50\n70          58.01        17.00     75.009   40.0     1.8752250          13.21\n71         123.26       121.90    245.154  135.0     1.8159556          38.08\n72          20.25       111.90    132.147   75.0     1.7619600           8.67\n73          35.61        16.80     52.408   30.0     1.7469333          13.10\n74          13.30        41.00     54.303   32.0     1.6969687           0.37\n75          27.87         0.97     28.833   17.0     1.6960588           9.85\n76          74.50        47.00    121.504   75.0     1.6200533          24.03\n77          66.63         5.80     72.426   45.0     1.6094667          29.24\n78          18.88        19.83     38.702   25.0     1.5480800           8.40\n79          36.67        24.30     60.965   40.0     1.5241250          10.41\n80          14.01        16.42     30.426   20.0     1.5213000           5.42\n81          37.05         3.49     40.546   28.0     1.4480714          13.33\n82          37.08        33.75     70.833   52.0     1.3621731          13.53\n83          29.14        49.17     78.308   60.0     1.3051333          14.95\n84          29.20        22.00     51.200   40.0     1.2800000          11.40\n85          24.05         7.50     31.546   25.0     1.2618400           8.53\n86          18.30        18.80     37.102   30.0     1.2367333           7.71\n87          33.04        12.70     45.735   40.0     1.1433750          12.22\n88          26.69         6.46     33.152   30.0     1.1050667           7.86\n89         116.60       103.25    219.851  200.0     1.0992550          53.17\n90          36.39        53.40     89.792   82.0     1.0950244          19.06\n91          19.49         7.63     27.121   25.0     1.0848400           8.68\n92         100.24        74.58    174.821  163.0     1.0725215          36.43\n93          68.91        15.00     83.911   79.0     1.0621646          25.00\n94          48.50        21.20     69.700   70.0     0.9957143          17.80\n95          13.66         9.40     23.057   25.0     0.9222800           5.24\n96           5.31         2.95      8.258   10.0     0.8258000           1.75\n97          57.31        49.20    106.507  135.0     0.7889407          21.24\n98          21.30        17.20     38.502   50.0     0.7700400           8.13\n99          25.12        27.84     52.961   70.0     0.7565857           9.35\n100         16.93        10.50     27.428   38.0     0.7217895           8.49\n101         10.72        18.21     28.931   45.0     0.6429111           5.19\n102         33.70        57.50     91.203  150.0     0.6080200          12.07\n103         11.54         2.67     14.211   25.0     0.5684400           3.51\n104         21.30        27.50     48.795   90.0     0.5421667          10.02\n105         21.60         3.26     24.856   49.9     0.4981162           9.36\n106         13.07         8.48     21.552   45.0     0.4789333           5.14\n107          4.46         9.73     14.190   30.0     0.4730000           1.02\n108          4.40         0.40      4.800   15.0     0.3200000           0.64\n109          0.97         5.40      6.370   21.0     0.3033333           0.11\n110         21.39        17.60     38.992  150.0     0.2599467           6.91\n111          7.17         0.24      7.410   41.0     0.1807317           3.25\n\n\n\nmovies %&gt;%\n  gf_point(DomesticGross ~ WorldGross) %&gt;%\n  gf_lm() %&gt;%\n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Movie Gross Earnings: Domestics vs World\"\n  )\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_lm()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\n\n\n\nmovies %&gt;%\n  gf_point(Profitability ~ OpeningWeekend) %&gt;%\n  gf_lm() %&gt;%\n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Movies: Does Opening Week Earnings indicate Profitability?\"\n  )\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_lm()`).\n\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nmovies %&gt;%\n  gf_point(RottenTomatoes ~ AudienceScore) %&gt;%\n  gf_lm() %&gt;%\n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Movie Ratings: Tomatoes vs Audience\"\n  )\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_lm()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nmovies %&gt;%\n  drop_na() %&gt;%\n  gf_point(RottenTomatoes ~ AudienceScore,\n    color = ~Genre\n  ) %&gt;%\n  gf_lm() %&gt;%\n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Movie Ratings: Trends by Genre\"\n  )\n\n\n\n\n\n\n\n\n\nDomesticGross and World Gross are related, though there are fewer movies at the high end of DomesticGross…\nAudienceScore and RottenTomatoes seem clearly related…both increase together.\nOpeningWeek and Profitability are also related in a linear way. There are just two movies which have been extremely profitable..but they do not influence the slope of the trend line too much, because of their location midway in the range of OpeningWeek. Influence is something that is a key concept in Linear Regression.\nBy and large, there are only small variations in slope across Genres."
  },
  {
    "objectID": "posts/Aish-day-5/index.html#quantizing-correlation",
    "href": "posts/Aish-day-5/index.html#quantizing-correlation",
    "title": "day-5",
    "section": "Quantizing Correlation",
    "text": "Quantizing Correlation\n\nPoints to remember\nthe correlation score (often called the correlation coefficient) is a number that tells you how strongly two things are related or connected.\n\n1 means perfect positive correlation: when one variable goes up, the other one always goes up in a straight line.\n-1 means perfect negative correlation: when one variable goes up, the other one always goes down in a straight line.\n0 means no correlation: the variables don’t seem to be related at all.\n\nexamples-\n\n\nExamples-\n\nIf you were looking at height and weight, you might find a positive correlation because, in general, taller people tend to weigh more.\nIf you looked at exercise and weight, you might see a negative correlation, meaning the more someone exercises, the lower their weight tends to be.\n\n\n\nIf you were looking at height and weight, you might find a positive correlation because, in general, taller people tend to weigh more.\nIf you looked at exercise and weight, you might see a negative correlation, meaning the more someone exercises, the lower their weight tends to be.\n\n\nGGally::ggpairs(\n  movies %&gt;% drop_na(),\n  # Select Quant variables only for now\n  columns = c(\n    \"RottenTomatoes\", \"AudienceScore\", \"DomesticGross\", \"ForeignGross\"\n  ),\n  switch = \"both\",\n  # axis labels in more traditional locations(left and bottom)\n\n  progress = FALSE,\n  # no compute progress messages needed\n\n  # Choose the diagonal graphs (always single variable! Think!)\n  diag = list(continuous = \"barDiag\"),\n  # choosing histogram,not density\n\n  # Choose lower triangle graphs, two-variable graphs\n  lower = list(continuous = wrap(\"smooth\", alpha = 0.3, se = FALSE)),\n  title = \"Movies Data Correlations Plot #1\"\n)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nGGally::ggpairs(\n  movies %&gt;% drop_na(),\n  # Select Quant variables only for now\n  columns = c(\n    \"Budget\", \"Profitability\", \"DomesticGross\", \"ForeignGross\"\n  ),\n  switch = \"both\",\n  # axis labels in more traditional locations(left and bottom)\n\n  progress = FALSE,\n  # no compute progress messages needed\n\n  # Choose the diagonal graphs (always single variable! Think!)\n  diag = list(continuous = \"barDiag\"),\n  # choosing histogram,not density\n\n  # Choose lower triangle graphs, two-variable graphs\n  lower = list(continuous = wrap(\"smooth\", alpha = 0.3, se = FALSE)),\n  title = \"Movies Data Correlations Plot #2\"\n)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nThe Budget variable has good correlation scores with DomesticGross and ForeignGross.\nProfitability and Budget seem to have a very slight negative correlation, but this does not appear to be significant."
  },
  {
    "objectID": "posts/Aish-day-5/index.html#doing-a-correlation-test",
    "href": "posts/Aish-day-5/index.html#doing-a-correlation-test",
    "title": "day-5",
    "section": "Doing a correlation Test",
    "text": "Doing a correlation Test\n\nmosaic::cor_test(Profitability ~ Budget, data = movies) %&gt;%\n  broom::tidy() %&gt;%\n  knitr::kable(\n    digits = 2,\n    caption = \"Movie Profitability vs Budget\"\n  )\n\n\nMovie Profitability vs Budget\n\n\n\n\n\n\n\n\n\n\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-0.08\n-0.96\n0.34\n132\n-0.25\n0.09\nPearson’s product-moment correlation\ntwo.sided\n\n\n\n\n\n\nmosaic::cor_test(DomesticGross ~ Budget, data = movies) %&gt;%\n  broom::tidy() %&gt;%\n  knitr::kable(\n    digits = 2,\n    caption = \"Movie Domestic Gross vs Budget\"\n  )\n\n\nMovie Domestic Gross vs Budget\n\n\n\n\n\n\n\n\n\n\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n0.7\n11.06\n0\n131\n0.6\n0.77\nPearson’s product-moment correlation\ntwo.sided\n\n\n\n\n\n\nmosaic::cor_test(ForeignGross ~ Budget, data = movies) %&gt;%\n  broom::tidy() %&gt;%\n  knitr::kable(\n    digits = 2,\n    caption = \"Movie Foreign Gross vs Budget\"\n  )\n\n\nMovie Foreign Gross vs Budget\n\n\n\n\n\n\n\n\n\n\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n0.69\n10.22\n0\n118\n0.58\n0.77\nPearson’s product-moment correlation\ntwo.sided\n\n\n\n\n\n\nglimpse(mtcars)\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\n\n## Target variable: mpg\n## Calculate all correlations\ncor &lt;- correlation::correlation(mtcars)\ncor\n\n# Correlation Matrix (pearson-method)\n\nParameter1 | Parameter2 |     r |         95% CI | t(30) |         p\n--------------------------------------------------------------------\nmpg        |        cyl | -0.85 | [-0.93, -0.72] | -8.92 | &lt; .001***\nmpg        |       disp | -0.85 | [-0.92, -0.71] | -8.75 | &lt; .001***\nmpg        |         hp | -0.78 | [-0.89, -0.59] | -6.74 | &lt; .001***\nmpg        |       drat |  0.68 | [ 0.44,  0.83] |  5.10 | &lt; .001***\nmpg        |         wt | -0.87 | [-0.93, -0.74] | -9.56 | &lt; .001***\nmpg        |       qsec |  0.42 | [ 0.08,  0.67] |  2.53 | 0.222    \nmpg        |         vs |  0.66 | [ 0.41,  0.82] |  4.86 | 0.001**  \nmpg        |         am |  0.60 | [ 0.32,  0.78] |  4.11 | 0.008**  \nmpg        |       gear |  0.48 | [ 0.16,  0.71] |  3.00 | 0.097    \nmpg        |       carb | -0.55 | [-0.75, -0.25] | -3.62 | 0.024*   \ncyl        |       disp |  0.90 | [ 0.81,  0.95] | 11.45 | &lt; .001***\ncyl        |         hp |  0.83 | [ 0.68,  0.92] |  8.23 | &lt; .001***\ncyl        |       drat | -0.70 | [-0.84, -0.46] | -5.37 | &lt; .001***\ncyl        |         wt |  0.78 | [ 0.60,  0.89] |  6.88 | &lt; .001***\ncyl        |       qsec | -0.59 | [-0.78, -0.31] | -4.02 | 0.010*   \ncyl        |         vs | -0.81 | [-0.90, -0.64] | -7.59 | &lt; .001***\ncyl        |         am | -0.52 | [-0.74, -0.21] | -3.36 | 0.043*   \ncyl        |       gear | -0.49 | [-0.72, -0.17] | -3.10 | 0.079    \ncyl        |       carb |  0.53 | [ 0.22,  0.74] |  3.40 | 0.041*   \ndisp       |         hp |  0.79 | [ 0.61,  0.89] |  7.08 | &lt; .001***\ndisp       |       drat | -0.71 | [-0.85, -0.48] | -5.53 | &lt; .001***\ndisp       |         wt |  0.89 | [ 0.78,  0.94] | 10.58 | &lt; .001***\ndisp       |       qsec | -0.43 | [-0.68, -0.10] | -2.64 | 0.197    \ndisp       |         vs | -0.71 | [-0.85, -0.48] | -5.53 | &lt; .001***\ndisp       |         am | -0.59 | [-0.78, -0.31] | -4.02 | 0.010*   \ndisp       |       gear | -0.56 | [-0.76, -0.26] | -3.66 | 0.023*   \ndisp       |       carb |  0.39 | [ 0.05,  0.65] |  2.35 | 0.303    \nhp         |       drat | -0.45 | [-0.69, -0.12] | -2.75 | 0.170    \nhp         |         wt |  0.66 | [ 0.40,  0.82] |  4.80 | 0.001**  \nhp         |       qsec | -0.71 | [-0.85, -0.48] | -5.49 | &lt; .001***\nhp         |         vs | -0.72 | [-0.86, -0.50] | -5.73 | &lt; .001***\nhp         |         am | -0.24 | [-0.55,  0.12] | -1.37 | &gt; .999   \nhp         |       gear | -0.13 | [-0.45,  0.23] | -0.69 | &gt; .999   \nhp         |       carb |  0.75 | [ 0.54,  0.87] |  6.21 | &lt; .001***\ndrat       |         wt | -0.71 | [-0.85, -0.48] | -5.56 | &lt; .001***\ndrat       |       qsec |  0.09 | [-0.27,  0.43] |  0.50 | &gt; .999   \ndrat       |         vs |  0.44 | [ 0.11,  0.68] |  2.69 | 0.187    \ndrat       |         am |  0.71 | [ 0.48,  0.85] |  5.57 | &lt; .001***\ndrat       |       gear |  0.70 | [ 0.46,  0.84] |  5.36 | &lt; .001***\ndrat       |       carb | -0.09 | [-0.43,  0.27] | -0.50 | &gt; .999   \nwt         |       qsec | -0.17 | [-0.49,  0.19] | -0.97 | &gt; .999   \nwt         |         vs | -0.55 | [-0.76, -0.26] | -3.65 | 0.023*   \nwt         |         am | -0.69 | [-0.84, -0.45] | -5.26 | &lt; .001***\nwt         |       gear | -0.58 | [-0.77, -0.29] | -3.93 | 0.012*   \nwt         |       carb |  0.43 | [ 0.09,  0.68] |  2.59 | 0.205    \nqsec       |         vs |  0.74 | [ 0.53,  0.87] |  6.11 | &lt; .001***\nqsec       |         am | -0.23 | [-0.54,  0.13] | -1.29 | &gt; .999   \nqsec       |       gear | -0.21 | [-0.52,  0.15] | -1.19 | &gt; .999   \nqsec       |       carb | -0.66 | [-0.82, -0.40] | -4.76 | 0.001**  \nvs         |         am |  0.17 | [-0.19,  0.49] |  0.94 | &gt; .999   \nvs         |       gear |  0.21 | [-0.15,  0.52] |  1.15 | &gt; .999   \nvs         |       carb | -0.57 | [-0.77, -0.28] | -3.80 | 0.017*   \nam         |       gear |  0.79 | [ 0.62,  0.89] |  7.16 | &lt; .001***\nam         |       carb |  0.06 | [-0.30,  0.40] |  0.32 | &gt; .999   \ngear       |       carb |  0.27 | [-0.08,  0.57] |  1.56 | &gt; .999   \n\np-value adjustment method: Holm (1979)\nObservations: 32\n\n\n\nIn a correlation test, there is something called an uncertainty band - it gives you the range [x +- y]. This uncertainity should not be such that the range falls both on negative as well as positive. The correlation score should either be +ve or -ve. It should never be both.\n\n\ncor %&gt;%\n  # Filter for target variable `mpg` and plot\n  filter(Parameter1 == \"mpg\") %&gt;%\n  gf_point(r ~ reorder(Parameter2, r), size = 4) %&gt;%\n  gf_errorbar(CI_low + CI_high ~ reorder(Parameter2, r),\n    width = 0.5\n  ) %&gt;%\n  gf_hline(yintercept = 0, color = \"grey\", linewidth = 2) %&gt;%\n  gf_labs(\n    title = \"Correlation Errorbar Chart\",\n    subtitle = \"Target variable: mpg\",\n    x = \"Predictor Variable\",\n    y = \"Correlation Score with mpg\"\n  )\n\n\n\n\n\n\n\n\n\nSeveral variables are negatively correlated and some are positively correlated with ’mpg`. (The grey line shows “zero correlation”)\nSince none of the error bars straddle zero, the correlations are mostly significant.\n\n\nlibrary(ggExtra)\n\npenguins %&gt;%\n  drop_na() %&gt;%\n  gf_point(body_mass_g ~ flipper_length_mm, colour = ~species) %&gt;%\n  gf_smooth(method = \"lm\") %&gt;%\n  gf_refine(scale_colour_brewer(palette = \"Accent\")) %&gt;%\n  gf_labs(title = \"Scatter Plot with Marginal Densities\") %&gt;%\n  ggExtra::ggMarginal(\n    type = \"density\", groupColour = TRUE,\n    groupFill = TRUE, margins = \"both\"\n  )"
  },
  {
    "objectID": "posts/Aish-day-2/index.html",
    "href": "posts/Aish-day-2/index.html",
    "title": "day-2",
    "section": "",
    "text": "I am working with data summaries. First, mpg, then something else.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows"
  },
  {
    "objectID": "posts/Aish-day-2/index.html#introduction",
    "href": "posts/Aish-day-2/index.html#introduction",
    "title": "day-2",
    "section": "",
    "text": "I am working with data summaries. First, mpg, then something else.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows"
  },
  {
    "objectID": "posts/Aish-day-2/index.html#look-at-this-mpg-dataset",
    "href": "posts/Aish-day-2/index.html#look-at-this-mpg-dataset",
    "title": "day-2",
    "section": "Look at this mpg dataset",
    "text": "Look at this mpg dataset\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\nPurpose of glimpse():\n\nProvides a compact overview of a dataset, showing variable names, types, and a preview of the values in each column.\ncomes under ‘tidyverse package’.\n\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n  head(10)\n\n[1] 10\n\n\n\ninspect(mpg)\n\n\ncategorical variables:  \n          name     class levels   n missing\n1 manufacturer character     15 234       0\n2        model character     38 234       0\n3        trans character     10 234       0\n4          drv character      3 234       0\n5           fl character      5 234       0\n6        class character      7 234       0\n                                   distribution\n1 dodge (15.8%), toyota (14.5%) ...            \n2 caravan 2wd (4.7%) ...                       \n3 auto(l4) (35.5%), manual(m5) (24.8%) ...     \n4 f (45.3%), 4 (44%), r (10.7%)                \n5 r (71.8%), p (22.2%), e (3.4%) ...           \n6 suv (26.5%), compact (20.1%) ...             \n\nquantitative variables:  \n   name   class    min     Q1 median     Q3  max        mean       sd   n\n1 displ numeric    1.6    2.4    3.3    4.6    7    3.471795 1.291959 234\n2  year integer 1999.0 1999.0 2003.5 2008.0 2008 2003.500000 4.509646 234\n3   cyl integer    4.0    4.0    6.0    8.0    8    5.888889 1.611534 234\n4   cty integer    9.0   14.0   17.0   19.0   35   16.858974 4.255946 234\n5   hwy integer   12.0   18.0   24.0   27.0   44   23.440171 5.954643 234\n  missing\n1       0\n2       0\n3       0\n4       0\n5       0\n\n\n\n\nPurpose of inspect():\n\nProvides a detailed comparison of the structure and contents of data frames. You use it when you want a deeper inspection of your dataset.\n\n\nskimr::skim(mpg)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n0\n1\n4\n10\n0\n15\n0\n\n\nmodel\n0\n1\n2\n22\n0\n38\n0\n\n\ntrans\n0\n1\n8\n10\n0\n10\n0\n\n\ndrv\n0\n1\n1\n1\n0\n3\n0\n\n\nfl\n0\n1\n1\n1\n0\n5\n0\n\n\nclass\n0\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n0\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n0\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n0\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n0\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n0\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁\n\n\n\n\n\n\n\nPurpose of skim():\n\nComes under ‘skimr’.\nProvides an in-depth summary of your data, including counts, mean, median, min/max, unique values, and missing values for each variable. You use it when you need detailed description for each column in your dataset, both for numeric and catagorical values.\n\n\nmpg_modified &lt;- mpg %&gt;%\n  dplyr::mutate(\n    cyl = as_factor(cyl),\n    fl = as_factor(fl),\n    drv = as_factor(drv),\n    class = as_factor(class),\n    trans = as_factor(trans)\n  )\nglimpse(mpg_modified)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;fct&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man…\n$ drv          &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, …\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, …\n$ class        &lt;fct&gt; compact, compact, compact, compact, compact, compact, com…\n\n\n\nFactors?? what are those?\nA factor in R is a data type used to represent categorical variables. It stores both the values of the variable (called levels) and the actual data. Factors are particularly useful for handling nominal (unordered categories) and ordinal (ordered categories) data.\n\nNominal variables: Categories that do not have a specific order (e.g., “Male”, “Female”, “Yes”, “No”).\n\n\n\nOrdinal variables: Categories that have a meaningful order (e.g., “Low”, “Medium”, “High”).\n\nWhen you convert a variable into a factor, R internally stores it as an integer where each integer corresponds to a category (or level), but displays the original categories as labels.\nThe need to convert data into factors arises when you want to treat variables as categorical, ensure correct ordering for ordinal data, save memory, and properly represent your data in models or plots.\n\nmpg_modified %&gt;%\n  group_by(cyl) %&gt;%\n  summarize(average_hwy = mean(hwy), count = n())\n\n# A tibble: 4 × 3\n  cyl   average_hwy count\n  &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n1 4            28.8    81\n2 5            28.8     4\n3 6            22.8    79\n4 8            17.6    70\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl, fl) %&gt;%\n  summarize(average_hwy = mean(hwy), count = n())\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 13 × 4\n# Groups:   cyl [4]\n   cyl   fl    average_hwy count\n   &lt;fct&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 4     p            27.8    22\n 2 4     r            28.3    55\n 3 4     d            43       3\n 4 4     c            36       1\n 5 5     r            28.8     4\n 6 6     p            25.3    17\n 7 6     r            22.2    60\n 8 6     e            17       1\n 9 6     d            22       1\n10 8     p            20.8    13\n11 8     r            17.5    49\n12 8     e            12.7     7\n13 8     d            17       1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My-Blog-for-Peasants",
    "section": "",
    "text": "day-2\n\n\n\n\n\n\n\n\n\n\n\nAishwarya\n\n\n\n\n\n\n\n\n\n\n\n\nDay-4\n\n\n\n\n\n\n\n\n\n\n\nAish\n\n\n\n\n\n\n\n\n\n\n\n\nday-5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nday-6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay-7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay-3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDataset-3: Hearing loss in children\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDataset-1: Do Women live longer?\n\n\n\n\n\n\n\n\n\n\n\nAish\n\n\n\n\n\n\n\n\n\n\n\n\nGrades-Dataset\n\n\n\n\n\n\n\n\n\n\n\nAish\n\n\n\n\n\n\n\n\n\n\n\n\nDataset-2: Movie Profits\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy name is Aish K\n\n\n\n\n\n\n\n\n\n\n\nAishwarya\n\n\n\n\n\n\n\n\n\n\n\n\nPocket Money [A3]\n\n\n\n\n\n\n\n\n\n\n\nAish\n\n\n\n\n\n\n\n\n\n\n\n\nTips-data [A3]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nSep 26, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 23, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Aish-day-4/index.html",
    "href": "posts/Aish-day-4/index.html",
    "title": "Day-4",
    "section": "",
    "text": "We have downloaded a new library today - “crosstable”. It is used for fast stats for multiple variables in table form.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\n\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\nskim(diamonds)\n\n\nData summary\n\n\nName\ndiamonds\n\n\nNumber of rows\n53940\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\ncut\n0\n1\nTRUE\n5\nIde: 21551, Pre: 13791, Ver: 12082, Goo: 4906\n\n\ncolor\n0\n1\nTRUE\n7\nG: 11292, E: 9797, F: 9542, H: 8304\n\n\nclarity\n0\n1\nTRUE\n8\nSI1: 13065, VS2: 12258, SI2: 9194, VS1: 8171\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncarat\n0\n1\n0.80\n0.47\n0.2\n0.40\n0.70\n1.04\n5.01\n▇▂▁▁▁\n\n\ndepth\n0\n1\n61.75\n1.43\n43.0\n61.00\n61.80\n62.50\n79.00\n▁▁▇▁▁\n\n\ntable\n0\n1\n57.46\n2.23\n43.0\n56.00\n57.00\n59.00\n95.00\n▁▇▁▁▁\n\n\nprice\n0\n1\n3932.80\n3989.44\n326.0\n950.00\n2401.00\n5324.25\n18823.00\n▇▂▁▁▁\n\n\nx\n0\n1\n5.73\n1.12\n0.0\n4.71\n5.70\n6.54\n10.74\n▁▁▇▃▁\n\n\ny\n0\n1\n5.73\n1.14\n0.0\n4.72\n5.71\n6.54\n58.90\n▇▁▁▁▁\n\n\nz\n0\n1\n3.54\n0.71\n0.0\n2.91\n3.53\n4.04\n31.80\n▇▁▁▁▁\n\n\n\n\n\n\ninspect(diamonds)\n\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n\n\n\ngf_histogram(~price, data = diamonds) %&gt;%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;% \n  gf_histogram(~price, bins = 100) %&gt;% \n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n\n  )\n\n\n\n\n\n\n\n\n\n\n\nThere are a great many diamonds at relatively low prices, but there are a good few diamonds at very high prices too.\nUsing a high number of bins does not materially change the view of the histogram.\n\n\ndiamonds %&gt;% \n  gf_histogram(~carat) %&gt;% \n  gf_labs(\n     title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;% \n  gf_histogram(~carat, bins = 100) %&gt;% \n  gf_labs(\n     title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nthere is a marked “discreteness” to the distribution. Some values of carat are far more common than others. For example, 1, 1.5, and 2 carat diamonds are large in number.\n\n\ndiamonds %&gt;% \n  gf_histogram(~price, fill = ~cut) %&gt;% \n  gf_labs(\n     title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut) %&gt;%\n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n\n\n\n\n\n\n\n\n\ninstall.packages(\"shiny\")\nlibrary(shiny)\nrunExample(\"01_hello\") # an interactive histogram\n\n\n\n\n\n\nrace_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n\n\n\nrace_df %&gt;%\n  favstats(~distance, data = .)\n\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n\n\n\n##\nrace_df %&gt;%\n  favstats(~participants, data = .)\n\n min Q1 median  Q3  max     mean       sd    n missing\n   0  0     21 150 2900 120.4872 281.8337 1207       0\n\n\n\n##\nrank_df %&gt;%\n  drop_na() %&gt;%\n  favstats(time_in_seconds ~ gender, data = .)\n\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n\n\n\n## library(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablegenderMWNAtime_in_secondsMin / Max3600.0 / 2.9e+059191.0 / 3.0e+058131.0 / 2.2e+05Med [IQR]1.2e+05 [9.7e+04;1.5e+05]1.1e+05 [9.7e+04;1.3e+05]1.2e+05 [9.9e+04;1.5e+05]Mean (std)1.2e+05 (3.8e+04)1.2e+05 (3.5e+04)1.2e+05 (4.4e+04)N (NA)101643 (15073)18341 (2716)28 (2)ageMin / Max0 / 133.00 / 81.029.0 / 59.0Med [IQR]47.0 [40.0;53.0]45.0 [39.0;52.0]40.5 [36.0;50.5]Mean (std)46.4 (10.2)45.3 (9.7)41.7 (9.0)N (NA)116716 (0)21057 (0)30 (0)\n\n\n\n\n\nrace_df %&gt;%\n  count(country) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 61 × 2\n   country            n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n\n\n\nrank_df %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 133 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n\n\nInsights:\n\nthe first piece of code tells the no. of races hosted by the respective countries, whereas the secodn piece of code tells no, of participants from each county.\nThe top three locations for races were the USA, UK, and France. These are also the countries that send the maximum number of participants, naturally!\n\n\n\n\n\nrank_df %&gt;%\n  filter(rank %in% c(1, 2, 3)) %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n\n\n\n\n\n\nlongest_races &lt;- race_df %&gt;%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\nlongest_races %&gt;%\n  left_join(., rank_df, by = \"race_year_id\") %&gt;% # total participants in longest 4 races\n  filter(rank %in% c(1:10)) %&gt;% # Top 10 ranks\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  nationality     n\n  &lt;chr&gt;       &lt;int&gt;\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n\n\n\n\n\n\nrank_df %&gt;%\n  gf_histogram(~time_in_seconds, bins = 75) %&gt;%\n  gf_labs(title = \"Histogram of Race Times\")\n\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n“1e+05” means 1×10 to the power 5. this is equal to 100,000 seconds.\n\n\n\n\n\nrace_df %&gt;%\n  gf_histogram(~distance, bins = 50) %&gt;%\n  gf_labs(title = \"Histogram of Race Distances\")\n\n\n\n\n\n\n\n\n\nrace_df %&gt;%\n  filter(distance == 0)\n\n# A tibble: 74 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        64771 The Old… 100m… Hanm… New Ze… 2021-05-14 10:00      solo         \n 2        71220 Run Lov… 100M  &lt;NA&gt;  United… 2021-02-26 00:00      solo         \n 3        67160 IDAHO M… 100 … &lt;NA&gt;  United… 2020-09-12 00:00      solo         \n 4        67713 Pine cr… 100M… Well… PA, Un… 2020-09-12 00:00      solo         \n 5        51777 Chiemga… 100 … Berg… Germany 2020-07-31 13:00      Solo         \n 6        66413 Palisad… Moos… Irwin United… 2020-07-17 05:00      solo         \n 7        62593 Run Lov… 100M  &lt;NA&gt;  United… 2020-02-28 00:00      solo         \n 8        50097 The Gre… The … Hanm… New Ze… 2020-01-17 07:00      solo         \n 9        65861 Loup Ga… 100M  Vill… LA, Un… 2019-12-14 00:00      solo         \n10        59415 RIO DEL… 100 … &lt;NA&gt;  United… 2019-11-07 00:00      solo         \n# ℹ 64 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n\n\nsome of these zero-distance races have had participants too! Perhaps these were cancelled events…all of them are stated to be 100 mile events…\n\n\n\n\n\nrace_times &lt;- race_df %&gt;%\n  count(start_time) %&gt;%\n  arrange(desc(n))\nrace_times\n\n# A tibble: 39 × 2\n   start_time     n\n   &lt;time&gt;     &lt;int&gt;\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n\n\n\n# Demo purposes only!\n\nrace_start_factor &lt;- race_df %&gt;%\n  filter(distance == 0) %&gt;% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time &gt; hms(\"02:00:00\") &\n          start_time &lt;= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time &gt; hms(\"06:00:01\") &\n          start_time &lt;= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time &gt; hms(\"10:00:01\") &\n          start_time &lt;= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time &gt; hms(\"14:00:01\") &\n          start_time &lt;= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time &gt; hms(\"18:00:01\") &\n          start_time &lt;= hms(\"22:00:00\") ~ \"evening\",\n        start_time &gt; hms(\"22:00:01\") &\n          start_time &lt;= hms(\"23:59:59\") ~ \"night\",\n        start_time &gt;= hms(\"00:00:00\") &\n          start_time &lt;= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %&gt;%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %&gt;%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%&gt;%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n\n##\n# Join with rank_df\nrace_start_factor %&gt;%\n  left_join(rank_df, by = \"race_year_id\") %&gt;%\n  drop_na(time_in_seconds) %&gt;%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %&gt;%\n  gf_labs(title = \"Race Times by Start-Time\")"
  },
  {
    "objectID": "posts/Aish-day-4/index.html#quantities",
    "href": "posts/Aish-day-4/index.html#quantities",
    "title": "Day-4",
    "section": "",
    "text": "We have downloaded a new library today - “crosstable”. It is used for fast stats for multiple variables in table form.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact"
  },
  {
    "objectID": "posts/Aish-day-4/index.html#examining-the-diamonds-dataset.",
    "href": "posts/Aish-day-4/index.html#examining-the-diamonds-dataset.",
    "title": "Day-4",
    "section": "",
    "text": "glimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\nskim(diamonds)\n\n\nData summary\n\n\nName\ndiamonds\n\n\nNumber of rows\n53940\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\ncut\n0\n1\nTRUE\n5\nIde: 21551, Pre: 13791, Ver: 12082, Goo: 4906\n\n\ncolor\n0\n1\nTRUE\n7\nG: 11292, E: 9797, F: 9542, H: 8304\n\n\nclarity\n0\n1\nTRUE\n8\nSI1: 13065, VS2: 12258, SI2: 9194, VS1: 8171\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncarat\n0\n1\n0.80\n0.47\n0.2\n0.40\n0.70\n1.04\n5.01\n▇▂▁▁▁\n\n\ndepth\n0\n1\n61.75\n1.43\n43.0\n61.00\n61.80\n62.50\n79.00\n▁▁▇▁▁\n\n\ntable\n0\n1\n57.46\n2.23\n43.0\n56.00\n57.00\n59.00\n95.00\n▁▇▁▁▁\n\n\nprice\n0\n1\n3932.80\n3989.44\n326.0\n950.00\n2401.00\n5324.25\n18823.00\n▇▂▁▁▁\n\n\nx\n0\n1\n5.73\n1.12\n0.0\n4.71\n5.70\n6.54\n10.74\n▁▁▇▃▁\n\n\ny\n0\n1\n5.73\n1.14\n0.0\n4.72\n5.71\n6.54\n58.90\n▇▁▁▁▁\n\n\nz\n0\n1\n3.54\n0.71\n0.0\n2.91\n3.53\n4.04\n31.80\n▇▁▁▁▁\n\n\n\n\n\n\ninspect(diamonds)\n\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n\n\n\ngf_histogram(~price, data = diamonds) %&gt;%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;% \n  gf_histogram(~price, bins = 100) %&gt;% \n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n\n  )\n\n\n\n\n\n\n\n\n\n\n\nThere are a great many diamonds at relatively low prices, but there are a good few diamonds at very high prices too.\nUsing a high number of bins does not materially change the view of the histogram.\n\n\ndiamonds %&gt;% \n  gf_histogram(~carat) %&gt;% \n  gf_labs(\n     title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;% \n  gf_histogram(~carat, bins = 100) %&gt;% \n  gf_labs(\n     title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nthere is a marked “discreteness” to the distribution. Some values of carat are far more common than others. For example, 1, 1.5, and 2 carat diamonds are large in number.\n\n\ndiamonds %&gt;% \n  gf_histogram(~price, fill = ~cut) %&gt;% \n  gf_labs(\n     title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut) %&gt;%\n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n\n\n\n\n\n\n\n\n\ninstall.packages(\"shiny\")\nlibrary(shiny)\nrunExample(\"01_hello\") # an interactive histogram"
  },
  {
    "objectID": "posts/Aish-day-4/index.html#examining-the-race-dataset.",
    "href": "posts/Aish-day-4/index.html#examining-the-race-dataset.",
    "title": "Day-4",
    "section": "",
    "text": "race_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n\n\n\nrace_df %&gt;%\n  favstats(~distance, data = .)\n\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n\n\n\n##\nrace_df %&gt;%\n  favstats(~participants, data = .)\n\n min Q1 median  Q3  max     mean       sd    n missing\n   0  0     21 150 2900 120.4872 281.8337 1207       0\n\n\n\n##\nrank_df %&gt;%\n  drop_na() %&gt;%\n  favstats(time_in_seconds ~ gender, data = .)\n\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n\n\n\n## library(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablegenderMWNAtime_in_secondsMin / Max3600.0 / 2.9e+059191.0 / 3.0e+058131.0 / 2.2e+05Med [IQR]1.2e+05 [9.7e+04;1.5e+05]1.1e+05 [9.7e+04;1.3e+05]1.2e+05 [9.9e+04;1.5e+05]Mean (std)1.2e+05 (3.8e+04)1.2e+05 (3.5e+04)1.2e+05 (4.4e+04)N (NA)101643 (15073)18341 (2716)28 (2)ageMin / Max0 / 133.00 / 81.029.0 / 59.0Med [IQR]47.0 [40.0;53.0]45.0 [39.0;52.0]40.5 [36.0;50.5]Mean (std)46.4 (10.2)45.3 (9.7)41.7 (9.0)N (NA)116716 (0)21057 (0)30 (0)\n\n\n\n\n\nrace_df %&gt;%\n  count(country) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 61 × 2\n   country            n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n\n\n\nrank_df %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 133 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n\n\nInsights:\n\nthe first piece of code tells the no. of races hosted by the respective countries, whereas the secodn piece of code tells no, of participants from each county.\nThe top three locations for races were the USA, UK, and France. These are also the countries that send the maximum number of participants, naturally!\n\n\n\n\n\nrank_df %&gt;%\n  filter(rank %in% c(1, 2, 3)) %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n\n\n\n\n\n\nlongest_races &lt;- race_df %&gt;%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\nlongest_races %&gt;%\n  left_join(., rank_df, by = \"race_year_id\") %&gt;% # total participants in longest 4 races\n  filter(rank %in% c(1:10)) %&gt;% # Top 10 ranks\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  nationality     n\n  &lt;chr&gt;       &lt;int&gt;\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n\n\n\n\n\n\nrank_df %&gt;%\n  gf_histogram(~time_in_seconds, bins = 75) %&gt;%\n  gf_labs(title = \"Histogram of Race Times\")\n\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n“1e+05” means 1×10 to the power 5. this is equal to 100,000 seconds.\n\n\n\n\n\nrace_df %&gt;%\n  gf_histogram(~distance, bins = 50) %&gt;%\n  gf_labs(title = \"Histogram of Race Distances\")\n\n\n\n\n\n\n\n\n\nrace_df %&gt;%\n  filter(distance == 0)\n\n# A tibble: 74 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        64771 The Old… 100m… Hanm… New Ze… 2021-05-14 10:00      solo         \n 2        71220 Run Lov… 100M  &lt;NA&gt;  United… 2021-02-26 00:00      solo         \n 3        67160 IDAHO M… 100 … &lt;NA&gt;  United… 2020-09-12 00:00      solo         \n 4        67713 Pine cr… 100M… Well… PA, Un… 2020-09-12 00:00      solo         \n 5        51777 Chiemga… 100 … Berg… Germany 2020-07-31 13:00      Solo         \n 6        66413 Palisad… Moos… Irwin United… 2020-07-17 05:00      solo         \n 7        62593 Run Lov… 100M  &lt;NA&gt;  United… 2020-02-28 00:00      solo         \n 8        50097 The Gre… The … Hanm… New Ze… 2020-01-17 07:00      solo         \n 9        65861 Loup Ga… 100M  Vill… LA, Un… 2019-12-14 00:00      solo         \n10        59415 RIO DEL… 100 … &lt;NA&gt;  United… 2019-11-07 00:00      solo         \n# ℹ 64 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n\n\nsome of these zero-distance races have had participants too! Perhaps these were cancelled events…all of them are stated to be 100 mile events…\n\n\n\n\n\nrace_times &lt;- race_df %&gt;%\n  count(start_time) %&gt;%\n  arrange(desc(n))\nrace_times\n\n# A tibble: 39 × 2\n   start_time     n\n   &lt;time&gt;     &lt;int&gt;\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n\n\n\n# Demo purposes only!\n\nrace_start_factor &lt;- race_df %&gt;%\n  filter(distance == 0) %&gt;% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time &gt; hms(\"02:00:00\") &\n          start_time &lt;= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time &gt; hms(\"06:00:01\") &\n          start_time &lt;= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time &gt; hms(\"10:00:01\") &\n          start_time &lt;= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time &gt; hms(\"14:00:01\") &\n          start_time &lt;= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time &gt; hms(\"18:00:01\") &\n          start_time &lt;= hms(\"22:00:00\") ~ \"evening\",\n        start_time &gt; hms(\"22:00:01\") &\n          start_time &lt;= hms(\"23:59:59\") ~ \"night\",\n        start_time &gt;= hms(\"00:00:00\") &\n          start_time &lt;= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %&gt;%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %&gt;%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%&gt;%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n\n##\n# Join with rank_df\nrace_start_factor %&gt;%\n  left_join(rank_df, by = \"race_year_id\") %&gt;%\n  drop_na(time_in_seconds) %&gt;%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %&gt;%\n  gf_labs(title = \"Race Times by Start-Time\")"
  },
  {
    "objectID": "posts/Aish-day-6/index.html",
    "href": "posts/Aish-day-6/index.html",
    "title": "day-6",
    "section": "",
    "text": "Samples, Populations, Statistics and Inference\n\nAccording to the CLT, as the sample size increases, the distribution of the sample means becomes more tightly concentrated around the population mean, and the sampling distribution becomes narrower.\nSample size: number of observations or data points in sample. eg - If you are conducting a survey and collect responses from 100 people, your sample size is 100.\nshorter the sample, more inaccuracies.\nAs the sample becomes longer, the estimate of the mean becomes narrower.\n\nSince we would always work with a sample mean, it is not possible to know what the exact population mean is. However, there is something called as a confidence interval, whisk is the standard deviation around the sample mean. With confidence interval, we can say that the probability of population mean being within this range is rather very high.\n\nnarrow confidence intervals correlate to high accuracy of the sample set.\n\n\n\nBasics of Randomization Tests\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(broom) # Clean test results in tibble form\nlibrary(resampledata) # Datasets from Chihara and Hesterberg's book\n\n\nAttaching package: 'resampledata'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n\nlibrary(openintro) # More datasets\n\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:mosaic':\n\n    dotPlot\n\nThe following objects are masked from 'package:lattice':\n\n    ethanol, lsegments\n\n\nAs we will notice, the process of Statistical Inference is an attitude: ain’t nothing happenin’! We look at data that we might have received or collected ourselves, and look at it with this attitude, seemingly, of some disbelief. We state either that:\n\nthere is really nothing happening with our research question, and that anything we see in the data is the outcome of random chance.\nthe value/statistic indicated by the data is off the mark and ought to be something else.\n\nWe then calculate how slim the chances are of the given data sample showing up like that, given our belief. It is a distance measurement of sorts. If those chances are too low, then that might alter our belief. This is the attitude that lies at the heart of Hypothesis Testing.\n\nCase Study #1: Toy data\n\nset.seed(40)  # for replication\n# Data as individual vectors ( for t.tests etc)\ny &lt;- rnorm(50, mean = 2, sd = 2)\n\n# And as tibble too\nmydata &lt;- tibble(y = y)\nmydata\n\n# A tibble: 50 × 1\n        y\n    &lt;dbl&gt;\n 1  2.96 \n 2  2.99 \n 3  0.281\n 4  0.342\n 5  1.36 \n 6 -0.608\n 7 -0.843\n 8  5.49 \n 9  1.42 \n10 -0.618\n# ℹ 40 more rows\n\n\n\n\nInspecting and Charting Data\n\nmydata %&gt;%\n    gf_density(~y) %&gt;%\n    gf_fitdistr(dist = \"dnorm\") %&gt;%\n    gf_labs(title = \"Densities of Original Data Variables\", subtitle = \"Compared with Normal Density\")\n\n\n\n\n\n\n\n\n\nThe variable y appear to be centred around 2\nIt does not seem to be normally distributed…\n\nResearch Question - Could the mean of the population μ, from which y has been drawn, be zero?\nAssumption - variable does not appear to be normally distributed. This would affect the test we can use to make inferences about the population mean."
  },
  {
    "objectID": "posts/do-women-live-longer/index.html",
    "href": "posts/do-women-live-longer/index.html",
    "title": "Dataset-1: Do Women live longer?",
    "section": "",
    "text": "I don’t know yet. If yes, then good for me I suppose :)\nLet’s find out.\nFirst, we gotta set up our document with relevant packages.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\nNow, let’s import the dataset.\n\nwomen &lt;- read_delim(file = \"../../data/women.csv\",delim =\";\")\n\nRows: 18408 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (3): Entity, Code, Continent\ndbl (2): Year, Population - Sex: all - Age: all - Variant: estimates\nnum (2): Life expectancy - Sex: female - Age: at birth - Variant: estimates,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(women)\n\nRows: 18,408\nColumns: 7\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; N…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; N…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; N…\n$ Continent                                                            &lt;chr&gt; \"…\n\nview(women)\n\n\nskim(women)\n\n\nData summary\n\n\nName\nwomen\n\n\nNumber of rows\n18408\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEntity\n0\n1.00\n4\n59\n0\n303\n0\n\n\nCode\n1224\n0.93\n3\n8\n0\n286\n0\n\n\nContinent\n18123\n0.02\n4\n13\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1.00\n1985.58\n20.81\n1950\n1968.0\n1986\n2004\n2021\n▇▇▇▇▇\n\n\nLife expectancy - Sex: female - Age: at birth - Variant: estimates\n48\n1.00\n659.67\n125.11\n127\n574.0\n689\n757\n887\n▁▁▅▇▇\n\n\nLife expectancy - Sex: male - Age: at birth - Variant: estimates\n48\n1.00\n610.25\n115.53\n101\n534.0\n634\n697\n848\n▁▁▃▇▅\n\n\nPopulation - Sex: all - Age: all - Variant: estimates\n120\n0.99\n126470436.62\n588851230.77\n1363\n291591.5\n3833998\n16785464\n7909295000\n▇▁▁▁▁\n\n\n\n\n\n\ninspect(women)\n\n\ncategorical variables:  \n       name     class levels     n missing\n1    Entity character    303 18408       0\n2      Code character    286 17184    1224\n3 Continent character      7   285   18123\n                                   distribution\n1 Afghanistan (0.4%) ...                       \n2 ABW (0.4%), AFG (0.4%), AGO (0.4%) ...       \n3 Europe (26.3%), Asia (21.8%) ...             \n\nquantitative variables:  \n                                                                name   class\n1                                                               Year numeric\n2 Life expectancy - Sex: female - Age: at birth - Variant: estimates numeric\n3   Life expectancy - Sex: male - Age: at birth - Variant: estimates numeric\n4              Population - Sex: all - Age: all - Variant: estimates numeric\n   min       Q1  median       Q3        max         mean           sd     n\n1 1950   1968.0    1986     2004       2021 1.985577e+03 2.081051e+01 18408\n2  127    574.0     689      757        887 6.596735e+02 1.251064e+02 18360\n3  101    534.0     634      697        848 6.102504e+02 1.155310e+02 18360\n4 1363 291591.5 3833998 16785464 7909295000 1.264704e+08 5.888512e+08 18288\n  missing\n1       0\n2      48\n3      48\n4     120\n\n\n\n\n\n\n\nEntity (chr): Name of the country.\nCode (chr): code of the entity.\nyear (chr): year of entry.\nContinent (chr): continents from which the entries belong (fct).\n\n\n\n\n\nLifeExpFemale (dbl): life expectancy of females of the respective country.\nLifeExpMale (dbl): life expectancy of males of the respective country.\nPopulation (dbl): Population of the country.\n\n\nwomen_modified &lt;- women %&gt;% \n  filter(Year == 2015)\nglimpse(women_modified)\n\nRows: 303\nColumns: 7\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; N…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; N…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; N…\n$ Continent                                                            &lt;chr&gt; \"…\n\n\nSo, the reason why I have filtered out the data on the basis on year 2015 is so that I can replicate the table in Arvind’s website. I suppose, it has been done also because it is easier to analyse such context while keeping the year constant. Why? I think it is so because there are other vital factors ( like pollution index, poverty index, cultural and ‘current’ affairs etc.) that play a crucial role in determining the life expectancy, and they tend to change overtime.\nNow, I will drop the missing values.\n\nwomen_modified &lt;- women_modified %&gt;% drop_na()\n\nglimpse(women_modified)\n\nRows: 236\nColumns: 7\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; 6…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; 6…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; 3…\n$ Continent                                                            &lt;chr&gt; \"…\n\n\nNow, we shall do some renaming and mutating to make our lives easier.\n\nwomen_modified &lt;- women_modified %&gt;% \n  mutate(\n    life_exp_female = `Life expectancy - Sex: female - Age: at birth - Variant: estimates` / 10,\n    life_exp_male = `Life expectancy - Sex: male - Age: at birth - Variant: estimates` / 10,\n    Continent = as.factor(Continent)\n  )\n\nglimpse(women_modified)\n\nRows: 236\nColumns: 9\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; 6…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; 6…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; 3…\n$ Continent                                                            &lt;fct&gt; A…\n$ life_exp_female                                                      &lt;dbl&gt; 6…\n$ life_exp_male                                                        &lt;dbl&gt; 6…\n\n\nHere we go!\nI shall now recreate the chart that is given on Arvind’s website.\n\nwomen_modified %&gt;%\n  gf_point(life_exp_female ~ life_exp_male) %&gt;%\n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Life expectancy across years\"\n  )\n\n\n\n\n\n\n\n\nThis is a scatter plot! It is depicting the correlation between life expectancy between males and females. I am unable to recreate the exact replica of the graph; I can’t figure out how to. However, it seems like we can make do with this for the time being.\nWhen we look at this graph carefully, we see that almost all the points are placed such that for every point, x ( male life expectancy) &lt; y(female life expectancy).\nTo better understand what is going on, I will add a line to the graph.\n\nwomen_modified %&gt;%\n  gf_point(life_exp_female ~ life_exp_male) %&gt;%\n  gf_lm() %&gt;% \n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Life expectancy across years\"\n  )\n\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\n\n\n\n\nWe see that while it may appear that the slope (m) = 1, it is not true. When we look carefully, we see that vale on the x axis starts from 50 onwards, whereas it start from 60 onwards on y axis. Hence, m is not 1.\nIn the website’s chart, it is clearly seen that life expectancy for both the genders is more or less the same in countries with bigger populations.\n\n\n\nit represents slop of the graph when m = 1, meaning when there is a 1:1 correlation between both the variables. It is also called the equality line.\n\n\n\n\n\nFiltering by year\ndropping rows with missing data\nrenaming and mutating data\n\nI used mutate to both rename and mutate the data variables\nrenames the life expectancy variables and then divided them by 10 to get the exact age.\nI converted ‘continent’ variable to factor as it had 7 levels. It seemed only fair to convert it to a factor.\n\n\n\n\n\nLife expectancy is calculated at different stages and ages. I do not think the researchers went around on the streets gathering data themselves, although that would’ve been fun. However, I believe this data might have been obtained through different sources over the years. For example, they would’ve contacted WHO and other trusted organizations to gather this data. Government websites, and hospitals from across the world would’ve been contacted for the same.\nIt is also possible that physical surveys were conducted by authorities, especially in smaller countries where it is probably not possible to find tidy data, and accessibility through digital mediums is not entirely possible.\n\n\n\n\nWhich gender lives longer in a particular city?\nDo women live longer than men in countries with big populations?\nWomen tend to live a longer and happier life, no matter where they are [Hypothesis].\n\n\n\n\nAcross most countries, women consistently live longer than men, with nearly all data points above the equality line. In Countries with bigger populations, life expectancy is mostly same between both the genders. Despite being considered the weaker gender, women outlive the ‘stronger’ men."
  },
  {
    "objectID": "posts/do-women-live-longer/index.html#data-dictionary",
    "href": "posts/do-women-live-longer/index.html#data-dictionary",
    "title": "Dataset-1: Do Women live longer?",
    "section": "",
    "text": "Entity (chr): Name of the country.\nCode (chr): code of the entity.\nyear (chr): year of entry.\nContinent (chr): continents from which the entries belong (fct).\n\n\n\n\n\nLifeExpFemale (dbl): life expectancy of females of the respective country.\nLifeExpMale (dbl): life expectancy of males of the respective country.\nPopulation (dbl): Population of the country.\n\n\nwomen_modified &lt;- women %&gt;% \n  filter(Year == 2015)\nglimpse(women_modified)\n\nRows: 303\nColumns: 7\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; N…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; N…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; N…\n$ Continent                                                            &lt;chr&gt; \"…\n\n\nSo, the reason why I have filtered out the data on the basis on year 2015 is so that I can replicate the table in Arvind’s website. I suppose, it has been done also because it is easier to analyse such context while keeping the year constant. Why? I think it is so because there are other vital factors ( like pollution index, poverty index, cultural and ‘current’ affairs etc.) that play a crucial role in determining the life expectancy, and they tend to change overtime.\nNow, I will drop the missing values.\n\nwomen_modified &lt;- women_modified %&gt;% drop_na()\n\nglimpse(women_modified)\n\nRows: 236\nColumns: 7\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; 6…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; 6…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; 3…\n$ Continent                                                            &lt;chr&gt; \"…\n\n\nNow, we shall do some renaming and mutating to make our lives easier.\n\nwomen_modified &lt;- women_modified %&gt;% \n  mutate(\n    life_exp_female = `Life expectancy - Sex: female - Age: at birth - Variant: estimates` / 10,\n    life_exp_male = `Life expectancy - Sex: male - Age: at birth - Variant: estimates` / 10,\n    Continent = as.factor(Continent)\n  )\n\nglimpse(women_modified)\n\nRows: 236\nColumns: 9\n$ Entity                                                               &lt;chr&gt; \"…\n$ Code                                                                 &lt;chr&gt; \"…\n$ Year                                                                 &lt;dbl&gt; 2…\n$ `Life expectancy - Sex: female - Age: at birth - Variant: estimates` &lt;dbl&gt; 6…\n$ `Life expectancy - Sex: male - Age: at birth - Variant: estimates`   &lt;dbl&gt; 6…\n$ `Population - Sex: all - Age: all - Variant: estimates`              &lt;dbl&gt; 3…\n$ Continent                                                            &lt;fct&gt; A…\n$ life_exp_female                                                      &lt;dbl&gt; 6…\n$ life_exp_male                                                        &lt;dbl&gt; 6…\n\n\nHere we go!\nI shall now recreate the chart that is given on Arvind’s website.\n\nwomen_modified %&gt;%\n  gf_point(life_exp_female ~ life_exp_male) %&gt;%\n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Life expectancy across years\"\n  )\n\n\n\n\n\n\n\n\nThis is a scatter plot! It is depicting the correlation between life expectancy between males and females. I am unable to recreate the exact replica of the graph; I can’t figure out how to. However, it seems like we can make do with this for the time being.\nWhen we look at this graph carefully, we see that almost all the points are placed such that for every point, x ( male life expectancy) &lt; y(female life expectancy).\nTo better understand what is going on, I will add a line to the graph.\n\nwomen_modified %&gt;%\n  gf_point(life_exp_female ~ life_exp_male) %&gt;%\n  gf_lm() %&gt;% \n  gf_labs(\n    title = \"Scatter Plot\",\n    subtitle = \"Life expectancy across years\"\n  )\n\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\n\n\n\n\nWe see that while it may appear that the slope (m) = 1, it is not true. When we look carefully, we see that vale on the x axis starts from 50 onwards, whereas it start from 60 onwards on y axis. Hence, m is not 1.\nIn the website’s chart, it is clearly seen that life expectancy for both the genders is more or less the same in countries with bigger populations.\n\n\n\nit represents slop of the graph when m = 1, meaning when there is a 1:1 correlation between both the variables. It is also called the equality line.\n\n\n\n\n\nFiltering by year\ndropping rows with missing data\nrenaming and mutating data\n\nI used mutate to both rename and mutate the data variables\nrenames the life expectancy variables and then divided them by 10 to get the exact age.\nI converted ‘continent’ variable to factor as it had 7 levels. It seemed only fair to convert it to a factor.\n\n\n\n\n\nLife expectancy is calculated at different stages and ages. I do not think the researchers went around on the streets gathering data themselves, although that would’ve been fun. However, I believe this data might have been obtained through different sources over the years. For example, they would’ve contacted WHO and other trusted organizations to gather this data. Government websites, and hospitals from across the world would’ve been contacted for the same.\nIt is also possible that physical surveys were conducted by authorities, especially in smaller countries where it is probably not possible to find tidy data, and accessibility through digital mediums is not entirely possible.\n\n\n\n\nWhich gender lives longer in a particular city?\nDo women live longer than men in countries with big populations?\nWomen tend to live a longer and happier life, no matter where they are [Hypothesis].\n\n\n\n\nAcross most countries, women consistently live longer than men, with nearly all data points above the equality line. In Countries with bigger populations, life expectancy is mostly same between both the genders. Despite being considered the weaker gender, women outlive the ‘stronger’ men."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Movie-profits/index.html",
    "href": "posts/Movie-profits/index.html",
    "title": "Dataset-2: Movie Profits",
    "section": "",
    "text": "Let’s set up our document with libraries first.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\nNow, let’s import the dataset.\n\nmovie &lt;- read_delim(file = \"../../data/movie_profit.csv\",delim =\";\")\n\nRows: 3310 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (4): movie, distributor, mpaa_rating, genre\ndbl  (4): production_budget, domestic_gross, worldwide_gross, decade\nnum  (1): profit_ratio\ndate (1): release_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(movie)\n\nRows: 3,310\nColumns: 10\n$ release_date      &lt;date&gt; 2005-07-22, 1998-08-28, 1997-03-28, 2000-07-14, 201…\n$ movie             &lt;chr&gt; \"November\", \"I Married a Strange Person\", \"Love and …\n$ production_budget &lt;dbl&gt; 250000, 250000, 250000, 250000, 250000, 250000, 2500…\n$ domestic_gross    &lt;dbl&gt; 191862, 203134, 212285, 1055671, 3395391, 3802390, 3…\n$ worldwide_gross   &lt;dbl&gt; 191862, 203134, 743216, 1157672, 3728400, 3809226, 3…\n$ distributor       &lt;chr&gt; \"Other\", \"Other\", \"Other\", \"Other\", \"Paramount Pictu…\n$ mpaa_rating       &lt;chr&gt; \"R\", NA, \"R\", \"R\", \"PG-13\", \"R\", \"R\", \"R\", \"R\", \"R\",…\n$ genre             &lt;chr&gt; \"Drama\", \"Comedy\", \"Comedy\", \"Drama\", \"Drama\", \"Dram…\n$ profit_ratio      &lt;dbl&gt; 7.674480e+13, 8.125360e+13, 2.972864e+14, 4.630688e+…\n$ decade            &lt;dbl&gt; 2000, 1990, 1990, 2000, 2010, 2000, 2010, 2000, 2010…\n\nview(movie)\n\n\nskim(movie)\n\n\nData summary\n\n\nName\nmovie\n\n\nNumber of rows\n3310\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nDate\n1\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmovie\n0\n1.00\n1\n35\n0\n3310\n0\n\n\ndistributor\n42\n0.99\n5\n18\n0\n6\n0\n\n\nmpaa_rating\n130\n0.96\n1\n5\n0\n4\n0\n\n\ngenre\n0\n1.00\n5\n9\n0\n5\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nrelease_date\n0\n1\n1936-02-05\n2017-12-22\n2005-06-30\n1723\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nproduction_budget\n0\n1\n3.326794e+07\n3.460741e+07\n2.50e+05\n9.500000e+06\n2.000000e+07\n4.500000e+07\n1.750000e+08\n▇▂▁▁▁\n\n\ndomestic_gross\n0\n1\n4.551509e+07\n5.852794e+07\n0.00e+00\n6.530094e+06\n2.558731e+07\n6.046695e+07\n4.745447e+08\n▇▁▁▁▁\n\n\nworldwide_gross\n0\n1\n9.384123e+07\n1.389514e+08\n4.23e+02\n1.086144e+07\n4.040903e+07\n1.184703e+08\n1.162782e+09\n▇▁▁▁▁\n\n\nprofit_ratio\n0\n1\n4.319388e+14\n1.501736e+15\n1.38e+10\n7.861269e+13\n1.962499e+14\n3.942158e+14\n4.315179e+16\n▇▁▁▁▁\n\n\ndecade\n0\n1\n1.998790e+03\n1.061000e+01\n1.93e+03\n1.990000e+03\n2.000000e+03\n2.010000e+03\n2.010000e+03\n▁▁▁▃▇\n\n\n\n\n\n\ninspect(movie)\n\n\ncategorical variables:  \n         name     class levels    n missing\n1       movie character   3310 3310       0\n2 distributor character      6 3268      42\n3 mpaa_rating character      4 3180     130\n4       genre character      5 3310       0\n                                   distribution\n1 10 Days in a Madhouse (0%) ...               \n2  Other (53.2%), Warner Bros. (11%) ...       \n3 R (46.4%), PG-13 (33.5%), PG (17.4%) ...     \n4 Drama (36.5%), Comedy (24.1%) ...            \n\nDate variables:  \n          name class      first       last min_diff  max_diff    n missing\n1 release_date  Date 1936-02-05 2017-12-22   0 days 2592 days 3310       0\n\nquantitative variables:  \n               name   class      min           Q1       median           Q3\n1 production_budget numeric 2.50e+05 9.500000e+06 2.000000e+07 4.500000e+07\n2    domestic_gross numeric 0.00e+00 6.530094e+06 2.558731e+07 6.046695e+07\n3   worldwide_gross numeric 4.23e+02 1.086144e+07 4.040903e+07 1.184703e+08\n4      profit_ratio numeric 1.38e+10 7.861269e+13 1.962499e+14 3.942158e+14\n5            decade numeric 1.93e+03 1.990000e+03 2.000000e+03 2.010000e+03\n           max         mean           sd    n missing\n1 1.750000e+08 3.326794e+07 3.460741e+07 3310       0\n2 4.745447e+08 4.551509e+07 5.852794e+07 3310       0\n3 1.162782e+09 9.384123e+07 1.389514e+08 3310       0\n4 4.315179e+16 4.319388e+14 1.501736e+15 3310       0\n5 2.010000e+03 1.998785e+03 1.061308e+01 3310       0\n\n\n\n\n\n\n\nmovie (chr): Name of the movie.\ndistributor (chr): company that is distributing the movie (fct).\nmpaa_rating (chr): movie rating (fct).\ngenre (chr): movie genre (fct).\ndecade (chr): movie genre.\n\n\n\n\n\nrelease_date (date): date of release.\nproduction_budget (dbl): budget for production of the movie.\ndomestic_gross (dbl): gross income for the movie in domestic box office.\nworldwide_gross (dbl): gross income for the movie in international box office.\nprofit_ratio (dbl): ratio of profit.\n\nThis dataset has equal numbers of qual as well as quant variables. profit_ratio is the target variable here, whereas genre and distributor are the potential predictor variables.\nNow, I will mutate some variables and turn them into factors.\n\nmovie_modified &lt;- movie %&gt;% \n  mutate(\n    distributor = as.factor(distributor),\n    mpaa_rating = as.factor(mpaa_rating),\n    genre = as.factor(genre),\n    decade = as.factor(decade)\n  )\n\nglimpse(movie_modified)\n\nRows: 3,310\nColumns: 10\n$ release_date      &lt;date&gt; 2005-07-22, 1998-08-28, 1997-03-28, 2000-07-14, 201…\n$ movie             &lt;chr&gt; \"November\", \"I Married a Strange Person\", \"Love and …\n$ production_budget &lt;dbl&gt; 250000, 250000, 250000, 250000, 250000, 250000, 2500…\n$ domestic_gross    &lt;dbl&gt; 191862, 203134, 212285, 1055671, 3395391, 3802390, 3…\n$ worldwide_gross   &lt;dbl&gt; 191862, 203134, 743216, 1157672, 3728400, 3809226, 3…\n$ distributor       &lt;fct&gt; Other, Other, Other, Other, Paramount Pictures, Para…\n$ mpaa_rating       &lt;fct&gt; R, NA, R, R, PG-13, R, R, R, R, R, R, R, PG-13, NA, …\n$ genre             &lt;fct&gt; Drama, Comedy, Comedy, Drama, Drama, Drama, Action, …\n$ profit_ratio      &lt;dbl&gt; 7.674480e+13, 8.125360e+13, 2.972864e+14, 4.630688e+…\n$ decade            &lt;fct&gt; 2000, 1990, 1990, 2000, 2010, 2000, 2010, 2000, 2010…\n\nprint(movie_modified)\n\n# A tibble: 3,310 × 10\n   release_date movie           production_budget domestic_gross worldwide_gross\n   &lt;date&gt;       &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;\n 1 2005-07-22   November                   250000         191862          191862\n 2 1998-08-28   I Married a St…            250000         203134          203134\n 3 1997-03-28   Love and Other…            250000         212285          743216\n 4 2000-07-14   Chuck&Buck                 250000        1055671         1157672\n 5 2011-10-28   Like Crazy                 250000        3395391         3728400\n 6 2003-04-11   Better Luck To…            250000        3802390         3809226\n 7 2017-04-28   Sleight                    250000        3930990         3934450\n 8 2002-06-28   Lovely and Ama…            250000        4210379         4613482\n 9 2012-08-17   Compliance                 270000         319285          830700\n10 2005-05-06   Fighting Tommy…            300000          10514           10514\n# ℹ 3,300 more rows\n# ℹ 5 more variables: distributor &lt;fct&gt;, mpaa_rating &lt;fct&gt;, genre &lt;fct&gt;,\n#   profit_ratio &lt;dbl&gt;, decade &lt;fct&gt;\n\n\n\n\n\n\nThe first one would be internet browsing. Availing data from sources like imdb, wikipedia, etc.\nLet’s say that an individual was very excited and enthusiastic about obtaining this dataset. They might have visited their nearest movie theaters every friday to get the movie names. For an enquiry to become a data set, it has to start somewhere with some variable.\nMore enthusiasm would’ve led them to call a production house and ask questions regarding the budget.\n\n\n\n\n\ndo profit margins for different genres vary across major film distributors?\nwhich genres are more profitable for each of the distributors?\nHow does the distributor “N/A” compare to the other big distributors?\nWhat is the comparison between domestic gross and international gross of the movies?\nwhat has been the trend in production budget across decades?\nwhich genre had most profit in each decade?\n\nLet’s replicate the graph now.\n\nmovie_modified %&gt;%\n  group_by(distributor, genre) %&gt;%                 \n  \n  summarise(median_profit_ratio = median(profit_ratio, na.rm = TRUE)) %&gt;%  \n  ggplot(aes(x = genre, y = median_profit_ratio)) +  \n  geom_bar(stat = \"identity\", fill = \"darkgray\") +   \n  facet_wrap(~ distributor) +                        \n  coord_flip() +                                     \n  labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"Genre\", \n    y = \"Median Profit Ratio\",\n    caption = \"Tidy Tuesday Oct 23, 2018\"\n  ) +\n  theme_minimal() +                                  \n  theme(\n    strip.text = element_text(face = \"bold\"),        \n    plot.title = element_text(face = \"bold\", size = 16)  \n  )\n\n`summarise()` has grouped output by 'distributor'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n[KINDLY NOTE: I have taken the help of chatgpt to replicate this graph as I was unable to figure it out myself.]\nThis is a bar graph!\n\n\n\n\nAll distributors have at least one genre that they make most profit from.\n‘Action’ genre is most successful in very small scale distributors named ‘N/A’.\n20th century fox has the most uniform distribution of profit margin across all genres.\n‘Drama’ seems to have the equal profitability margin across all distributors.\n‘Action’, ‘Adventure’, and ‘Horror’ generally have the done the most profit across all distributors.\n\n\n\n\nUse of delimiter in order to separate the columns.\n\n\n\nSince genres like action, adventure, and horror have uniform profits across all distributors, it is therefore more probable to make profitable movies belonging to these genres.\nBig distributors like 20th century fox and universal studios usually manage to make profits out of any of the said genre regardless of the rating.\nif one cannot get hold of these big distributors, the best way to break through would be to make action movies and sell them all across small distributors.\n\n\n\nThe company that had started out as “Comedy Spread” was doing wonders just a decade ago. Their light-hearted films and rom-com hits had audiences laughing all the way to the box office. However, times have changed now. People prefer action over drama and comedy (I can’t seem to understand why). With every passing year, their profits from action-packed blockbusters soared. It’s as if audiences crave the thrill of explosions, chases, and stunts more than ever. “Comedy Spread” finds itself at a crossroads—will they change themselves to survive in this market, or will they stick to their roots, hoping the world rekindles its love for a good laugh? Only time will tell."
  },
  {
    "objectID": "posts/Movie-profits/index.html#data-dictionary",
    "href": "posts/Movie-profits/index.html#data-dictionary",
    "title": "Dataset-2: Movie Profits",
    "section": "",
    "text": "movie (chr): Name of the movie.\ndistributor (chr): company that is distributing the movie (fct).\nmpaa_rating (chr): movie rating (fct).\ngenre (chr): movie genre (fct).\ndecade (chr): movie genre.\n\n\n\n\n\nrelease_date (date): date of release.\nproduction_budget (dbl): budget for production of the movie.\ndomestic_gross (dbl): gross income for the movie in domestic box office.\nworldwide_gross (dbl): gross income for the movie in international box office.\nprofit_ratio (dbl): ratio of profit.\n\nThis dataset has equal numbers of qual as well as quant variables. profit_ratio is the target variable here, whereas genre and distributor are the potential predictor variables.\nNow, I will mutate some variables and turn them into factors.\n\nmovie_modified &lt;- movie %&gt;% \n  mutate(\n    distributor = as.factor(distributor),\n    mpaa_rating = as.factor(mpaa_rating),\n    genre = as.factor(genre),\n    decade = as.factor(decade)\n  )\n\nglimpse(movie_modified)\n\nRows: 3,310\nColumns: 10\n$ release_date      &lt;date&gt; 2005-07-22, 1998-08-28, 1997-03-28, 2000-07-14, 201…\n$ movie             &lt;chr&gt; \"November\", \"I Married a Strange Person\", \"Love and …\n$ production_budget &lt;dbl&gt; 250000, 250000, 250000, 250000, 250000, 250000, 2500…\n$ domestic_gross    &lt;dbl&gt; 191862, 203134, 212285, 1055671, 3395391, 3802390, 3…\n$ worldwide_gross   &lt;dbl&gt; 191862, 203134, 743216, 1157672, 3728400, 3809226, 3…\n$ distributor       &lt;fct&gt; Other, Other, Other, Other, Paramount Pictures, Para…\n$ mpaa_rating       &lt;fct&gt; R, NA, R, R, PG-13, R, R, R, R, R, R, R, PG-13, NA, …\n$ genre             &lt;fct&gt; Drama, Comedy, Comedy, Drama, Drama, Drama, Action, …\n$ profit_ratio      &lt;dbl&gt; 7.674480e+13, 8.125360e+13, 2.972864e+14, 4.630688e+…\n$ decade            &lt;fct&gt; 2000, 1990, 1990, 2000, 2010, 2000, 2010, 2000, 2010…\n\nprint(movie_modified)\n\n# A tibble: 3,310 × 10\n   release_date movie           production_budget domestic_gross worldwide_gross\n   &lt;date&gt;       &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;\n 1 2005-07-22   November                   250000         191862          191862\n 2 1998-08-28   I Married a St…            250000         203134          203134\n 3 1997-03-28   Love and Other…            250000         212285          743216\n 4 2000-07-14   Chuck&Buck                 250000        1055671         1157672\n 5 2011-10-28   Like Crazy                 250000        3395391         3728400\n 6 2003-04-11   Better Luck To…            250000        3802390         3809226\n 7 2017-04-28   Sleight                    250000        3930990         3934450\n 8 2002-06-28   Lovely and Ama…            250000        4210379         4613482\n 9 2012-08-17   Compliance                 270000         319285          830700\n10 2005-05-06   Fighting Tommy…            300000          10514           10514\n# ℹ 3,300 more rows\n# ℹ 5 more variables: distributor &lt;fct&gt;, mpaa_rating &lt;fct&gt;, genre &lt;fct&gt;,\n#   profit_ratio &lt;dbl&gt;, decade &lt;fct&gt;\n\n\n\n\n\n\nThe first one would be internet browsing. Availing data from sources like imdb, wikipedia, etc.\nLet’s say that an individual was very excited and enthusiastic about obtaining this dataset. They might have visited their nearest movie theaters every friday to get the movie names. For an enquiry to become a data set, it has to start somewhere with some variable.\nMore enthusiasm would’ve led them to call a production house and ask questions regarding the budget.\n\n\n\n\n\ndo profit margins for different genres vary across major film distributors?\nwhich genres are more profitable for each of the distributors?\nHow does the distributor “N/A” compare to the other big distributors?\nWhat is the comparison between domestic gross and international gross of the movies?\nwhat has been the trend in production budget across decades?\nwhich genre had most profit in each decade?\n\nLet’s replicate the graph now.\n\nmovie_modified %&gt;%\n  group_by(distributor, genre) %&gt;%                 \n  \n  summarise(median_profit_ratio = median(profit_ratio, na.rm = TRUE)) %&gt;%  \n  ggplot(aes(x = genre, y = median_profit_ratio)) +  \n  geom_bar(stat = \"identity\", fill = \"darkgray\") +   \n  facet_wrap(~ distributor) +                        \n  coord_flip() +                                     \n  labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"Genre\", \n    y = \"Median Profit Ratio\",\n    caption = \"Tidy Tuesday Oct 23, 2018\"\n  ) +\n  theme_minimal() +                                  \n  theme(\n    strip.text = element_text(face = \"bold\"),        \n    plot.title = element_text(face = \"bold\", size = 16)  \n  )\n\n`summarise()` has grouped output by 'distributor'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n[KINDLY NOTE: I have taken the help of chatgpt to replicate this graph as I was unable to figure it out myself.]\nThis is a bar graph!\n\n\n\n\nAll distributors have at least one genre that they make most profit from.\n‘Action’ genre is most successful in very small scale distributors named ‘N/A’.\n20th century fox has the most uniform distribution of profit margin across all genres.\n‘Drama’ seems to have the equal profitability margin across all distributors.\n‘Action’, ‘Adventure’, and ‘Horror’ generally have the done the most profit across all distributors.\n\n\n\n\nUse of delimiter in order to separate the columns.\n\n\n\nSince genres like action, adventure, and horror have uniform profits across all distributors, it is therefore more probable to make profitable movies belonging to these genres.\nBig distributors like 20th century fox and universal studios usually manage to make profits out of any of the said genre regardless of the rating.\nif one cannot get hold of these big distributors, the best way to break through would be to make action movies and sell them all across small distributors.\n\n\n\nThe company that had started out as “Comedy Spread” was doing wonders just a decade ago. Their light-hearted films and rom-com hits had audiences laughing all the way to the box office. However, times have changed now. People prefer action over drama and comedy (I can’t seem to understand why). With every passing year, their profits from action-packed blockbusters soared. It’s as if audiences crave the thrill of explosions, chases, and stunts more than ever. “Comedy Spread” finds itself at a crossroads—will they change themselves to survive in this market, or will they stick to their roots, hoping the world rekindles its love for a good laugh? Only time will tell."
  },
  {
    "objectID": "posts/Aish-day-7/index.html",
    "href": "posts/Aish-day-7/index.html",
    "title": "Day-7",
    "section": "",
    "text": "Inference for Two Independent Means\n\n“To be nobody but myself – in a world which is doing its best, night and day, to make you everybody else – means to fight the hardest battle which any human being can fight, and never stop fighting.”\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic) # Our go-to package\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(infer) # An alternative package for inference using tidy data\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(broom) # Clean test results in tibble form\nlibrary(skimr) # data inspection\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(resampledata3) # Datasets from Chihara and Hesterberg's book\n\n\nAttaching package: 'resampledata3'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n\nlibrary(openintro) # datasets\n\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:mosaic':\n\n    dotPlot\n\nThe following objects are masked from 'package:lattice':\n\n    ethanol, lsegments\n\nlibrary(gt) # for tables\n\n\nAttaching package: 'gt'\n\nThe following object is masked from 'package:openintro':\n\n    sp500\n\nlibrary(patchwork) # Arranging Plots\nlibrary(ggprism) # Interesting Categorical Axes\nlibrary(supernova) # Beginner-Friendly ANOVA Tables\n\n\ndata(\"MathAnxiety\",package = \"resampledata\")\nMathAnxiety\n\n      Age Gender     Grade AMAS RCMAS Arith\n1   137.8    Boy Secondary    9    20     6\n2   140.7    Boy Secondary   18     8     6\n3   137.9   Girl Secondary   23    26     5\n4   142.8   Girl Secondary   19    18     7\n5   135.6    Boy Secondary   23    20     1\n6   135.0   Girl Secondary   27    33     1\n7   133.6    Boy Secondary   22    23     4\n8   139.3    Boy Secondary   17    11     7\n9   131.7   Girl Secondary   28    32     2\n10  134.8    Boy Secondary   20    30     6\n11  141.3    Boy Secondary   16    10     2\n12  158.0    Boy Secondary   20     4     5\n13  155.1    Boy Secondary   21    23     2\n14  132.7    Boy Secondary   36    26     6\n15  134.1    Boy Secondary   16    24     2\n16  137.9    Boy Secondary   27    21     7\n17  132.6   Girl Secondary   28    30     2\n18  136.6   Girl Secondary   18    26     4\n19  146.7    Boy Secondary   29    18     7\n20  134.1   Girl Secondary   31    12     3\n21  135.4    Boy Secondary   21    15     8\n22  133.4    Boy Secondary   24    12     7\n23  137.6   Girl Secondary   17     8     7\n24  132.2    Boy Secondary   25    15     6\n25  141.5    Boy Secondary    9     3     3\n26  133.2    Boy Secondary   17    10     0\n27  133.6    Boy Secondary   37    30     3\n28  141.1    Boy Secondary   30    19     4\n29  143.4    Boy Secondary   21    18     4\n30  156.8    Boy Secondary   31    26     3\n31  144.4   Girl Secondary   35    21     4\n32  166.1    Boy Secondary   24    18     8\n33  144.2    Boy Secondary   21    16     2\n34  146.2   Girl Secondary   33    34     1\n35  151.2   Girl Secondary   27    14     5\n36  151.2    Boy Secondary   24    19     6\n37  143.6   Girl Secondary   20     7     3\n38  153.3    Boy Secondary    9    22     5\n39  152.6    Boy Secondary   25    23     0\n40  143.6   Girl Secondary   32    26     6\n41  151.2   Girl Secondary   19    10     1\n42  152.2    Boy Secondary   13    13     4\n43  161.5    Boy Secondary   29    30     4\n44  143.3   Girl Secondary   21    17     4\n45  151.3   Girl Secondary   23    15     2\n46  174.7    Boy Secondary   27    18     4\n47  146.2    Boy Secondary   20     4     4\n48  155.1    Boy Secondary   21    16     3\n49  149.1   Girl Secondary   20    21     4\n50  149.3   Girl Secondary   33    32     5\n51  144.5    Boy Secondary   21    32     1\n52  143.2   Girl Secondary   15    17     7\n53  150.3   Girl Secondary   25    33     1\n54  147.8    Boy Secondary   25    23     7\n55  145.0    Boy Secondary   12    14     3\n56  150.8   Girl Secondary   12    12     6\n57  145.8   Girl Secondary   28    17     4\n58  152.2    Boy Secondary   36    41     0\n59  145.6   Girl Secondary   13    13     4\n60  163.4   Girl Secondary   23    14     4\n61  158.6   Girl Secondary   25    17     3\n62  164.5    Boy Secondary   23    10     3\n63  154.3    Boy Secondary   13    16     4\n64  158.6    Boy Secondary   27    25     0\n65  159.4   Girl Secondary   16    18     5\n66  155.4    Boy Secondary   45    23     3\n67  164.3   Girl Secondary   25    23     0\n68  157.7    Boy Secondary   14    19     5\n69  162.8    Boy Secondary   25    25     4\n70  163.9    Boy Secondary   23     6     4\n71  157.3    Boy Secondary   28    15     0\n72  162.2    Boy Secondary   18     9     3\n73  162.3    Boy Secondary   17     8     5\n74  159.1   Girl Secondary   26    18     3\n75  160.6   Girl Secondary   18    15     3\n76  159.6    Boy Secondary   14     5     2\n77  162.0    Boy Secondary   14    11     6\n78  163.8    Boy Secondary   10    23     8\n79  175.9    Boy Secondary   16    18     6\n80  163.5   Girl Secondary   14    20     7\n81  169.1    Boy Secondary   11    15     7\n82  161.1    Boy Secondary   23    21     3\n83  160.0    Boy Secondary   22    23     7\n84  170.3    Boy Secondary   18    15     2\n85  162.6   Girl Secondary   15    13     5\n86  161.1    Boy Secondary   27    21     2\n87  155.9   Girl Secondary   31    23     3\n88  166.8    Boy Secondary   19     7     6\n89  178.9    Boy Secondary   20    27     5\n90  157.9    Boy Secondary   18    21     3\n91  157.7    Boy Secondary   15    11     5\n92  179.1    Boy Secondary   37    31     5\n93  160.6   Girl Secondary   14    23     8\n94  180.3    Boy Secondary   19     6     4\n95  165.5    Boy Secondary    9    27     0\n96  156.9    Boy Secondary   23    11     6\n97  132.1   Girl Secondary   21    23     7\n98  134.0    Boy Secondary   14     9     4\n99  143.1    Boy Secondary   12     8     6\n100 131.5    Boy Secondary   22     8     7\n101 135.4   Girl Secondary   25    15     4\n102 134.1    Boy Secondary   23    16     4\n103 141.2   Girl Secondary   33    29     4\n104 132.4    Boy Secondary   26    29     5\n105 132.4    Boy Secondary   24    15     8\n106 142.4    Boy Secondary   33    27     2\n107 132.7    Boy Secondary   22    15     8\n108 140.9    Boy Secondary   19    22     3\n109 142.2   Girl Secondary   25    34     4\n110 140.0    Boy Secondary   18    10     5\n111 136.3    Boy Secondary   20    28     5\n112 134.4   Girl Secondary   21     8     7\n113 136.6    Boy Secondary   29    23     6\n114 141.3   Girl Secondary   28    29     6\n115 132.3   Girl Secondary   19    14     5\n116 146.0   Girl Secondary   40    35     7\n117 138.8    Boy Secondary   16    19     5\n118 133.5   Girl Secondary   27    23     5\n119 140.6    Boy Secondary   34    22     1\n120 136.3    Boy Secondary   25    21     4\n121 136.4   Girl Secondary   28    14     5\n122 139.1    Boy Secondary   34    23     3\n123 133.3   Girl Secondary   22    20     5\n124 142.7   Girl Secondary   16    25     8\n125 152.7   Girl Secondary   14    17     6\n126 137.7   Girl Secondary   11    26     5\n127 145.5    Boy Secondary   31    24     1\n128 152.4    Boy Secondary   18     9     7\n129 158.8    Boy Secondary   30    15     2\n130 142.5    Boy Secondary   16    27     8\n131 156.7    Boy Secondary   34     1     2\n132 149.3    Boy Secondary   21    17     3\n133 144.4   Girl Secondary   27    25     6\n134 149.2    Boy Secondary   24    16     6\n135 147.9   Girl Secondary   22    16     7\n136 142.4   Girl Secondary   28    18     8\n137 153.3    Boy Secondary   23    21     5\n138 148.5    Boy Secondary   19    25     6\n139 158.7   Girl Secondary   29    28     2\n140 146.5    Boy Secondary   22    16     7\n141 142.4   Girl Secondary   28    19     2\n142 154.7    Boy Secondary   21    19     3\n143 167.4   Girl Secondary   35    25     1\n144 156.6    Boy Secondary   26    11     5\n145 155.1   Girl Secondary   21    17     7\n146 157.5   Girl Secondary   36    26     2\n147 151.1    Boy Secondary   14    10     1\n148 156.0   Girl Secondary   23    13     0\n149 155.3    Boy Secondary   20    15     1\n150 145.0   Girl Secondary   22    11     4\n151 149.6    Boy Secondary   21    22     6\n152 143.2   Girl Secondary   17    15     5\n153 152.5    Boy Secondary   18     7     8\n154 157.6    Boy Secondary   22    13     3\n155 152.9    Boy Secondary   12     1     2\n156 145.5   Girl Secondary   23     9     4\n157 163.1    Boy Secondary   22    20     1\n158 151.7    Boy Secondary   23    17     2\n159 145.2   Girl Secondary   33    32     3\n160 168.5    Boy Secondary   31    18     6\n161 148.6    Boy Secondary   22    26     5\n162 170.8    Boy Secondary   19    19     0\n163 164.1   Girl Secondary   25    26     1\n164 145.9    Boy Secondary   22    14     6\n165 148.7    Boy Secondary   12    12     5\n166 144.0   Girl Secondary   21    18     0\n167 150.6   Girl Secondary   19    17     6\n168 158.7    Boy Secondary   24     9     4\n169 157.4    Boy Secondary   18     6     7\n170 151.5    Boy Secondary   21    13     3\n171 159.5    Boy Secondary   18    13     7\n172 158.1    Boy Secondary   28    35     2\n173 173.3    Boy Secondary   20    10     7\n174 155.5    Boy Secondary   18    12     4\n175 158.2   Girl Secondary   17    15     7\n176 161.4   Girl Secondary   26    27     6\n177 162.3    Boy Secondary   27    14     3\n178 153.8    Boy Secondary   28    12     5\n179 161.0   Girl Secondary   21    16     5\n180 154.4   Girl Secondary   21    18     6\n181 163.4    Boy Secondary   15    12     6\n182 155.4   Girl Secondary   32    29     1\n183 162.2    Boy Secondary   12     8     7\n184 163.2    Boy Secondary   24    21     4\n185 160.5    Boy Secondary   12    38     4\n186 158.2    Boy Secondary   24    26     5\n187 167.0   Girl Secondary   20    19     1\n188 157.9   Girl Secondary   14    20     4\n189 156.9    Boy Secondary   19    36     5\n190 180.3   Girl Secondary   33    33     6\n191 164.5    Boy Secondary   26    22     5\n192 173.5   Girl Secondary   21    26     3\n193 159.8   Girl Secondary   18    10     7\n194 160.5    Boy Secondary   10    10     7\n195 157.2   Girl Secondary   22     4     3\n196 167.2    Boy Secondary   11     9     8\n197 187.5    Boy Secondary   26    13     0\n198 179.7    Boy Secondary   29    25     6\n199  97.1    Boy   Primary    9     9     7\n200 102.7   Girl   Primary   21    10     4\n201  96.4    Boy   Primary   26    23     1\n202  97.4    Boy   Primary   18    30     5\n203  97.4   Girl   Primary   23    25     3\n204  94.7   Girl   Primary   22    38     1\n205  93.1    Boy   Primary   16    20     4\n206 102.8    Boy   Primary   19    22     4\n207  94.8    Boy   Primary   14    17     7\n208  83.7   Girl   Primary   26    23     3\n209  92.7   Girl   Primary   10    12     3\n210 104.3    Boy   Primary   18     3     6\n211 102.3    Boy   Primary   18     5     1\n212 102.7   Girl   Primary   29    19     7\n213  95.9    Boy   Primary    9    34     1\n214  92.5   Girl   Primary   28    21     5\n215  99.2    Boy   Primary   28    30     6\n216 100.9   Girl   Primary   35    22     3\n217  91.0   Girl   Primary   17    13     4\n218 106.3    Boy   Primary   31    12     7\n219 113.5   Girl   Primary   29    20     7\n220 106.6   Girl   Primary   19    18     0\n221 111.4   Girl   Primary   10    27     7\n222 104.2   Girl   Primary   38    24     7\n223 105.0   Girl   Primary   17    15     3\n224 107.3   Girl   Primary   17    26     8\n225 100.3    Boy   Primary   36    14     7\n226 115.0    Boy   Primary   31    28     6\n227 112.9   Girl   Primary   13    15     7\n228 114.9   Girl   Primary   11    21     0\n229 118.7   Girl   Primary   20    27     5\n230 110.4   Girl   Primary   13    17     4\n231 107.0   Girl   Primary   30    27     8\n232 106.2    Boy   Primary   18    20     8\n233 112.7    Boy   Primary   27     9     7\n234 112.2    Boy   Primary   33    28     7\n235 120.8    Boy   Primary   21    21     4\n236 121.8   Girl   Primary   21     8     5\n237 115.0    Boy   Primary   21    23     7\n238 123.7   Girl   Primary   35    22     8\n239 116.9   Girl   Primary   24     9     3\n240 119.3    Boy   Primary   14    17     4\n241 125.2    Boy   Primary   20    16     3\n242 127.6    Boy   Primary   22    14     8\n243 120.0    Boy   Primary   29    29     2\n244 120.0    Boy   Primary   21    20     4\n245 127.2    Boy   Primary   25    25     7\n246 123.7   Girl   Primary   22    21     8\n247 115.0   Girl   Primary   23    14     7\n248 115.0   Girl   Primary   23    23     5\n249 125.4   Girl   Primary   21    24     7\n250 122.2    Boy   Primary   20    10     7\n251 125.3    Boy   Primary   15     7     6\n252 115.4   Girl   Primary   30    26     3\n253 128.2   Girl   Primary   26    11     7\n254 120.6    Boy   Primary   31    22     3\n255 121.4   Girl   Primary   27    28     0\n256 113.9    Boy   Primary   16    11     5\n257 117.8   Girl   Primary   23    24     4\n258 116.1   Girl   Primary   23    23     5\n259  94.0    Boy   Primary   13    15     5\n260  94.7   Girl   Primary   12    24     3\n261 101.0   Girl   Primary   11    19     5\n262 100.9   Girl   Primary   24    20     6\n263  94.9    Boy   Primary   11    15     6\n264 108.0    Boy   Primary   22     9     8\n265 109.3    Boy   Primary   33    25     7\n266 109.1   Girl   Primary   28    20     7\n267 116.1    Boy   Primary   18    15     8\n268 109.3    Boy   Primary   31    22     7\n269 112.6    Boy   Primary   26    25     5\n270 107.6    Boy   Primary   26    24     7\n271 111.1   Girl   Primary   27    23     6\n272 111.0   Girl   Primary   32    32     6\n273 105.6    Boy   Primary   29    19     8\n274 117.3   Girl   Primary   28    20     8\n275 110.7   Girl   Primary   32    31     8\n276 112.4   Girl   Primary   20    24     8\n277 106.4    Boy   Primary   26    29     8\n278 122.3    Boy   Primary   20    28     4\n279 127.1   Girl   Primary   27    27     5\n280 118.5   Girl   Primary   23     7     5\n281 126.2    Boy   Primary   22     8     8\n282 125.1    Boy   Primary   31    20     1\n283 120.4    Boy   Primary   13     5     8\n284 126.5    Boy   Primary   21    13     7\n285 125.0    Boy   Primary   15     5     4\n286 115.7    Boy   Primary   13     4     5\n287 126.1    Boy   Primary   20    13     4\n288 106.9    Boy   Primary   14    24     6\n289  97.3   Girl   Primary   27    27     5\n290  99.5    Boy   Primary   13     7     5\n291 105.9    Boy   Primary   16    15     6\n292  93.8    Boy   Primary   24    20     6\n293 106.0    Boy   Primary   19    21     4\n294 105.9   Girl   Primary   19     4     6\n295  98.0    Boy   Primary   21    26     4\n296  93.8   Girl   Primary   35    33     6\n297  95.5    Boy   Primary   17    23     6\n298  95.5    Boy   Primary   16    31     5\n299 106.1   Girl   Primary   14    19     6\n300 105.9   Girl   Primary   24    25     6\n301  96.8    Boy   Primary   18    23     6\n302  95.2   Girl   Primary   15    23     2\n303  97.3    Boy   Primary   17    22     5\n304 101.7   Girl   Primary   23    24     4\n305 101.5   Girl   Primary   31    12     3\n306 105.9   Girl   Primary   26    22     5\n307 102.7   Girl   Primary   28    17     4\n308 102.3    Boy   Primary   33    28     5\n309  96.3   Girl   Primary   28    18     5\n310  98.9    Boy   Primary   18    10     6\n311  95.9   Girl   Primary   33    23     3\n312 101.3   Girl   Primary   24    21     6\n313 100.4   Girl   Primary   22    22     6\n314 101.7    Boy   Primary   11    22     5\n315  97.9   Girl   Primary   22    31     5\n316 101.1   Girl   Primary   32    31     5\n317  95.1   Girl   Primary   29    34     5\n318 102.5   Girl   Primary   24    25     6\n319 102.1    Boy   Primary   22    22     6\n320 103.1   Girl   Primary   27    15     8\n321 105.0    Boy   Primary   11    14     8\n322 104.5    Boy   Primary   26    22     8\n323 103.6   Girl   Primary   25    18     5\n324 104.9   Girl   Primary   26    34     8\n325 102.7    Boy   Primary   22    19     5\n326 104.0    Boy   Primary   25    25     6\n327  97.7   Girl   Primary   14    14     7\n328 106.1    Boy   Primary   18    20     7\n329  96.2   Girl   Primary   13    27     7\n330  97.9    Boy   Primary   22    25     4\n331 105.4   Girl   Primary   22    22     8\n332  97.5   Girl   Primary   30    22     6\n333 101.7   Girl   Primary   14    14     7\n334 104.5    Boy   Primary   21    18     8\n335  96.3   Girl   Primary   16    14     7\n336  98.6    Boy   Primary   29    28     7\n337  98.6   Girl   Primary   38    28     6\n338 105.0    Boy   Primary   18    20     8\n339  97.9    Boy   Primary   26    22     7\n340  99.5   Girl   Primary   38    17     3\n341  98.4    Boy   Primary   30    20     5\n342 106.1    Boy   Primary   23    27     6\n343  97.7   Girl   Primary   26     3     6\n344  98.1   Girl   Primary   27    13     6\n345  95.2   Girl   Primary   17    19     4\n346  96.6   Girl   Primary   36    22     3\n347 103.7   Girl   Primary   29    23     1\n348  97.1    Boy   Primary    9     7     6\n349  99.1   Girl   Primary   22    12     3\n350 100.5    Boy   Primary    9     8     8\n351 105.8   Girl   Primary   31    29     5\n352 103.7   Girl   Primary   19     9     6\n353 101.8    Boy   Primary   19    28     6\n354 112.0    Boy   Primary   26    29     7\n355 110.1   Girl   Primary   17    25     8\n356 113.6   Girl   Primary   27    10     8\n357 118.6   Girl   Primary   24    15     4\n358 117.9   Girl   Primary   29    32     8\n359 107.5   Girl   Primary   22    20     7\n360 118.3    Boy   Primary   20    20     7\n361 112.4   Girl   Primary   28    19     8\n362 113.9    Boy   Primary   18    15     8\n363 108.5    Boy   Primary   27    28     8\n364 114.1    Boy   Primary   11     8     8\n365 115.7   Girl   Primary   18    21     6\n366 113.1   Girl   Primary   30    34     7\n367 117.2    Boy   Primary   20    21     6\n368 111.2   Girl   Primary   11     8     8\n369 118.0    Boy   Primary   24    31     8\n370 114.4   Girl   Primary   18    10     6\n371 115.5    Boy   Primary   17    16     8\n372 118.7   Girl   Primary   22    13     8\n373 115.6    Boy   Primary   31    26     8\n374 108.1   Girl   Primary   16     4     5\n375 111.3   Girl   Primary   14    15     7\n376 117.8   Girl   Primary   23    24     2\n377 112.1    Boy   Primary   11    21     7\n378 112.8   Girl   Primary   19    14     5\n379 107.2    Boy   Primary   19    10     3\n380 111.3   Girl   Primary   19    23     5\n381 106.7   Girl   Primary   29    25     8\n382 107.7   Girl   Primary   25    30     7\n383 106.5   Girl   Primary   20    15     6\n384 117.6    Boy   Primary   15    21     8\n385 115.6    Boy   Primary   13    28     8\n386 115.3   Girl   Primary   25    17     7\n387 107.7    Boy   Primary   29    24     5\n388 109.0    Boy   Primary   13     6     6\n389 117.0   Girl   Primary   20     9     8\n390 116.5    Boy   Primary   12    13     8\n391 115.2    Boy   Primary   32    28     6\n392 110.8   Girl   Primary   18    12     8\n393 116.9    Boy   Primary   23    17     6\n394 117.4   Girl   Primary   33    24     7\n395 118.3   Girl   Primary   28    14     7\n396 114.1    Boy   Primary   16    15     4\n397 112.2    Boy   Primary   17    15     7\n398 114.4    Boy   Primary   24    11     8\n399 117.6   Girl   Primary   29    28     8\n400 113.0    Boy   Primary   19    13     7\n401 110.9   Girl   Primary   31    21     6\n402 109.0   Girl   Primary   28    29     6\n403 125.9    Boy   Primary   25    25     8\n404 126.9    Boy   Primary   20    15     8\n405 124.7    Boy   Primary   15    15     7\n406 122.1   Girl   Primary   20    20     8\n407 123.4    Boy   Primary   21    28     7\n408 120.1   Girl   Primary   21    18     3\n409 124.4   Girl   Primary   25    33     8\n410 130.9    Boy   Primary   21    18     8\n411 130.1    Boy   Primary   24    12     8\n412 127.7    Boy   Primary   11    18     7\n413 126.1    Boy   Primary   29    19     5\n414 125.0    Boy   Primary   23    18     7\n415 121.7   Girl   Primary   18    11     7\n416 125.2    Boy   Primary   21    16     5\n417 126.6    Boy   Primary   27    25     3\n418 120.3    Boy   Primary   31    38     4\n419 122.1   Girl   Primary   16    27     8\n420 127.7    Boy   Primary   27    33     7\n421 118.9    Boy   Primary   11    15     8\n422 120.0   Girl   Primary   34    29     4\n423 120.0    Boy   Primary   33    25     6\n424 121.3   Girl   Primary   20    16     8\n425 135.1    Boy   Primary   12    17     1\n426 117.4   Girl   Primary   26    20     3\n427 123.3   Girl   Primary   26     6     4\n428 129.9    Boy   Primary   11    15     5\n429 126.9    Boy   Primary   19    25     5\n430 119.8    Boy   Primary   20    14     7\n431 127.9   Girl   Primary   34    19     6\n432 128.8    Boy   Primary   22    19     6\n433 119.8   Girl   Primary   12    26     7\n434 123.2   Girl   Primary   19    17     4\n435 125.1   Girl   Primary   23    11     8\n436 129.4    Boy   Primary   25    19     0\n437 124.9    Boy   Primary   21     5     8\n438 127.3   Girl   Primary   19    18     7\n439 122.0   Girl   Primary   25    14     7\n440 117.0   Girl   Primary   26    29     6\n441 128.4   Girl   Primary    9    13     8\n442 119.7   Girl   Primary   27    26     7\n443 130.9   Girl   Primary   17    20     7\n444 121.2    Boy   Primary   33    17     8\n445 115.4   Girl   Primary   14    25     2\n446 128.4   Girl   Primary   24    29     7\n447 121.0    Boy   Primary   20    18     8\n448 129.9    Boy   Primary   26    19     7\n449 130.9    Boy   Primary   22    20     8\n450 122.3   Girl   Primary   36    26     7\n451 123.5   Girl   Primary   25    17     8\n452 119.6   Girl   Primary   23    13     5\n453 118.5   Girl   Primary    9     9     8\n454 128.6    Boy   Primary   28    20     6\n455 123.1   Girl   Primary   14     7     7\n456 119.3   Girl   Primary   25    16     7\n457 128.3   Girl   Primary   19    13     7\n458 125.9    Boy   Primary   25    17     8\n459 130.8   Girl   Primary   14    20     8\n460   3.7   Girl   Primary   11     5     8\n461 125.7    Boy   Primary   22     5     6\n462 107.8   Girl   Primary   26    20     7\n463 113.4    Boy   Primary   28    25     7\n464 117.7    Boy   Primary   24     8     7\n465 115.3   Girl   Primary   20    24     7\n466 117.4   Girl   Primary   15    17     8\n467 111.2    Boy   Primary   18     9     6\n468 115.4   Girl   Primary   22    29     8\n469 110.2   Girl   Primary   29    35     6\n470 108.9    Boy   Primary   31    30     8\n471 112.1   Girl   Primary   24    29     8\n472 113.4    Boy   Primary   16    25     7\n473 107.3   Girl   Primary   29    28     6\n474 130.1   Girl   Primary    9     8     7\n475 123.7    Boy   Primary   27    19     6\n476 123.4   Girl   Primary   23    25     7\n477 130.7   Girl   Primary   26    20     8\n478 125.2   Girl   Primary   19    21     7\n479 129.5   Girl   Primary   23    21     7\n480 122.0   Girl   Primary   19    30     6\n481 126.2    Boy   Primary   29    31     3\n482 120.0    Boy   Primary   30    22     7\n483 100.9   Girl   Primary   28    26     5\n484  98.7    Boy   Primary   20     8     4\n485 102.7    Boy   Primary   24    33     5\n486  95.7   Girl   Primary   26    27     5\n487 102.5    Boy   Primary   25    20     6\n488  97.1    Boy   Primary   23    31     6\n489 103.5    Boy   Primary   30    24     5\n490  97.1    Boy   Primary   22    23     2\n491  99.3   Girl   Primary   28    32     6\n492  97.4    Boy   Primary   13    18     6\n493 101.9    Boy   Primary   26    17     3\n494  97.4    Boy   Primary   17     9     6\n495  98.7   Girl   Primary   27    26     4\n496 103.5    Boy   Primary   32    28     5\n497 104.5   Girl   Primary   25    25     6\n498 102.7    Boy   Primary   21    11     6\n499 103.1    Boy   Primary   22    22     6\n500 102.1   Girl   Primary   23    18     6\n501 101.2    Boy   Primary   22    26     5\n502 105.8   Girl   Primary   19    14     7\n503  96.0   Girl   Primary   18    19     7\n504 102.1    Boy   Primary   12    13     8\n505 106.1    Boy   Primary    4    18     5\n506 111.9    Boy   Primary   20    17     7\n507 100.1    Boy   Primary   18    16     3\n508 101.2    Boy   Primary   31    35     4\n509  95.8   Girl   Primary   27    30     6\n510  96.1   Girl   Primary   23    22     4\n511  95.8    Boy   Primary   29    29     4\n512 104.5    Boy   Primary   29    18     7\n513 100.9    Boy   Primary   15    14     7\n514  95.3    Boy   Primary   29    24     8\n515 103.3   Girl   Primary   20    16     8\n516  99.1   Girl   Primary   19    22     8\n517 102.1    Boy   Primary   19    13     5\n518 102.1    Boy   Primary   20    25     4\n519 103.2    Boy   Primary   17    21     4\n520  97.4    Boy   Primary   24    13     3\n521 101.1   Girl   Primary    9    12     4\n522 105.4    Boy   Primary   23    22     5\n523 105.4    Boy   Primary   20    25     6\n524 106.0    Boy   Primary   19    13     7\n525 105.3   Girl   Primary   16    19     3\n526 101.8    Boy   Primary   19    17     5\n527 104.3   Girl   Primary    9    28     5\n528  98.4   Girl   Primary   21    13     6\n529  96.3   Girl   Primary   29    27     3\n530  95.7    Boy   Primary    9    23     4\n531 106.0   Girl   Primary   15    27     6\n532 105.4   Girl   Primary   23    18     5\n533  99.1   Girl   Primary   19    33     2\n534 104.3   Girl   Primary   21    30     3\n535 105.4    Boy   Primary   22    12     6\n536  96.0    Boy   Primary    9    10     5\n537  96.3    Boy   Primary   24    13     4\n538 106.9    Boy   Primary   22    24     5\n539  98.0   Girl   Primary    9    10     5\n540 105.5   Girl   Primary    9    19     5\n541 117.9    Boy   Primary   18    15     8\n542 118.4   Girl   Primary   21    26     7\n543 110.7   Girl   Primary   26    17     6\n544 113.4    Boy   Primary   28    17     8\n545 110.3   Girl   Primary   31    34     1\n546 108.8    Boy   Primary   26    28     2\n547 110.7   Girl   Primary   21    27     8\n548 119.1   Girl   Primary   35    28     1\n549 107.5   Girl   Primary   26    14     4\n550 112.7   Girl   Primary   18    15     8\n551 116.2    Boy   Primary   26    24     7\n552 113.4   Girl   Primary   15    16     5\n553 108.7    Boy   Primary   19    23     1\n554 117.8   Girl   Primary   29    29     4\n555 109.6   Girl   Primary   17    18     3\n556 110.4    Boy   Primary   13     8     7\n557 111.2    Boy   Primary   24    14     5\n558 113.3    Boy   Primary   15    12     7\n559 112.7    Boy   Primary   17     6     6\n560 109.0   Girl   Primary   29    23     7\n561 110.0   Girl   Primary   16    23     6\n562 108.3    Boy   Primary   22    22     8\n563 112.9    Boy   Primary   25    13     6\n564 107.9    Boy   Primary   16    23     6\n565 110.1   Girl   Primary   25    21     6\n566 121.1    Boy   Primary   13    10     3\n567 123.2   Girl   Primary   26    30     4\n568 128.5    Boy   Primary   17    19     8\n569 124.7   Girl   Primary   23    14     5\n570 130.1    Boy   Primary   12    14     6\n571 122.0    Boy   Primary   12    16     8\n572 130.8   Girl   Primary   25    13     6\n573 122.9    Boy   Primary   13    23     6\n574 120.8    Boy   Primary   21     8     6\n575 123.2    Boy   Primary   21    19     5\n576 123.9    Boy   Primary   14    20     7\n577 128.6   Girl   Primary   19    19     7\n578 127.7    Boy   Primary   18    11     6\n579 122.9    Boy   Primary   18    10     5\n580 129.2   Girl   Primary   24    16     6\n581 120.0   Girl   Primary   16    14     6\n582 122.9   Girl   Primary   19    10     8\n583 125.7   Girl   Primary   20    26     7\n584 121.0   Girl   Primary    9    27     8\n585 123.2    Boy   Primary   20    12     8\n586 124.2    Boy   Primary   26     8     7\n587 126.5   Girl   Primary   29    37     6\n588 129.5   Girl   Primary   21    12     7\n589 126.9    Boy   Primary   26    20     3\n590 128.6    Boy   Primary   17    17     7\n591 122.3    Boy   Primary   15    13     8\n592 120.1    Boy   Primary   24    17     3\n593 128.0   Girl   Primary   34    22     6\n594 126.3   Girl   Primary   24    31     5\n595 126.2    Boy   Primary   27    11     5\n596 124.9   Girl   Primary   23     8     5\n597 125.3    Boy   Primary   27    11     5\n598 127.6   Girl   Primary   30    20     6\n599 125.6   Girl   Primary   24    31     4\n\nMathAnxiety_inspect &lt;- inspect(MathAnxiety)\nMathAnxiety_inspect$categorical\n\n# A tibble: 2 × 6\n  name   class  levels     n missing distribution                               \n  &lt;chr&gt;  &lt;chr&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                      \n1 Gender factor      2   599       0 \"Boy (53.9%), Girl (46.1%)                …\n2 Grade  factor      2   599       0 \"Primary (66.9%), Secondary (33.1%)       …\n\nMathAnxiety_inspect$quantitative\n\n# A tibble: 4 × 11\n  name  class     min    Q1 median    Q3   max   mean    sd     n missing\n* &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n1 Age   numeric   3.7  106.   121. 142.   188. 125.   22.3    599       0\n2 AMAS  integer   4     18     22   26.5   45   22.0   6.60   599       0\n3 RCMAS integer   1     14     19   25     41   19.2   7.57   599       0\n4 Arith integer   0      4      6    7      8    5.30  2.11   599       0\n\n\n\nMathAnxiety %&gt;%\n  gf_density(\n    ~ AMAS,\n    fill = ~ Gender,\n    alpha = 0.5,\n    title = \"Math Anxiety Score Densities\",\n    subtitle = \"Boys vs Girls\"\n  )\n\n\n\n\n\n\n\n##\nMathAnxiety %&gt;%\n  gf_boxplot(\n    AMAS ~ Gender,\n    fill = ~ Gender,\n    alpha = 0.5,\n    title = \"Math Anxiety Score Box Plots\",\n    subtitle = \"Boys vs Girls\"\n  ) \n\n\n\n\n\n\n\n##\nMathAnxiety %&gt;% count(Gender)\n\n  Gender   n\n1    Boy 323\n2   Girl 276\n\nMathAnxiety %&gt;% \n  group_by(Gender) %&gt;% \n  summarise(mean = mean(AMAS))\n\n# A tibble: 2 × 2\n  Gender  mean\n  &lt;fct&gt;  &lt;dbl&gt;\n1 Boy     21.2\n2 Girl    22.9\n\n\n\n\nComparing Multiple Means with ANOVA\n\nfrogs_orig &lt;- read_csv(\"../../data/frogs.csv\")\n\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): Frogspawn sample id, Temperature13, Temperature18, Temperature25\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfrogs_orig\n\n# A tibble: 60 × 4\n   `Frogspawn sample id` Temperature13 Temperature18 Temperature25\n                   &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1                     1            24            NA            NA\n 2                     2            NA            21            NA\n 3                     3            NA            NA            18\n 4                     4            26            NA            NA\n 5                     5            NA            22            NA\n 6                     6            NA            NA            14\n 7                     7            27            NA            NA\n 8                     8            NA            22            NA\n 9                     9            NA            NA            15\n10                    10            27            NA            NA\n# ℹ 50 more rows"
  },
  {
    "objectID": "posts/children-hearingloss/index.html",
    "href": "posts/children-hearingloss/index.html",
    "title": "Dataset-3: Hearing loss in children",
    "section": "",
    "text": "Let’s set up our document with libraries.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\nwe shall now import our dataset.\n\nome &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/MASS/OME.csv\")\n\nRows: 1097 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): OME, Noise\ndbl (6): rownames, ID, Age, Loud, Correct, Trials\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(ome)\n\nRows: 1,097\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ ID       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3…\n$ Age      &lt;dbl&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60, 60, 60, 60, 60, 6…\n$ OME      &lt;chr&gt; \"low\", \"low\", \"low\", \"low\", \"low\", \"low\", \"low\", \"low\", \"low\"…\n$ Loud     &lt;dbl&gt; 35, 35, 40, 40, 45, 45, 50, 50, 55, 55, 35, 35, 40, 40, 45, 4…\n$ Noise    &lt;chr&gt; \"coherent\", \"incoherent\", \"coherent\", \"incoherent\", \"coherent…\n$ Correct  &lt;dbl&gt; 1, 4, 0, 1, 2, 2, 3, 4, 3, 2, 2, 3, 1, 1, 1, 5, 4, 2, 3, 4, 4…\n$ Trials   &lt;dbl&gt; 4, 5, 3, 1, 4, 2, 3, 4, 3, 2, 4, 4, 4, 1, 2, 5, 4, 2, 3, 4, 6…\n\nprint(ome)\n\n# A tibble: 1,097 × 8\n   rownames    ID   Age OME    Loud Noise      Correct Trials\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n 1        1     1    30 low      35 coherent         1      4\n 2        2     1    30 low      35 incoherent       4      5\n 3        3     1    30 low      40 coherent         0      3\n 4        4     1    30 low      40 incoherent       1      1\n 5        5     1    30 low      45 coherent         2      4\n 6        6     1    30 low      45 incoherent       2      2\n 7        7     1    30 low      50 coherent         3      3\n 8        8     1    30 low      50 incoherent       4      4\n 9        9     1    30 low      55 coherent         3      3\n10       10     1    30 low      55 incoherent       2      2\n# ℹ 1,087 more rows\n\n\n\nskim(ome)\n\n\nData summary\n\n\nName\nome\n\n\nNumber of rows\n1097\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOME\n0\n1\n3\n4\n0\n3\n0\n\n\nNoise\n0\n1\n8\n10\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n549.00\n316.82\n1\n275\n549\n823\n1097\n▇▇▇▇▇\n\n\nID\n0\n1\n53.44\n28.05\n1\n31\n59\n75\n100\n▅▆▆▇▆\n\n\nAge\n0\n1\n28.52\n15.41\n7\n18\n30\n30\n60\n▂▃▇▁▂\n\n\nLoud\n0\n1\n45.38\n7.29\n35\n40\n45\n50\n65\n▇▅▅▅▁\n\n\nCorrect\n0\n1\n2.96\n2.09\n0\n1\n3\n4\n13\n▇▆▁▁▁\n\n\nTrials\n0\n1\n3.82\n2.20\n1\n2\n3\n5\n14\n▇▆▁▁▁\n\n\n\n\n\n\ninspect(ome)\n\n\ncategorical variables:  \n   name     class levels    n missing\n1   OME character      3 1097       0\n2 Noise character      2 1097       0\n                                   distribution\n1 low (48.7%), N/A (35.1%), high (16.2%)       \n2 coherent (50.3%), incoherent (49.7%)         \n\nquantitative variables:  \n      name   class min  Q1 median  Q3  max       mean         sd    n missing\n1 rownames numeric   1 275    549 823 1097 549.000000 316.820927 1097       0\n2       ID numeric   1  31     59  75  100  53.443938  28.045173 1097       0\n3      Age numeric   7  18     30  30   60  28.519599  15.407359 1097       0\n4     Loud numeric  35  40     45  50   65  45.378304   7.285122 1097       0\n5  Correct numeric   0   1      3   4   13   2.963537   2.090241 1097       0\n6   Trials numeric   1   2      3   5   14   3.824977   2.199949 1097       0"
  },
  {
    "objectID": "posts/children-hearingloss/index.html#hearing-loss-in-children",
    "href": "posts/children-hearingloss/index.html#hearing-loss-in-children",
    "title": "Dataset-3: Hearing loss in children",
    "section": "",
    "text": "Let’s set up our document with libraries.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\nwe shall now import our dataset.\n\nome &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/MASS/OME.csv\")\n\nRows: 1097 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): OME, Noise\ndbl (6): rownames, ID, Age, Loud, Correct, Trials\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(ome)\n\nRows: 1,097\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ ID       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3…\n$ Age      &lt;dbl&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60, 60, 60, 60, 60, 6…\n$ OME      &lt;chr&gt; \"low\", \"low\", \"low\", \"low\", \"low\", \"low\", \"low\", \"low\", \"low\"…\n$ Loud     &lt;dbl&gt; 35, 35, 40, 40, 45, 45, 50, 50, 55, 55, 35, 35, 40, 40, 45, 4…\n$ Noise    &lt;chr&gt; \"coherent\", \"incoherent\", \"coherent\", \"incoherent\", \"coherent…\n$ Correct  &lt;dbl&gt; 1, 4, 0, 1, 2, 2, 3, 4, 3, 2, 2, 3, 1, 1, 1, 5, 4, 2, 3, 4, 4…\n$ Trials   &lt;dbl&gt; 4, 5, 3, 1, 4, 2, 3, 4, 3, 2, 4, 4, 4, 1, 2, 5, 4, 2, 3, 4, 6…\n\nprint(ome)\n\n# A tibble: 1,097 × 8\n   rownames    ID   Age OME    Loud Noise      Correct Trials\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n 1        1     1    30 low      35 coherent         1      4\n 2        2     1    30 low      35 incoherent       4      5\n 3        3     1    30 low      40 coherent         0      3\n 4        4     1    30 low      40 incoherent       1      1\n 5        5     1    30 low      45 coherent         2      4\n 6        6     1    30 low      45 incoherent       2      2\n 7        7     1    30 low      50 coherent         3      3\n 8        8     1    30 low      50 incoherent       4      4\n 9        9     1    30 low      55 coherent         3      3\n10       10     1    30 low      55 incoherent       2      2\n# ℹ 1,087 more rows\n\n\n\nskim(ome)\n\n\nData summary\n\n\nName\nome\n\n\nNumber of rows\n1097\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOME\n0\n1\n3\n4\n0\n3\n0\n\n\nNoise\n0\n1\n8\n10\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n549.00\n316.82\n1\n275\n549\n823\n1097\n▇▇▇▇▇\n\n\nID\n0\n1\n53.44\n28.05\n1\n31\n59\n75\n100\n▅▆▆▇▆\n\n\nAge\n0\n1\n28.52\n15.41\n7\n18\n30\n30\n60\n▂▃▇▁▂\n\n\nLoud\n0\n1\n45.38\n7.29\n35\n40\n45\n50\n65\n▇▅▅▅▁\n\n\nCorrect\n0\n1\n2.96\n2.09\n0\n1\n3\n4\n13\n▇▆▁▁▁\n\n\nTrials\n0\n1\n3.82\n2.20\n1\n2\n3\n5\n14\n▇▆▁▁▁\n\n\n\n\n\n\ninspect(ome)\n\n\ncategorical variables:  \n   name     class levels    n missing\n1   OME character      3 1097       0\n2 Noise character      2 1097       0\n                                   distribution\n1 low (48.7%), N/A (35.1%), high (16.2%)       \n2 coherent (50.3%), incoherent (49.7%)         \n\nquantitative variables:  \n      name   class min  Q1 median  Q3  max       mean         sd    n missing\n1 rownames numeric   1 275    549 823 1097 549.000000 316.820927 1097       0\n2       ID numeric   1  31     59  75  100  53.443938  28.045173 1097       0\n3      Age numeric   7  18     30  30   60  28.519599  15.407359 1097       0\n4     Loud numeric  35  40     45  50   65  45.378304   7.285122 1097       0\n5  Correct numeric   0   1      3   4   13   2.963537   2.090241 1097       0\n6   Trials numeric   1   2      3   5   14   3.824977   2.199949 1097       0"
  },
  {
    "objectID": "posts/children-hearingloss/index.html#data-dictionary",
    "href": "posts/children-hearingloss/index.html#data-dictionary",
    "title": "Dataset-3: Hearing loss in children",
    "section": "Data Dictionary",
    "text": "Data Dictionary\n\nQualitative Variables\n\nOME (chr): Otitis Media with Effusion, i.e. fluid in the middle ear\nNoise(chr): condition of noise present during the trials.\n\n\n\nQuantitative Variables\n\nrownames (dbl): serial number of the row.\nID (dbl): ? [identifier I suppose]\nAge (dbl): age of the individual.\nLoud (dbl): loudness level.\nCorrect (dbl): number of correct responses.\nTrials (dbl): number of trials.\n\nTarget Variable -\nPredictor variable -\nNow, I will mutate some variables and turn them into factors.\n\nome_modified &lt;- ome %&gt;% \n  mutate(\n    ID = as.factor(ID),\n    OME = as.factor(OME),\n    Noise = as.factor(Noise),\n    Loud = as.factor(Loud)\n  )\n\nglimpse(ome_modified)\n\nRows: 1,097\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ ID       &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3…\n$ Age      &lt;dbl&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60, 60, 60, 60, 60, 6…\n$ OME      &lt;fct&gt; low, low, low, low, low, low, low, low, low, low, low, low, l…\n$ Loud     &lt;fct&gt; 35, 35, 40, 40, 45, 45, 50, 50, 55, 55, 35, 35, 40, 40, 45, 4…\n$ Noise    &lt;fct&gt; coherent, incoherent, coherent, incoherent, coherent, incoher…\n$ Correct  &lt;dbl&gt; 1, 4, 0, 1, 2, 2, 3, 4, 3, 2, 2, 3, 1, 1, 1, 5, 4, 2, 3, 4, 4…\n$ Trials   &lt;dbl&gt; 4, 5, 3, 1, 4, 2, 3, 4, 3, 2, 4, 4, 4, 1, 2, 5, 4, 2, 3, 4, 6…\n\nprint(ome_modified)\n\n# A tibble: 1,097 × 8\n   rownames ID      Age OME   Loud  Noise      Correct Trials\n      &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 1        30 low   35    coherent         1      4\n 2        2 1        30 low   35    incoherent       4      5\n 3        3 1        30 low   40    coherent         0      3\n 4        4 1        30 low   40    incoherent       1      1\n 5        5 1        30 low   45    coherent         2      4\n 6        6 1        30 low   45    incoherent       2      2\n 7        7 1        30 low   50    coherent         3      3\n 8        8 1        30 low   50    incoherent       4      4\n 9        9 1        30 low   55    coherent         3      3\n10       10 1        30 low   55    incoherent       2      2\n# ℹ 1,087 more rows\n\n\nGreat, now we shall move on to our questions.\n\n\nWhat research activity might have been carried out to obtain the data graphed here?\n\nLet’s say that maybe as a fun activity, hearing test might have been conducted in one of the classrooms in a school. Children were asked to raise their hands upon hearing the test signal. While many children did raise their hands, some did not. This is where the data collection began.\nin a playground, music starts to play on the loudspeaker, expecting all children to react and turn towards it. However, some of our outliers do not react to the sudden noise.\nChildren are being taught to cross the road and are asked to be aware of the honking of the cars. Again, there are some who do not react to the honks.\n\n\nThe graph is a box plot!\nI was unable to plot the graph.\n\n\n\nQuestions that the Graph seeks to answer\n\nis there any difference in the successful detection score between children with low, high and N/A incidence of OME?\nHow does the incidence of OME during childhood affect the successful detection score for noise-like and distinct test signals?\n\n\n\nWhat pre-processing of the data was required to create the chart?\nmutating variables into factors.\n\n\nInference\n\nHigh Incidence: Children with a high incidence of OME generally have higher detection scores compared to those with a low incidence.\n\n\n\nLow Incidence: The detection scores for children with a low incidence are more spread out, with a wider range of scores.\nDistinct Signal: Children with a distinct test signal tend to have higher detection scores than those with a noise-like signal. This indicates that a clearer test signal is easier to detect.\n\n\n\nNoise-Like Signal: Detection scores for noise-like signals are more variable, suggesting that distinguishing the signal from background noise is more challenging."
  },
  {
    "objectID": "posts/tips-dataset/index.html",
    "href": "posts/tips-dataset/index.html",
    "title": "Tips-data",
    "section": "",
    "text": "Tips data\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nlibrary(broom)\n\n\nmydata &lt;- read_csv(\"../../data/tip.csv\")\n\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Gender, Preferance\ndbl (1): Tip\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmydata\n\n# A tibble: 60 × 4\n   Name     Gender Preferance   Tip\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;      &lt;dbl&gt;\n 1 Aanya    Female Veg            0\n 2 Adit     Male   Veg            0\n 3 Aditi    Female Veg           20\n 4 Akash    Male   Non-veg        0\n 5 Akshita  Female Non-veg        0\n 6 Anandita Female Non-veg        0\n 7 Ananya   Female Non-veg       20\n 8 Anaya    Female Veg           35\n 9 Anhuya   Female Veg           40\n10 Ankit    Male   Non-veg        0\n# ℹ 50 more rows\n\n\n\nmydata %&gt;% \n  crosstable(Tip ~ Preferance) %&gt;% \n  as_flextable()\n\nlabelvariablePreferanceNon-vegVegTipMin / Max0 / 50.00 / 100.0Med [IQR]0 [0;20.0]0 [0;20.0]Mean (std)10.0 (12.9)12.3 (21.9)N (NA)30 (0)30 (0)\n\n\n\ntip_modified &lt;- mydata %&gt;% \n  dplyr::mutate(\n    Gender = as_factor(Gender),\n    Preferance = as_factor(Preferance)\n  )\n\nglimpse(tip_modified)\n\nRows: 60\nColumns: 4\n$ Name       &lt;chr&gt; \"Aanya\", \"Adit\", \"Aditi\", \"Akash\", \"Akshita\", \"Anandita\", \"…\n$ Gender     &lt;fct&gt; Female, Male, Female, Male, Female, Female, Female, Female,…\n$ Preferance &lt;fct&gt; Veg, Veg, Veg, Non-veg, Non-veg, Non-veg, Non-veg, Veg, Veg…\n$ Tip        &lt;dbl&gt; 0, 0, 20, 0, 0, 0, 20, 35, 40, 0, 0, 0, 0, 0, 0, 0, 20, 0, …\n\n\n\nshapiro.test(tip_modified$Tip)\n\n\n    Shapiro-Wilk normality test\n\ndata:  tip_modified$Tip\nW = 0.64864, p-value = 1.023e-10\n\n\n\nmosaic::t_test(Tip ~ Preferance, data = tip_modified) \n\n\n    Welch Two Sample t-test\n\ndata:  Tip by Preferance\nt = 0.50347, df = 46.908, p-value = 0.617\nalternative hypothesis: true difference in means between group Veg and group Non-veg is not equal to 0\n95 percent confidence interval:\n -6.990632 11.657299\nsample estimates:\n    mean in group Veg mean in group Non-veg \n             12.33333              10.00000 \n\n\n\nwilcox.test(Tip ~ Preferance, data = tip_modified) %&gt;%  \n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\n# A tibble: 1 × 4\n  statistic p.value method                                           alternative\n      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                                            &lt;chr&gt;      \n1       437   0.833 Wilcoxon rank sum test with continuity correcti… two.sided  \n\n\n\ntips_permute &lt;-\n  do(4999) * diffmean(data=tip_modified, Tip~shuffle(Preferance))\ntips_permute\n\n        diffmean\n1      0.6666667\n2      4.6666667\n3     -5.6666667\n4      3.3333333\n5     -0.3333333\n6     -1.0000000\n7      1.6666667\n8     -2.6666667\n9      3.0000000\n10     5.6666667\n11    -2.6666667\n12    -2.0000000\n13     9.3333333\n14     1.3333333\n15    -0.3333333\n16    -4.0000000\n17    -4.3333333\n18    -4.0000000\n19    -1.6666667\n20     4.6666667\n21     5.3333333\n22    -4.3333333\n23    -4.6666667\n24    -5.0000000\n25     4.3333333\n26    -2.6666667\n27    -5.0000000\n28     2.6666667\n29     1.3333333\n30    -1.0000000\n31     2.0000000\n32    -0.6666667\n33     0.6666667\n34     1.3333333\n35    -6.3333333\n36    -2.0000000\n37     0.3333333\n38    -5.6666667\n39     3.3333333\n40    -4.3333333\n41     1.3333333\n42    -5.3333333\n43    -1.3333333\n44     0.3333333\n45     2.0000000\n46   -10.3333333\n47    -6.3333333\n48     0.3333333\n49     8.0000000\n50    -9.3333333\n51     3.3333333\n52    -0.3333333\n53    11.3333333\n54    -2.0000000\n55    -0.3333333\n56     2.3333333\n57     0.0000000\n58     6.0000000\n59     2.0000000\n60    -1.6666667\n61     3.6666667\n62    -4.0000000\n63    -3.0000000\n64     6.3333333\n65     5.3333333\n66     2.0000000\n67    -4.3333333\n68    -9.0000000\n69     6.0000000\n70     3.6666667\n71     1.6666667\n72     0.6666667\n73    -3.0000000\n74     1.6666667\n75     6.3333333\n76    -5.0000000\n77    -1.6666667\n78     0.3333333\n79     3.3333333\n80     2.6666667\n81     9.0000000\n82    -1.0000000\n83    -5.6666667\n84     2.6666667\n85    -8.0000000\n86     6.3333333\n87     2.3333333\n88    -5.3333333\n89     0.6666667\n90     5.0000000\n91    -4.0000000\n92     7.3333333\n93    -3.6666667\n94    -3.3333333\n95    -2.3333333\n96     0.6666667\n97    -4.3333333\n98    -5.3333333\n99    -2.3333333\n100   -1.0000000\n101    0.3333333\n102    7.0000000\n103    5.3333333\n104   -1.3333333\n105   -7.3333333\n106   -0.6666667\n107   -1.6666667\n108   -1.3333333\n109   -4.6666667\n110   -6.3333333\n111   -1.6666667\n112   -1.3333333\n113   -7.6666667\n114    3.6666667\n115   -2.6666667\n116    1.0000000\n117   -1.0000000\n118   -9.6666667\n119    4.3333333\n120    1.0000000\n121    1.0000000\n122    1.6666667\n123    3.3333333\n124    2.3333333\n125   -7.3333333\n126   -4.0000000\n127    6.3333333\n128   -6.6666667\n129   -1.6666667\n130   -9.6666667\n131   -6.0000000\n132   -1.6666667\n133   -1.3333333\n134    0.0000000\n135   -9.6666667\n136   -5.0000000\n137    2.3333333\n138   -7.6666667\n139    3.6666667\n140    4.0000000\n141    1.6666667\n142    0.6666667\n143   -1.0000000\n144    1.6666667\n145    7.0000000\n146    1.6666667\n147   -5.6666667\n148    2.6666667\n149   -1.3333333\n150    2.6666667\n151   -1.0000000\n152    3.6666667\n153   -8.3333333\n154   -2.6666667\n155    4.6666667\n156    3.6666667\n157   -0.3333333\n158   -1.0000000\n159    1.3333333\n160    5.0000000\n161   -4.3333333\n162    5.3333333\n163   -6.6666667\n164   -5.6666667\n165    5.3333333\n166   -2.3333333\n167    1.0000000\n168   -3.3333333\n169    4.3333333\n170    2.6666667\n171   -3.3333333\n172   -5.6666667\n173   -5.0000000\n174   -2.6666667\n175   -2.0000000\n176   -8.3333333\n177    4.0000000\n178    2.6666667\n179   -0.3333333\n180   -5.6666667\n181   -4.3333333\n182   -4.0000000\n183   -2.0000000\n184   -4.3333333\n185   10.0000000\n186   -2.0000000\n187    4.6666667\n188    8.6666667\n189    8.6666667\n190    1.6666667\n191   -0.6666667\n192    1.3333333\n193    1.6666667\n194   -3.3333333\n195    0.3333333\n196   -3.0000000\n197    4.6666667\n198   -5.6666667\n199    9.6666667\n200    1.6666667\n201    4.6666667\n202   -5.0000000\n203    4.3333333\n204   -2.6666667\n205    5.0000000\n206   -6.3333333\n207    2.6666667\n208   -5.0000000\n209    1.6666667\n210    0.6666667\n211    1.6666667\n212   -1.0000000\n213   -0.6666667\n214   -6.0000000\n215    8.3333333\n216   -8.3333333\n217    5.3333333\n218    0.6666667\n219   -2.6666667\n220   -3.3333333\n221   -4.0000000\n222   -4.3333333\n223    7.0000000\n224   -1.3333333\n225    0.6666667\n226   -0.3333333\n227    4.3333333\n228   -0.3333333\n229    4.0000000\n230   -4.3333333\n231   -1.6666667\n232   -4.0000000\n233   -3.6666667\n234    0.6666667\n235   -3.3333333\n236    1.3333333\n237    1.0000000\n238   13.3333333\n239    4.6666667\n240    4.3333333\n241   -1.6666667\n242   -6.0000000\n243   -3.0000000\n244    8.0000000\n245    0.0000000\n246    7.3333333\n247   -1.0000000\n248    2.3333333\n249    9.0000000\n250    3.6666667\n251    4.0000000\n252    3.3333333\n253    3.3333333\n254   -0.3333333\n255    5.0000000\n256   -5.0000000\n257    5.0000000\n258   -0.6666667\n259    3.6666667\n260   -1.3333333\n261    3.3333333\n262   -4.6666667\n263   -1.3333333\n264    3.0000000\n265   -5.6666667\n266   -2.6666667\n267    6.0000000\n268    1.0000000\n269   -1.3333333\n270    1.6666667\n271    1.3333333\n272   -4.3333333\n273    1.6666667\n274  -10.0000000\n275    2.0000000\n276   -3.6666667\n277    0.6666667\n278   -6.0000000\n279   -0.3333333\n280   -0.3333333\n281    1.6666667\n282    3.6666667\n283    1.6666667\n284   -0.3333333\n285   -2.3333333\n286   -2.3333333\n287    5.3333333\n288   -0.3333333\n289    3.6666667\n290    6.3333333\n291   -4.3333333\n292    2.0000000\n293    0.6666667\n294    8.6666667\n295    1.0000000\n296    2.6666667\n297    1.0000000\n298   -4.3333333\n299   -0.6666667\n300    0.3333333\n301    2.0000000\n302   -9.0000000\n303    7.6666667\n304   -3.6666667\n305    2.0000000\n306   -3.0000000\n307   -0.6666667\n308   -8.6666667\n309   -2.6666667\n310    4.6666667\n311   -1.3333333\n312    0.6666667\n313   -6.0000000\n314   -3.0000000\n315    6.0000000\n316   -6.0000000\n317   -3.3333333\n318    3.3333333\n319   -4.0000000\n320   -5.3333333\n321    2.6666667\n322   -2.6666667\n323    2.3333333\n324    8.3333333\n325    3.0000000\n326   -9.6666667\n327   -5.0000000\n328    2.6666667\n329    2.3333333\n330    8.3333333\n331    8.6666667\n332   -2.6666667\n333    2.3333333\n334   -4.3333333\n335   -1.0000000\n336   -0.6666667\n337    4.6666667\n338    2.6666667\n339   -6.0000000\n340    1.0000000\n341   -4.3333333\n342    5.3333333\n343   -5.3333333\n344   -7.0000000\n345   -7.6666667\n346   -8.0000000\n347    7.0000000\n348    4.0000000\n349  -11.0000000\n350   -1.3333333\n351    5.6666667\n352    1.3333333\n353    7.0000000\n354    3.3333333\n355   -4.0000000\n356    4.3333333\n357   -1.0000000\n358   -0.6666667\n359    5.0000000\n360   -5.0000000\n361    2.6666667\n362   -6.3333333\n363  -12.0000000\n364    5.0000000\n365    0.3333333\n366   -2.3333333\n367   -4.0000000\n368    1.0000000\n369   -1.0000000\n370    5.0000000\n371   -4.3333333\n372    6.3333333\n373   -8.0000000\n374   10.3333333\n375   -4.3333333\n376    5.0000000\n377   -2.0000000\n378   -4.3333333\n379   -1.0000000\n380   -0.6666667\n381   11.0000000\n382   -3.0000000\n383   -1.3333333\n384    4.6666667\n385   -5.6666667\n386   -8.3333333\n387    3.6666667\n388   -2.0000000\n389    4.6666667\n390    1.3333333\n391   -5.3333333\n392   -7.6666667\n393    3.3333333\n394    5.0000000\n395   -4.6666667\n396    5.0000000\n397    4.6666667\n398   -5.0000000\n399    0.3333333\n400    6.3333333\n401    1.3333333\n402   -6.3333333\n403    6.3333333\n404    2.3333333\n405    2.3333333\n406   -3.6666667\n407   -2.6666667\n408    0.6666667\n409   -6.3333333\n410    3.3333333\n411  -10.6666667\n412    7.3333333\n413    1.0000000\n414    2.6666667\n415    1.6666667\n416   -4.6666667\n417   -1.6666667\n418    0.6666667\n419   -4.6666667\n420    6.3333333\n421    0.0000000\n422   10.0000000\n423    2.3333333\n424   -5.0000000\n425   -5.3333333\n426    1.3333333\n427   -1.6666667\n428   -5.0000000\n429   -3.6666667\n430    2.6666667\n431   -2.6666667\n432    6.3333333\n433   -6.0000000\n434    6.3333333\n435    5.0000000\n436  -11.6666667\n437   -4.6666667\n438    2.0000000\n439    3.6666667\n440   -7.0000000\n441    1.0000000\n442   -2.6666667\n443   -5.3333333\n444    1.0000000\n445    4.3333333\n446    5.6666667\n447    4.3333333\n448   -1.6666667\n449    3.6666667\n450    9.6666667\n451    2.0000000\n452   -5.0000000\n453   -8.3333333\n454    1.3333333\n455    0.0000000\n456    2.6666667\n457    5.0000000\n458    6.0000000\n459    7.6666667\n460    3.0000000\n461    0.6666667\n462    1.0000000\n463   -0.6666667\n464   -3.3333333\n465   -3.0000000\n466    4.0000000\n467    2.6666667\n468    2.6666667\n469   -5.6666667\n470    2.6666667\n471   -4.0000000\n472    3.3333333\n473    0.6666667\n474    2.3333333\n475   -4.0000000\n476    4.3333333\n477    2.0000000\n478   -2.3333333\n479    2.6666667\n480    3.0000000\n481    0.3333333\n482   -1.6666667\n483    2.3333333\n484   -0.6666667\n485    3.3333333\n486   -5.3333333\n487   -5.0000000\n488   -4.3333333\n489    4.6666667\n490   -0.3333333\n491    5.6666667\n492   -4.3333333\n493   -0.3333333\n494   -3.3333333\n495    0.0000000\n496   -3.3333333\n497   -0.6666667\n498   -4.6666667\n499   -4.0000000\n500   -3.3333333\n501    4.0000000\n502   -3.3333333\n503    6.0000000\n504   -1.0000000\n505    4.0000000\n506    8.3333333\n507    4.0000000\n508   -7.6666667\n509   -2.3333333\n510   -3.3333333\n511    3.0000000\n512   -5.6666667\n513    0.3333333\n514   -3.3333333\n515    7.0000000\n516   -7.0000000\n517   -1.6666667\n518    8.3333333\n519   -1.0000000\n520    3.3333333\n521   -2.6666667\n522    1.0000000\n523   -8.6666667\n524   -5.3333333\n525    5.0000000\n526    2.0000000\n527    2.6666667\n528   -4.3333333\n529   -6.6666667\n530    0.3333333\n531    4.6666667\n532    0.0000000\n533   -9.0000000\n534    4.6666667\n535   -5.0000000\n536   -3.6666667\n537    2.3333333\n538    0.6666667\n539  -10.0000000\n540   -1.3333333\n541    0.3333333\n542    8.3333333\n543   -5.0000000\n544   -1.6666667\n545    1.3333333\n546   -0.3333333\n547    2.6666667\n548    0.6666667\n549    7.3333333\n550    0.0000000\n551   -2.6666667\n552    3.3333333\n553   -7.3333333\n554   -4.0000000\n555    0.3333333\n556   -2.0000000\n557    2.3333333\n558   -2.0000000\n559    7.3333333\n560    2.6666667\n561   -3.6666667\n562    3.6666667\n563    6.3333333\n564   -0.6666667\n565   -1.3333333\n566    8.6666667\n567    4.6666667\n568   -6.3333333\n569   -4.0000000\n570   -6.0000000\n571   -5.3333333\n572   -2.3333333\n573    1.3333333\n574   10.0000000\n575    3.0000000\n576   -1.3333333\n577    4.3333333\n578    3.6666667\n579   -5.6666667\n580    4.3333333\n581   -2.6666667\n582    0.0000000\n583   -7.0000000\n584    4.3333333\n585    2.3333333\n586   -5.3333333\n587    6.3333333\n588   -3.0000000\n589    5.6666667\n590   -3.6666667\n591   -0.3333333\n592    0.6666667\n593   -3.6666667\n594    5.0000000\n595    6.3333333\n596    0.3333333\n597    2.0000000\n598   -3.0000000\n599    2.3333333\n600   -9.0000000\n601    5.6666667\n602    1.6666667\n603    2.3333333\n604    1.6666667\n605   -3.6666667\n606   -4.6666667\n607    2.3333333\n608   11.0000000\n609    0.6666667\n610   -6.0000000\n611    4.6666667\n612    8.3333333\n613   -5.0000000\n614    2.6666667\n615   -8.0000000\n616    9.6666667\n617   -4.3333333\n618    1.3333333\n619    3.6666667\n620   -0.6666667\n621    3.3333333\n622   -0.6666667\n623    3.3333333\n624   -7.3333333\n625   -3.0000000\n626   -3.3333333\n627    0.3333333\n628    1.3333333\n629   -3.0000000\n630    8.3333333\n631   -9.3333333\n632    3.3333333\n633   -3.6666667\n634   -6.0000000\n635    9.0000000\n636    0.3333333\n637   -3.3333333\n638    6.3333333\n639  -11.3333333\n640    6.0000000\n641    6.3333333\n642    5.3333333\n643    2.0000000\n644    7.0000000\n645    8.0000000\n646   -5.0000000\n647    4.6666667\n648    6.0000000\n649   -4.0000000\n650   -4.3333333\n651   -4.3333333\n652   -4.0000000\n653    0.3333333\n654   -1.3333333\n655    8.3333333\n656   -2.0000000\n657   -1.6666667\n658    2.0000000\n659   13.3333333\n660   -2.3333333\n661   -4.0000000\n662    9.0000000\n663    7.3333333\n664    5.3333333\n665   -4.6666667\n666    6.3333333\n667   -4.0000000\n668    3.3333333\n669    3.6666667\n670   -7.6666667\n671    7.0000000\n672   -3.3333333\n673    2.6666667\n674    3.6666667\n675    3.3333333\n676    4.3333333\n677    5.3333333\n678   -8.3333333\n679    6.3333333\n680   -4.6666667\n681    6.0000000\n682    4.3333333\n683   -7.3333333\n684    0.6666667\n685   -5.3333333\n686    3.3333333\n687    6.6666667\n688   -4.3333333\n689   -2.3333333\n690    3.6666667\n691    2.0000000\n692   -0.3333333\n693    5.6666667\n694   10.6666667\n695    0.0000000\n696   -5.3333333\n697   -4.6666667\n698   -3.0000000\n699    1.3333333\n700    3.0000000\n701   -2.0000000\n702    2.6666667\n703   -2.3333333\n704   -3.6666667\n705    0.6666667\n706   -5.0000000\n707   -3.6666667\n708   -1.0000000\n709   -2.0000000\n710    0.6666667\n711    6.0000000\n712    3.3333333\n713   -4.3333333\n714    2.6666667\n715   -2.0000000\n716    5.6666667\n717    4.0000000\n718    3.0000000\n719   -5.0000000\n720    1.6666667\n721   -2.6666667\n722    4.6666667\n723   -6.3333333\n724   -0.3333333\n725    6.6666667\n726   -4.0000000\n727   -4.0000000\n728    5.0000000\n729   -3.3333333\n730    2.0000000\n731    1.6666667\n732   -1.3333333\n733   -4.0000000\n734   -7.0000000\n735    3.3333333\n736    5.3333333\n737  -10.6666667\n738    1.6666667\n739    6.3333333\n740    0.6666667\n741    0.3333333\n742   -0.3333333\n743    1.0000000\n744    8.0000000\n745    4.0000000\n746    3.6666667\n747   -3.6666667\n748    2.0000000\n749    5.0000000\n750   -5.6666667\n751   -0.6666667\n752   -1.0000000\n753    3.6666667\n754    4.6666667\n755    6.6666667\n756    9.0000000\n757    1.3333333\n758   -3.0000000\n759    6.0000000\n760   -4.0000000\n761   -7.0000000\n762   -3.6666667\n763   -5.3333333\n764   -1.3333333\n765    2.0000000\n766    1.6666667\n767   -7.3333333\n768    0.6666667\n769   -2.0000000\n770    4.0000000\n771    5.3333333\n772   -1.0000000\n773   -4.3333333\n774    1.0000000\n775    3.6666667\n776   -1.0000000\n777    0.0000000\n778    2.0000000\n779   -1.0000000\n780   -5.6666667\n781    4.0000000\n782    1.3333333\n783    5.0000000\n784    5.0000000\n785    2.0000000\n786   -1.0000000\n787   -4.0000000\n788   -0.3333333\n789  -10.0000000\n790    2.3333333\n791    4.3333333\n792    3.6666667\n793    2.0000000\n794    3.0000000\n795    2.6666667\n796   -4.6666667\n797   -1.6666667\n798    6.3333333\n799    0.6666667\n800   -2.3333333\n801   -1.0000000\n802   -2.0000000\n803   -0.6666667\n804    2.3333333\n805   -0.6666667\n806    2.3333333\n807   -6.0000000\n808    0.6666667\n809   -2.3333333\n810    3.3333333\n811    9.0000000\n812   -5.6666667\n813    0.6666667\n814   -5.0000000\n815   -4.6666667\n816    3.0000000\n817    5.0000000\n818   -1.3333333\n819    0.3333333\n820   -4.6666667\n821    0.0000000\n822    0.3333333\n823   -3.3333333\n824    2.3333333\n825    2.0000000\n826   -0.6666667\n827   -7.6666667\n828    4.6666667\n829    1.6666667\n830    2.3333333\n831    5.6666667\n832   -5.6666667\n833   -5.6666667\n834   -3.3333333\n835   -5.3333333\n836   -2.0000000\n837    0.0000000\n838   -3.3333333\n839   -2.0000000\n840    7.0000000\n841    6.6666667\n842   -0.6666667\n843    0.6666667\n844   -3.3333333\n845   -2.0000000\n846   -4.3333333\n847    3.0000000\n848   -6.0000000\n849   -2.6666667\n850   -1.6666667\n851    0.0000000\n852    2.0000000\n853    4.0000000\n854    6.6666667\n855    2.0000000\n856   -3.6666667\n857    1.6666667\n858   -4.0000000\n859   -5.0000000\n860    3.0000000\n861   -5.0000000\n862   -2.6666667\n863    3.3333333\n864    3.6666667\n865    3.6666667\n866   -7.3333333\n867    2.3333333\n868   -2.6666667\n869   -1.6666667\n870    0.3333333\n871    0.0000000\n872    2.6666667\n873   -5.3333333\n874   -3.3333333\n875    5.6666667\n876   -6.0000000\n877   -0.3333333\n878   -5.3333333\n879   -2.0000000\n880    3.6666667\n881   -8.0000000\n882   -3.3333333\n883    6.0000000\n884    2.3333333\n885   -6.0000000\n886   -1.0000000\n887    0.6666667\n888    0.6666667\n889    1.0000000\n890    4.6666667\n891   -3.6666667\n892   -2.3333333\n893    4.3333333\n894    4.0000000\n895   -4.3333333\n896    5.3333333\n897    0.6666667\n898   -2.6666667\n899   -0.3333333\n900   -7.6666667\n901   -6.0000000\n902   -3.0000000\n903   -7.3333333\n904    0.3333333\n905   -6.6666667\n906    0.6666667\n907   -0.6666667\n908    3.6666667\n909    4.6666667\n910   -1.6666667\n911    4.0000000\n912   -2.0000000\n913   -3.6666667\n914   -3.0000000\n915   -9.0000000\n916    1.3333333\n917    6.6666667\n918   -2.6666667\n919   -2.0000000\n920    4.0000000\n921    0.3333333\n922   -5.6666667\n923   -5.3333333\n924    4.3333333\n925   -3.6666667\n926   -1.0000000\n927   -3.0000000\n928   -3.0000000\n929   -3.0000000\n930   -5.6666667\n931   -2.0000000\n932    2.6666667\n933    2.0000000\n934    1.6666667\n935    2.3333333\n936    3.0000000\n937    6.0000000\n938    2.0000000\n939    5.0000000\n940   -9.0000000\n941    4.0000000\n942    7.6666667\n943   -2.0000000\n944   -4.6666667\n945   -1.6666667\n946    9.6666667\n947    1.6666667\n948   -1.6666667\n949    0.3333333\n950   -8.0000000\n951   -7.3333333\n952   -3.3333333\n953    1.6666667\n954    3.6666667\n955   -8.3333333\n956   -0.6666667\n957    6.0000000\n958   -7.0000000\n959    1.6666667\n960   -2.0000000\n961    0.0000000\n962   -6.6666667\n963   -1.6666667\n964    7.0000000\n965   -6.0000000\n966    3.6666667\n967    0.6666667\n968   -1.0000000\n969    0.6666667\n970   -1.3333333\n971    3.6666667\n972   -6.6666667\n973    6.3333333\n974   -1.3333333\n975   -5.3333333\n976   -6.3333333\n977   -3.3333333\n978    0.6666667\n979   -1.0000000\n980    3.6666667\n981    6.3333333\n982   -0.3333333\n983    7.6666667\n984    5.3333333\n985    9.0000000\n986   -7.3333333\n987    1.0000000\n988    1.6666667\n989   -4.6666667\n990    1.3333333\n991    0.0000000\n992   -4.0000000\n993    1.3333333\n994   -2.6666667\n995    8.6666667\n996   -7.3333333\n997    1.0000000\n998   -2.3333333\n999   -6.3333333\n1000  -3.6666667\n1001   7.6666667\n1002   2.6666667\n1003   3.0000000\n1004  -1.3333333\n1005   1.6666667\n1006  -1.3333333\n1007  -0.6666667\n1008   4.3333333\n1009  -2.0000000\n1010   0.3333333\n1011  -1.6666667\n1012  -0.3333333\n1013   0.6666667\n1014   6.0000000\n1015  -4.6666667\n1016  -3.3333333\n1017   0.6666667\n1018  -1.0000000\n1019  -3.0000000\n1020   0.6666667\n1021   3.0000000\n1022   1.3333333\n1023  -2.6666667\n1024  -0.6666667\n1025   8.3333333\n1026  -6.0000000\n1027  -3.0000000\n1028   6.6666667\n1029   5.3333333\n1030  -4.3333333\n1031  -7.3333333\n1032   3.0000000\n1033   1.3333333\n1034  -3.0000000\n1035  -5.6666667\n1036  -6.6666667\n1037   7.0000000\n1038  -4.0000000\n1039  -2.0000000\n1040   0.3333333\n1041   2.6666667\n1042  -7.6666667\n1043   8.3333333\n1044   0.6666667\n1045  -1.0000000\n1046  -0.3333333\n1047  -4.3333333\n1048   4.0000000\n1049  -0.6666667\n1050   0.6666667\n1051  -1.3333333\n1052   0.0000000\n1053  -0.3333333\n1054  -5.0000000\n1055  -2.0000000\n1056  -8.6666667\n1057  -2.0000000\n1058   0.3333333\n1059  -5.3333333\n1060  -5.6666667\n1061 -10.6666667\n1062   4.0000000\n1063   6.3333333\n1064  -2.3333333\n1065   4.3333333\n1066  -2.6666667\n1067  -2.0000000\n1068  -9.0000000\n1069 -10.0000000\n1070   0.0000000\n1071  -9.3333333\n1072   1.6666667\n1073   6.6666667\n1074   1.0000000\n1075  -1.3333333\n1076   5.3333333\n1077  -3.3333333\n1078  -2.0000000\n1079  -4.3333333\n1080   3.3333333\n1081  -1.0000000\n1082  -0.6666667\n1083  -3.3333333\n1084  -4.6666667\n1085  -0.6666667\n1086  -3.0000000\n1087  -3.0000000\n1088   7.0000000\n1089  -1.6666667\n1090  -0.3333333\n1091   1.3333333\n1092   4.0000000\n1093   0.3333333\n1094  -1.6666667\n1095  -5.0000000\n1096  -3.6666667\n1097   2.0000000\n1098  -2.6666667\n1099  -5.0000000\n1100   4.0000000\n1101   0.3333333\n1102   5.3333333\n1103   2.0000000\n1104   4.0000000\n1105   2.3333333\n1106   2.6666667\n1107   1.0000000\n1108  -5.6666667\n1109  -1.6666667\n1110  -5.6666667\n1111  -5.3333333\n1112   2.0000000\n1113   1.6666667\n1114   5.0000000\n1115  -3.3333333\n1116  -2.3333333\n1117   1.6666667\n1118   1.6666667\n1119   2.3333333\n1120  -1.6666667\n1121   5.3333333\n1122  -1.0000000\n1123   0.6666667\n1124   6.6666667\n1125   0.6666667\n1126  -0.6666667\n1127   8.3333333\n1128   5.3333333\n1129   6.6666667\n1130   4.3333333\n1131   2.0000000\n1132  -2.3333333\n1133   4.0000000\n1134  -6.0000000\n1135  -7.3333333\n1136   3.3333333\n1137  -5.6666667\n1138  -2.6666667\n1139  -7.0000000\n1140   1.6666667\n1141  -2.3333333\n1142   2.3333333\n1143  -4.0000000\n1144   1.6666667\n1145   1.3333333\n1146   8.3333333\n1147   5.0000000\n1148   2.6666667\n1149   6.3333333\n1150   1.6666667\n1151   1.0000000\n1152   6.3333333\n1153  -3.3333333\n1154  -3.0000000\n1155   1.3333333\n1156  -0.6666667\n1157   2.6666667\n1158   1.3333333\n1159   0.0000000\n1160  -1.0000000\n1161  -2.0000000\n1162   6.3333333\n1163  -1.3333333\n1164  -0.6666667\n1165   2.3333333\n1166  -5.0000000\n1167   1.6666667\n1168   1.0000000\n1169  -7.6666667\n1170  -1.0000000\n1171  -7.3333333\n1172  -5.0000000\n1173  -4.0000000\n1174  -2.6666667\n1175  -0.3333333\n1176  -0.3333333\n1177  -0.3333333\n1178  -4.6666667\n1179   6.6666667\n1180   4.3333333\n1181  -6.3333333\n1182  -0.3333333\n1183   1.6666667\n1184   6.0000000\n1185  -4.6666667\n1186   5.0000000\n1187   7.6666667\n1188   3.0000000\n1189   4.6666667\n1190   0.3333333\n1191  -9.6666667\n1192  -2.0000000\n1193   3.3333333\n1194  -4.6666667\n1195  -2.3333333\n1196  -1.3333333\n1197   3.0000000\n1198  -2.6666667\n1199   4.3333333\n1200   4.6666667\n1201  -5.6666667\n1202  -2.6666667\n1203   3.6666667\n1204  -1.0000000\n1205  -3.3333333\n1206   2.0000000\n1207  -0.6666667\n1208  -2.3333333\n1209   1.0000000\n1210  -3.6666667\n1211  -5.3333333\n1212  -1.3333333\n1213   2.3333333\n1214   6.6666667\n1215  -6.3333333\n1216   1.0000000\n1217  -1.3333333\n1218   1.6666667\n1219   0.6666667\n1220   4.3333333\n1221   4.0000000\n1222  10.0000000\n1223  -3.6666667\n1224  -2.0000000\n1225   1.6666667\n1226   4.6666667\n1227  -0.3333333\n1228  -0.6666667\n1229  -3.3333333\n1230  -2.3333333\n1231  -1.6666667\n1232   2.3333333\n1233  10.3333333\n1234  -2.6666667\n1235  -2.6666667\n1236  -8.6666667\n1237   8.0000000\n1238   8.3333333\n1239  -0.6666667\n1240   0.3333333\n1241   2.6666667\n1242   1.6666667\n1243  -6.3333333\n1244  -2.0000000\n1245   2.3333333\n1246   9.0000000\n1247  -0.6666667\n1248   4.0000000\n1249  -2.0000000\n1250  -3.3333333\n1251   2.3333333\n1252   2.3333333\n1253   4.0000000\n1254  -9.3333333\n1255   6.3333333\n1256   0.6666667\n1257   2.6666667\n1258  -3.0000000\n1259   7.3333333\n1260  -2.0000000\n1261  -3.6666667\n1262   2.3333333\n1263   2.0000000\n1264  -5.6666667\n1265  -3.3333333\n1266   1.6666667\n1267  -4.3333333\n1268   7.6666667\n1269   6.0000000\n1270   2.3333333\n1271  -2.6666667\n1272  -6.0000000\n1273  -2.6666667\n1274   5.6666667\n1275  -4.6666667\n1276   0.6666667\n1277 -13.6666667\n1278  -1.0000000\n1279  10.3333333\n1280   2.0000000\n1281  -2.3333333\n1282  -4.0000000\n1283   9.6666667\n1284  -2.3333333\n1285  -3.0000000\n1286  -4.0000000\n1287   1.3333333\n1288   6.6666667\n1289   1.3333333\n1290   8.0000000\n1291   6.0000000\n1292   4.3333333\n1293  -3.0000000\n1294   5.0000000\n1295  -5.0000000\n1296  -5.0000000\n1297  -1.3333333\n1298   2.6666667\n1299  -9.6666667\n1300   3.3333333\n1301   7.6666667\n1302  -2.6666667\n1303   5.6666667\n1304   1.6666667\n1305  -2.0000000\n1306  -0.3333333\n1307   3.6666667\n1308  -4.3333333\n1309  -3.3333333\n1310  -4.0000000\n1311   5.0000000\n1312   1.6666667\n1313   0.6666667\n1314  -1.3333333\n1315   1.3333333\n1316  -0.6666667\n1317  -1.3333333\n1318  -8.0000000\n1319  -1.3333333\n1320  -0.6666667\n1321  -7.3333333\n1322  -9.0000000\n1323  -2.6666667\n1324  -1.0000000\n1325  -1.0000000\n1326  -1.3333333\n1327   1.0000000\n1328  -3.6666667\n1329  -3.6666667\n1330   5.3333333\n1331  -4.6666667\n1332  -1.0000000\n1333 -12.0000000\n1334   0.6666667\n1335   0.3333333\n1336  -6.6666667\n1337   2.6666667\n1338   6.3333333\n1339   6.6666667\n1340  -3.3333333\n1341   0.0000000\n1342   5.0000000\n1343   3.0000000\n1344   4.0000000\n1345  -3.0000000\n1346  -8.0000000\n1347  -1.6666667\n1348  -5.6666667\n1349  -5.6666667\n1350  -3.6666667\n1351  -4.0000000\n1352  -0.3333333\n1353   5.0000000\n1354  -0.3333333\n1355   0.6666667\n1356  -7.0000000\n1357   0.3333333\n1358  -2.3333333\n1359   4.3333333\n1360   6.0000000\n1361  -4.3333333\n1362   2.0000000\n1363   3.0000000\n1364  -3.6666667\n1365   2.0000000\n1366   2.3333333\n1367   1.0000000\n1368   5.0000000\n1369   3.3333333\n1370   8.3333333\n1371  -0.3333333\n1372   0.3333333\n1373   2.6666667\n1374   1.3333333\n1375  -6.6666667\n1376  -5.3333333\n1377  -1.0000000\n1378  -1.0000000\n1379  -4.6666667\n1380   5.6666667\n1381   8.6666667\n1382   0.3333333\n1383  -1.3333333\n1384   2.0000000\n1385  -6.6666667\n1386   4.0000000\n1387  -0.6666667\n1388   8.3333333\n1389  -4.3333333\n1390  -3.6666667\n1391   5.0000000\n1392   2.0000000\n1393   3.6666667\n1394  -8.3333333\n1395   1.6666667\n1396  -6.0000000\n1397  -7.3333333\n1398   5.0000000\n1399   4.6666667\n1400  -4.0000000\n1401  -1.3333333\n1402   4.3333333\n1403  -3.6666667\n1404  -1.3333333\n1405  -3.3333333\n1406   4.6666667\n1407   2.6666667\n1408   3.3333333\n1409  -4.0000000\n1410   5.0000000\n1411  -7.3333333\n1412  -1.6666667\n1413  -7.3333333\n1414   3.6666667\n1415   7.3333333\n1416  -0.3333333\n1417  -3.6666667\n1418   4.6666667\n1419   2.6666667\n1420   6.0000000\n1421   1.6666667\n1422   5.0000000\n1423  -1.6666667\n1424   2.6666667\n1425  -0.3333333\n1426   1.6666667\n1427   5.3333333\n1428   8.6666667\n1429  -7.0000000\n1430  -1.3333333\n1431  -1.6666667\n1432  -5.3333333\n1433  -3.3333333\n1434   2.6666667\n1435   1.0000000\n1436   7.6666667\n1437  -2.6666667\n1438   0.3333333\n1439   5.6666667\n1440  -1.6666667\n1441  -9.6666667\n1442   3.0000000\n1443  -5.0000000\n1444   2.0000000\n1445 -10.6666667\n1446  -6.3333333\n1447   0.0000000\n1448  12.0000000\n1449   0.6666667\n1450  -0.6666667\n1451   0.6666667\n1452   3.3333333\n1453  -0.3333333\n1454  -7.3333333\n1455   0.0000000\n1456  -2.6666667\n1457   0.6666667\n1458   6.3333333\n1459  -3.6666667\n1460  10.0000000\n1461   1.3333333\n1462  -0.3333333\n1463  -2.6666667\n1464   2.3333333\n1465   1.3333333\n1466   6.3333333\n1467  -3.3333333\n1468  -1.6666667\n1469  -5.6666667\n1470   5.0000000\n1471   1.6666667\n1472   4.3333333\n1473   2.0000000\n1474  -1.3333333\n1475   2.6666667\n1476  -9.0000000\n1477  -1.0000000\n1478   0.3333333\n1479   0.0000000\n1480   6.0000000\n1481  -2.3333333\n1482  -7.3333333\n1483   3.6666667\n1484   2.3333333\n1485  -3.0000000\n1486  -4.3333333\n1487  -2.3333333\n1488   6.0000000\n1489   3.0000000\n1490   3.0000000\n1491  -0.3333333\n1492   0.0000000\n1493   4.6666667\n1494  -2.6666667\n1495   2.6666667\n1496   2.3333333\n1497  -0.6666667\n1498   6.0000000\n1499   2.3333333\n1500  -2.0000000\n1501  -2.6666667\n1502   7.6666667\n1503  -3.0000000\n1504  -7.3333333\n1505  -3.0000000\n1506   5.3333333\n1507  -3.6666667\n1508   3.6666667\n1509  -7.6666667\n1510   1.0000000\n1511   1.3333333\n1512  -1.0000000\n1513   3.6666667\n1514   3.0000000\n1515   1.6666667\n1516  -2.3333333\n1517  -2.6666667\n1518  -5.3333333\n1519  -2.0000000\n1520  -2.6666667\n1521  -1.6666667\n1522  -7.0000000\n1523  -3.3333333\n1524  -4.0000000\n1525  -3.0000000\n1526  -2.0000000\n1527  -1.0000000\n1528  -5.3333333\n1529  -4.3333333\n1530  -0.3333333\n1531   6.3333333\n1532   2.0000000\n1533  -1.0000000\n1534  -6.6666667\n1535  -0.3333333\n1536   3.6666667\n1537  -0.6666667\n1538  -3.0000000\n1539  10.0000000\n1540   9.0000000\n1541  -4.0000000\n1542  -2.3333333\n1543   4.0000000\n1544  -1.3333333\n1545   9.3333333\n1546   3.3333333\n1547   5.3333333\n1548   6.3333333\n1549  -7.0000000\n1550   2.0000000\n1551   3.0000000\n1552  -2.0000000\n1553   2.6666667\n1554  -6.0000000\n1555   3.6666667\n1556   2.0000000\n1557   1.3333333\n1558   6.6666667\n1559  -2.0000000\n1560  -1.3333333\n1561  -0.6666667\n1562   3.6666667\n1563   3.3333333\n1564  -1.0000000\n1565  -2.0000000\n1566  -1.0000000\n1567   0.3333333\n1568  -9.3333333\n1569   5.0000000\n1570  -2.3333333\n1571  -4.0000000\n1572  -7.6666667\n1573   5.0000000\n1574   2.3333333\n1575   4.0000000\n1576   6.0000000\n1577   4.3333333\n1578   8.6666667\n1579   6.3333333\n1580  -0.3333333\n1581   1.6666667\n1582   2.6666667\n1583  -2.3333333\n1584  -1.6666667\n1585   2.6666667\n1586  -1.3333333\n1587  -0.6666667\n1588  -6.0000000\n1589  -6.0000000\n1590   8.0000000\n1591   1.3333333\n1592   0.6666667\n1593   3.0000000\n1594   5.3333333\n1595  -0.6666667\n1596   3.0000000\n1597  -1.0000000\n1598   3.6666667\n1599  -3.6666667\n1600   6.0000000\n1601   3.0000000\n1602  -6.6666667\n1603   3.3333333\n1604  -2.0000000\n1605   2.0000000\n1606   3.0000000\n1607   4.3333333\n1608  -0.3333333\n1609  -4.3333333\n1610   0.6666667\n1611  -1.6666667\n1612  -3.6666667\n1613   1.6666667\n1614  -7.6666667\n1615   3.6666667\n1616  -5.0000000\n1617  -2.0000000\n1618  -7.6666667\n1619  -1.3333333\n1620  -3.0000000\n1621  -4.0000000\n1622   3.0000000\n1623   1.0000000\n1624  -5.0000000\n1625   5.6666667\n1626   0.0000000\n1627   4.0000000\n1628   7.3333333\n1629   1.0000000\n1630   3.0000000\n1631   2.6666667\n1632  -2.0000000\n1633 -13.0000000\n1634  -4.3333333\n1635  -6.0000000\n1636   7.0000000\n1637   1.6666667\n1638  -1.6666667\n1639 -10.6666667\n1640  -6.3333333\n1641   7.3333333\n1642   4.0000000\n1643  -5.0000000\n1644  -6.3333333\n1645  -0.6666667\n1646   0.6666667\n1647  10.3333333\n1648   1.0000000\n1649  -5.0000000\n1650   6.6666667\n1651   9.6666667\n1652   7.3333333\n1653  -2.6666667\n1654   3.3333333\n1655  -2.3333333\n1656   7.3333333\n1657   1.3333333\n1658  -3.3333333\n1659  -3.3333333\n1660   8.6666667\n1661   7.0000000\n1662   2.6666667\n1663  -3.3333333\n1664   0.0000000\n1665   0.6666667\n1666  -5.0000000\n1667 -13.3333333\n1668  -3.0000000\n1669   8.3333333\n1670   1.3333333\n1671   3.0000000\n1672   0.3333333\n1673   0.3333333\n1674   1.6666667\n1675   0.6666667\n1676   3.0000000\n1677  -2.0000000\n1678  -5.0000000\n1679  -3.6666667\n1680   3.6666667\n1681   3.3333333\n1682   1.0000000\n1683   3.0000000\n1684   4.3333333\n1685   2.6666667\n1686   3.0000000\n1687   0.0000000\n1688   2.6666667\n1689   0.6666667\n1690  -6.6666667\n1691   2.6666667\n1692   2.0000000\n1693   3.0000000\n1694  -5.3333333\n1695  -3.0000000\n1696   0.0000000\n1697   8.0000000\n1698  -1.6666667\n1699  -0.6666667\n1700   2.0000000\n1701  -0.6666667\n1702   1.3333333\n1703   3.3333333\n1704  -1.0000000\n1705  -1.3333333\n1706   0.0000000\n1707 -11.3333333\n1708  -3.0000000\n1709   0.0000000\n1710  -6.0000000\n1711   0.3333333\n1712   3.0000000\n1713   0.6666667\n1714   2.6666667\n1715   0.6666667\n1716   0.0000000\n1717  -3.6666667\n1718   2.0000000\n1719  -8.3333333\n1720  -7.0000000\n1721   2.6666667\n1722  -1.3333333\n1723   2.3333333\n1724   8.0000000\n1725   2.6666667\n1726   7.3333333\n1727   7.6666667\n1728   2.3333333\n1729   9.3333333\n1730   1.6666667\n1731   9.0000000\n1732  -5.0000000\n1733  -2.6666667\n1734   2.0000000\n1735  -4.0000000\n1736  -1.3333333\n1737  -3.0000000\n1738  -3.0000000\n1739   1.0000000\n1740  -6.6666667\n1741   3.0000000\n1742   6.3333333\n1743   5.0000000\n1744  -1.6666667\n1745   5.0000000\n1746   1.3333333\n1747  -4.6666667\n1748   1.3333333\n1749  -2.3333333\n1750  -3.0000000\n1751   2.0000000\n1752   0.6666667\n1753   1.0000000\n1754  -3.6666667\n1755   0.3333333\n1756  -3.3333333\n1757   0.6666667\n1758  -2.6666667\n1759  -8.6666667\n1760  -8.3333333\n1761  -3.3333333\n1762   0.3333333\n1763   0.6666667\n1764  -9.3333333\n1765   4.0000000\n1766   2.0000000\n1767  -2.0000000\n1768  -2.6666667\n1769  11.0000000\n1770   2.0000000\n1771  -5.0000000\n1772  11.6666667\n1773  -3.0000000\n1774   9.3333333\n1775   0.6666667\n1776  -2.3333333\n1777   5.6666667\n1778   0.3333333\n1779  -2.6666667\n1780  -4.3333333\n1781  -4.3333333\n1782  -5.0000000\n1783  -0.3333333\n1784   1.6666667\n1785   0.6666667\n1786  -2.6666667\n1787  11.6666667\n1788   2.0000000\n1789   1.6666667\n1790   4.6666667\n1791   0.3333333\n1792  -2.6666667\n1793   0.6666667\n1794  -3.0000000\n1795   5.0000000\n1796  -0.3333333\n1797  -3.0000000\n1798  -2.0000000\n1799  -2.0000000\n1800   1.3333333\n1801  -0.6666667\n1802  -2.3333333\n1803  -0.6666667\n1804  -6.6666667\n1805   2.3333333\n1806   0.6666667\n1807   1.3333333\n1808  -0.6666667\n1809  -1.6666667\n1810   2.3333333\n1811  -9.0000000\n1812   6.0000000\n1813   8.3333333\n1814  -7.6666667\n1815  -0.3333333\n1816  -5.3333333\n1817   4.6666667\n1818   6.0000000\n1819  -1.0000000\n1820   5.3333333\n1821   1.3333333\n1822  -5.3333333\n1823  10.6666667\n1824   9.6666667\n1825   1.6666667\n1826  -7.0000000\n1827  -1.0000000\n1828  -5.6666667\n1829  -1.6666667\n1830  -8.3333333\n1831   3.6666667\n1832  -0.3333333\n1833   5.6666667\n1834   3.3333333\n1835  -3.0000000\n1836  -1.0000000\n1837  -6.3333333\n1838  -3.0000000\n1839   0.6666667\n1840  -9.0000000\n1841   2.3333333\n1842   3.0000000\n1843   0.3333333\n1844   7.0000000\n1845   6.0000000\n1846  -4.0000000\n1847  -7.6666667\n1848  -4.3333333\n1849  -6.0000000\n1850  -1.0000000\n1851   7.0000000\n1852  -4.0000000\n1853  -5.0000000\n1854  -5.3333333\n1855  -3.6666667\n1856   0.3333333\n1857   5.0000000\n1858   5.6666667\n1859  -4.3333333\n1860  -4.0000000\n1861  -0.3333333\n1862  -0.3333333\n1863  -5.3333333\n1864  -0.3333333\n1865   3.0000000\n1866   1.6666667\n1867   0.6666667\n1868   9.0000000\n1869  -5.0000000\n1870  -1.0000000\n1871  -2.0000000\n1872  -0.6666667\n1873  -8.0000000\n1874  -5.0000000\n1875   4.6666667\n1876  -0.3333333\n1877   0.3333333\n1878  -7.6666667\n1879   6.3333333\n1880   4.0000000\n1881  -0.6666667\n1882   0.3333333\n1883   5.0000000\n1884  -8.0000000\n1885   2.3333333\n1886   1.6666667\n1887  -8.6666667\n1888  -8.0000000\n1889   1.6666667\n1890  -5.6666667\n1891   0.6666667\n1892  -8.3333333\n1893  -3.0000000\n1894   7.3333333\n1895   1.6666667\n1896   0.0000000\n1897  -4.3333333\n1898  -0.3333333\n1899  -2.6666667\n1900  -1.0000000\n1901   1.3333333\n1902  -6.6666667\n1903  -0.6666667\n1904  10.6666667\n1905   4.6666667\n1906   2.6666667\n1907   3.3333333\n1908   2.6666667\n1909   0.6666667\n1910  -6.0000000\n1911   2.3333333\n1912   6.6666667\n1913   0.0000000\n1914  -4.6666667\n1915   5.6666667\n1916   1.3333333\n1917   3.3333333\n1918  -9.0000000\n1919   1.0000000\n1920  -7.0000000\n1921   8.3333333\n1922  -5.0000000\n1923   3.0000000\n1924  -1.0000000\n1925  -1.3333333\n1926   0.0000000\n1927  -6.0000000\n1928  -3.6666667\n1929   6.0000000\n1930   3.0000000\n1931   1.6666667\n1932  -1.6666667\n1933  -2.3333333\n1934   5.3333333\n1935   4.0000000\n1936  -1.3333333\n1937   3.6666667\n1938   5.3333333\n1939   2.3333333\n1940  -2.0000000\n1941   2.6666667\n1942  -7.0000000\n1943  -9.0000000\n1944   2.0000000\n1945   0.0000000\n1946   6.0000000\n1947   5.3333333\n1948   2.3333333\n1949   3.6666667\n1950  -0.3333333\n1951 -10.3333333\n1952  -4.0000000\n1953  -3.3333333\n1954   3.3333333\n1955  -8.0000000\n1956  -2.3333333\n1957  -6.0000000\n1958  -8.6666667\n1959  -4.3333333\n1960   0.3333333\n1961  -5.6666667\n1962   1.6666667\n1963   2.3333333\n1964   0.6666667\n1965   2.0000000\n1966  10.0000000\n1967   4.0000000\n1968   3.3333333\n1969  -3.6666667\n1970  -1.6666667\n1971  11.6666667\n1972  -4.6666667\n1973  -5.0000000\n1974  -2.3333333\n1975   2.6666667\n1976   2.3333333\n1977   3.0000000\n1978   0.0000000\n1979  -2.3333333\n1980   2.0000000\n1981  -3.0000000\n1982  -2.6666667\n1983   9.6666667\n1984   1.6666667\n1985  -1.0000000\n1986  -7.3333333\n1987   5.0000000\n1988  -2.6666667\n1989  -5.6666667\n1990   3.3333333\n1991   1.3333333\n1992   4.6666667\n1993 -11.0000000\n1994   6.6666667\n1995   3.3333333\n1996   0.6666667\n1997   9.3333333\n1998  -2.6666667\n1999  -5.0000000\n2000   3.3333333\n2001   5.3333333\n2002   7.3333333\n2003  -6.0000000\n2004   0.6666667\n2005  -2.3333333\n2006   2.0000000\n2007   2.6666667\n2008  -2.0000000\n2009   4.0000000\n2010   2.6666667\n2011   3.0000000\n2012  -4.0000000\n2013   2.3333333\n2014   1.6666667\n2015  -3.3333333\n2016   1.3333333\n2017   1.6666667\n2018  -2.3333333\n2019  -3.3333333\n2020   6.6666667\n2021   1.3333333\n2022   1.3333333\n2023 -10.6666667\n2024   3.3333333\n2025  -1.6666667\n2026  -1.3333333\n2027   0.0000000\n2028   2.3333333\n2029  -1.6666667\n2030  -5.3333333\n2031   1.6666667\n2032  -6.6666667\n2033   5.3333333\n2034  -1.0000000\n2035   1.0000000\n2036   0.0000000\n2037   1.6666667\n2038   6.6666667\n2039  -0.3333333\n2040   4.0000000\n2041  -2.3333333\n2042  -6.6666667\n2043   3.6666667\n2044   4.6666667\n2045  -1.3333333\n2046  -5.0000000\n2047   0.6666667\n2048  10.0000000\n2049   1.0000000\n2050  -0.6666667\n2051   3.6666667\n2052   4.6666667\n2053   6.3333333\n2054   3.3333333\n2055  -1.3333333\n2056  -1.3333333\n2057   4.3333333\n2058   4.0000000\n2059  -6.0000000\n2060  -3.0000000\n2061  -3.3333333\n2062   2.3333333\n2063   9.0000000\n2064  -3.3333333\n2065  -1.3333333\n2066  -2.0000000\n2067  -1.3333333\n2068  -2.0000000\n2069  10.3333333\n2070   9.0000000\n2071  -2.3333333\n2072   3.6666667\n2073   1.0000000\n2074  -8.6666667\n2075  -2.6666667\n2076   1.3333333\n2077  -4.3333333\n2078  -2.6666667\n2079  -6.0000000\n2080  -1.3333333\n2081  -5.6666667\n2082  -2.3333333\n2083   1.6666667\n2084   7.6666667\n2085   1.3333333\n2086   2.0000000\n2087   5.3333333\n2088   3.6666667\n2089   1.3333333\n2090  -6.6666667\n2091  -2.3333333\n2092   0.6666667\n2093   1.3333333\n2094   2.6666667\n2095   2.0000000\n2096   9.3333333\n2097  -5.0000000\n2098  -3.0000000\n2099   4.0000000\n2100   1.0000000\n2101   5.0000000\n2102  -1.6666667\n2103  -9.3333333\n2104  -3.0000000\n2105  -4.0000000\n2106  -3.0000000\n2107  -4.3333333\n2108  -1.0000000\n2109  -3.6666667\n2110  -1.6666667\n2111  -2.6666667\n2112   4.3333333\n2113   3.0000000\n2114   5.3333333\n2115  -1.0000000\n2116   6.0000000\n2117   2.6666667\n2118  -1.6666667\n2119   0.0000000\n2120  -7.3333333\n2121  -2.0000000\n2122  -0.3333333\n2123   0.0000000\n2124  -5.3333333\n2125  -6.3333333\n2126   4.3333333\n2127   1.0000000\n2128 -11.3333333\n2129   6.0000000\n2130  -0.3333333\n2131  -5.3333333\n2132   0.6666667\n2133  -1.6666667\n2134   1.3333333\n2135   2.0000000\n2136   3.0000000\n2137   0.3333333\n2138  -4.6666667\n2139   0.6666667\n2140  -8.6666667\n2141  -7.6666667\n2142   4.6666667\n2143   6.0000000\n2144   5.0000000\n2145  -5.0000000\n2146   6.6666667\n2147  -4.0000000\n2148  -1.3333333\n2149  -2.0000000\n2150   3.3333333\n2151   3.0000000\n2152   2.0000000\n2153  -2.3333333\n2154   0.3333333\n2155   4.0000000\n2156   2.0000000\n2157   3.3333333\n2158   2.3333333\n2159   3.6666667\n2160  -5.6666667\n2161  -1.6666667\n2162  -4.6666667\n2163   7.3333333\n2164  -5.3333333\n2165  -3.3333333\n2166   0.0000000\n2167   4.0000000\n2168  -0.6666667\n2169   3.3333333\n2170  -1.0000000\n2171  -7.3333333\n2172   3.0000000\n2173   6.0000000\n2174   3.3333333\n2175   6.6666667\n2176  -7.3333333\n2177   6.3333333\n2178  -7.3333333\n2179   9.0000000\n2180   3.6666667\n2181   4.0000000\n2182  -6.0000000\n2183  -5.3333333\n2184   7.0000000\n2185  -3.0000000\n2186   2.0000000\n2187   1.0000000\n2188  -2.6666667\n2189   0.3333333\n2190   0.0000000\n2191  -6.0000000\n2192  -3.0000000\n2193  -2.0000000\n2194   0.6666667\n2195  -5.6666667\n2196   1.6666667\n2197  -0.6666667\n2198  -4.3333333\n2199   7.0000000\n2200   6.6666667\n2201  -4.0000000\n2202   5.3333333\n2203  -0.6666667\n2204   3.3333333\n2205  -5.3333333\n2206  -5.6666667\n2207  -1.6666667\n2208   3.0000000\n2209  -6.0000000\n2210  -0.6666667\n2211   8.3333333\n2212  -8.0000000\n2213  -6.6666667\n2214  -1.3333333\n2215  -4.0000000\n2216   4.3333333\n2217   8.6666667\n2218 -12.6666667\n2219   2.6666667\n2220   1.6666667\n2221   0.6666667\n2222   6.6666667\n2223   0.0000000\n2224  -2.0000000\n2225  -5.0000000\n2226  -1.0000000\n2227   1.3333333\n2228   3.6666667\n2229   8.0000000\n2230  -6.6666667\n2231  -3.6666667\n2232  -4.6666667\n2233  -2.3333333\n2234   0.0000000\n2235   3.3333333\n2236  -7.3333333\n2237   2.0000000\n2238  -7.3333333\n2239   9.0000000\n2240   3.3333333\n2241   5.0000000\n2242  -2.0000000\n2243   7.6666667\n2244  -2.0000000\n2245   3.6666667\n2246   9.0000000\n2247  -8.3333333\n2248  -1.3333333\n2249   4.0000000\n2250   1.3333333\n2251  -2.3333333\n2252  -1.6666667\n2253   1.3333333\n2254  -5.0000000\n2255   1.3333333\n2256   0.6666667\n2257   8.3333333\n2258   4.0000000\n2259   9.0000000\n2260  -4.3333333\n2261  -3.3333333\n2262   4.3333333\n2263  -0.3333333\n2264  -5.3333333\n2265   2.0000000\n2266   1.3333333\n2267   5.6666667\n2268  -2.6666667\n2269  -3.0000000\n2270   2.0000000\n2271  -2.0000000\n2272  -1.3333333\n2273   2.3333333\n2274  -5.0000000\n2275  -6.0000000\n2276   5.0000000\n2277   4.6666667\n2278   0.3333333\n2279   1.0000000\n2280   4.6666667\n2281   0.3333333\n2282  -2.0000000\n2283  -0.6666667\n2284   7.3333333\n2285  -4.6666667\n2286   3.6666667\n2287  -8.0000000\n2288  -5.6666667\n2289   7.3333333\n2290   2.6666667\n2291   1.0000000\n2292   3.0000000\n2293  -3.0000000\n2294   6.6666667\n2295  -5.0000000\n2296   1.3333333\n2297  -2.6666667\n2298   2.3333333\n2299   8.3333333\n2300   7.3333333\n2301  -3.0000000\n2302  -0.3333333\n2303  -0.3333333\n2304   7.0000000\n2305  -2.3333333\n2306   3.0000000\n2307  -4.0000000\n2308  -3.6666667\n2309  -5.0000000\n2310   8.3333333\n2311  -0.6666667\n2312  -1.3333333\n2313  -0.6666667\n2314  -7.6666667\n2315  -2.0000000\n2316  -4.0000000\n2317  -4.0000000\n2318  -4.3333333\n2319  -3.3333333\n2320   8.3333333\n2321   9.3333333\n2322   4.6666667\n2323  -2.0000000\n2324   2.3333333\n2325  -4.6666667\n2326   3.3333333\n2327   4.0000000\n2328  -5.0000000\n2329   4.6666667\n2330  -1.0000000\n2331   5.3333333\n2332  11.0000000\n2333  -1.0000000\n2334   1.6666667\n2335   2.0000000\n2336   6.6666667\n2337  -5.3333333\n2338  -8.3333333\n2339  -5.6666667\n2340   4.0000000\n2341  -4.0000000\n2342   9.3333333\n2343   0.3333333\n2344   1.6666667\n2345   6.3333333\n2346   2.0000000\n2347   8.3333333\n2348   6.0000000\n2349  -4.3333333\n2350  -6.6666667\n2351  10.6666667\n2352   3.0000000\n2353   5.0000000\n2354   0.3333333\n2355  -3.6666667\n2356   3.0000000\n2357  -3.0000000\n2358   3.0000000\n2359   3.3333333\n2360  -7.3333333\n2361  -0.6666667\n2362   3.3333333\n2363   1.6666667\n2364  -3.0000000\n2365  -6.6666667\n2366   1.0000000\n2367  -8.3333333\n2368   5.0000000\n2369   5.6666667\n2370   3.3333333\n2371   4.6666667\n2372  -5.3333333\n2373  -1.0000000\n2374  -5.6666667\n2375  -5.6666667\n2376  -0.6666667\n2377  -4.6666667\n2378  -3.6666667\n2379  -1.3333333\n2380   0.3333333\n2381  -1.6666667\n2382  -1.3333333\n2383   0.6666667\n2384  -5.3333333\n2385  -3.0000000\n2386  -6.6666667\n2387   4.3333333\n2388  -5.6666667\n2389  -0.6666667\n2390   2.0000000\n2391  -4.0000000\n2392  -2.3333333\n2393  -5.6666667\n2394  -1.6666667\n2395   2.6666667\n2396   4.0000000\n2397  -3.0000000\n2398 -10.0000000\n2399  -2.3333333\n2400   4.6666667\n2401   2.3333333\n2402   1.6666667\n2403   5.3333333\n2404   6.0000000\n2405  -3.0000000\n2406   5.6666667\n2407   1.0000000\n2408  -1.3333333\n2409  -3.3333333\n2410  -6.3333333\n2411  -0.6666667\n2412   4.0000000\n2413  -2.3333333\n2414  -5.0000000\n2415   4.0000000\n2416  -8.6666667\n2417   0.6666667\n2418   1.3333333\n2419  -3.0000000\n2420   2.3333333\n2421   1.3333333\n2422  -5.6666667\n2423   5.3333333\n2424   4.0000000\n2425   2.0000000\n2426  -2.3333333\n2427  -5.3333333\n2428   7.3333333\n2429   4.3333333\n2430  -5.6666667\n2431   4.3333333\n2432   9.0000000\n2433  -3.3333333\n2434   4.6666667\n2435  -0.6666667\n2436  -3.0000000\n2437 -13.3333333\n2438 -12.3333333\n2439  -4.6666667\n2440 -11.3333333\n2441  -2.6666667\n2442   0.3333333\n2443   0.6666667\n2444   4.3333333\n2445   2.6666667\n2446   0.3333333\n2447  -1.3333333\n2448   6.3333333\n2449   1.0000000\n2450   3.3333333\n2451   1.6666667\n2452   2.3333333\n2453  -3.6666667\n2454   1.3333333\n2455  -2.3333333\n2456  -8.3333333\n2457  -8.3333333\n2458  -6.3333333\n2459  -5.0000000\n2460   4.6666667\n2461  -0.3333333\n2462  -1.3333333\n2463  -2.3333333\n2464  -4.3333333\n2465   2.3333333\n2466   3.3333333\n2467   3.6666667\n2468  -4.0000000\n2469   7.0000000\n2470  -5.3333333\n2471   2.6666667\n2472  -1.3333333\n2473  -1.0000000\n2474   2.3333333\n2475  -1.3333333\n2476   4.0000000\n2477   0.3333333\n2478   4.6666667\n2479   7.3333333\n2480  -5.3333333\n2481  -0.3333333\n2482  -4.6666667\n2483  -3.6666667\n2484  -0.3333333\n2485   2.0000000\n2486   2.3333333\n2487  -0.6666667\n2488  -5.0000000\n2489   2.3333333\n2490   5.3333333\n2491  -8.6666667\n2492   9.6666667\n2493  -0.6666667\n2494   1.3333333\n2495 -10.6666667\n2496   1.6666667\n2497   1.3333333\n2498   3.3333333\n2499  -2.0000000\n2500  -3.0000000\n2501  -2.0000000\n2502  -4.6666667\n2503   1.0000000\n2504   5.6666667\n2505   1.3333333\n2506  -6.6666667\n2507   8.0000000\n2508   9.6666667\n2509   3.6666667\n2510  -2.3333333\n2511  -1.0000000\n2512   0.0000000\n2513   2.0000000\n2514   7.0000000\n2515   0.0000000\n2516  -1.0000000\n2517  -8.0000000\n2518   5.6666667\n2519   6.6666667\n2520  -2.6666667\n2521   0.3333333\n2522   1.6666667\n2523  -6.3333333\n2524  -0.3333333\n2525  -6.0000000\n2526   6.3333333\n2527  -8.0000000\n2528   5.6666667\n2529  -2.6666667\n2530   1.3333333\n2531   4.0000000\n2532   6.0000000\n2533   5.0000000\n2534  -5.6666667\n2535  -3.0000000\n2536   5.0000000\n2537  -8.6666667\n2538  -3.6666667\n2539  -2.6666667\n2540  -6.3333333\n2541  -4.3333333\n2542  -2.0000000\n2543   0.6666667\n2544   5.0000000\n2545   3.6666667\n2546  -6.3333333\n2547  -1.6666667\n2548  -9.0000000\n2549  -0.6666667\n2550   3.3333333\n2551   2.3333333\n2552  -5.0000000\n2553  -8.0000000\n2554  -1.6666667\n2555  -3.6666667\n2556  -6.0000000\n2557   4.0000000\n2558   0.6666667\n2559  -4.0000000\n2560   2.3333333\n2561   0.0000000\n2562   2.6666667\n2563  -3.3333333\n2564  -5.6666667\n2565  -2.3333333\n2566   9.3333333\n2567   2.6666667\n2568   6.3333333\n2569  -2.6666667\n2570  -4.3333333\n2571   3.6666667\n2572   8.3333333\n2573  -6.0000000\n2574   1.0000000\n2575  -1.6666667\n2576   6.3333333\n2577  -0.3333333\n2578  -3.0000000\n2579   3.3333333\n2580   7.3333333\n2581  -4.3333333\n2582  -7.0000000\n2583   0.6666667\n2584  -8.0000000\n2585  -9.6666667\n2586   3.6666667\n2587   3.3333333\n2588  -1.3333333\n2589 -10.0000000\n2590   8.6666667\n2591  -8.3333333\n2592   5.3333333\n2593  -2.6666667\n2594   3.6666667\n2595  -6.0000000\n2596  -5.0000000\n2597  -9.6666667\n2598  -0.6666667\n2599   3.0000000\n2600   4.3333333\n2601   1.6666667\n2602   3.0000000\n2603   7.0000000\n2604   3.3333333\n2605   4.3333333\n2606   1.3333333\n2607  -6.6666667\n2608  -3.0000000\n2609 -10.0000000\n2610  -0.3333333\n2611  10.0000000\n2612   1.6666667\n2613   1.6666667\n2614  -2.3333333\n2615  -7.0000000\n2616   5.3333333\n2617   1.0000000\n2618  -4.0000000\n2619   2.3333333\n2620   3.3333333\n2621  -5.6666667\n2622  -4.6666667\n2623  -5.0000000\n2624  -1.6666667\n2625   8.0000000\n2626  -2.0000000\n2627  -5.0000000\n2628  -2.0000000\n2629  -5.3333333\n2630  -9.6666667\n2631   5.3333333\n2632   5.3333333\n2633   3.0000000\n2634   4.0000000\n2635   0.0000000\n2636  -2.6666667\n2637  -1.3333333\n2638  -1.3333333\n2639   8.0000000\n2640   4.0000000\n2641  -6.0000000\n2642  12.3333333\n2643  -3.6666667\n2644  -1.0000000\n2645   1.6666667\n2646   7.0000000\n2647   5.3333333\n2648  -7.3333333\n2649   1.0000000\n2650   4.6666667\n2651   4.3333333\n2652  -0.6666667\n2653   1.6666667\n2654   8.0000000\n2655   4.6666667\n2656   6.0000000\n2657  -4.6666667\n2658  -7.3333333\n2659   4.0000000\n2660  -2.3333333\n2661   3.6666667\n2662  -3.0000000\n2663  -2.6666667\n2664  -3.3333333\n2665  -2.3333333\n2666   4.3333333\n2667  -4.6666667\n2668   3.3333333\n2669   3.6666667\n2670   3.6666667\n2671  -5.6666667\n2672  -2.6666667\n2673   8.0000000\n2674   4.3333333\n2675  -3.0000000\n2676   2.6666667\n2677   5.3333333\n2678   7.3333333\n2679  -8.0000000\n2680  -5.0000000\n2681   7.6666667\n2682   7.6666667\n2683   0.3333333\n2684   1.3333333\n2685 -10.0000000\n2686  -0.6666667\n2687   1.3333333\n2688   1.6666667\n2689  -5.6666667\n2690  -2.0000000\n2691   7.0000000\n2692  -0.3333333\n2693  -0.6666667\n2694  -2.3333333\n2695  -6.6666667\n2696   4.0000000\n2697  -1.3333333\n2698   6.0000000\n2699  -3.3333333\n2700  -1.3333333\n2701   5.6666667\n2702   0.3333333\n2703  -4.6666667\n2704  -5.6666667\n2705   3.3333333\n2706  -0.3333333\n2707   4.6666667\n2708   4.0000000\n2709   7.0000000\n2710  -1.6666667\n2711  -3.6666667\n2712  -1.3333333\n2713  -3.6666667\n2714  -2.3333333\n2715  -0.3333333\n2716   0.6666667\n2717  -2.6666667\n2718   5.3333333\n2719   6.0000000\n2720  -2.6666667\n2721   5.6666667\n2722  -5.0000000\n2723  -6.0000000\n2724  -2.6666667\n2725   4.0000000\n2726  -8.0000000\n2727   0.3333333\n2728   5.6666667\n2729   1.3333333\n2730  -1.0000000\n2731   2.3333333\n2732  -6.6666667\n2733   8.3333333\n2734   5.0000000\n2735  -0.3333333\n2736   2.6666667\n2737   7.3333333\n2738   7.0000000\n2739   1.0000000\n2740   2.0000000\n2741  -0.6666667\n2742   3.0000000\n2743  -2.3333333\n2744  -0.6666667\n2745   3.0000000\n2746  -2.3333333\n2747  -8.0000000\n2748  -2.3333333\n2749  -6.6666667\n2750  13.6666667\n2751   8.0000000\n2752   1.3333333\n2753  -2.6666667\n2754  -1.3333333\n2755   2.3333333\n2756  -7.0000000\n2757   1.3333333\n2758   2.0000000\n2759  -2.3333333\n2760  -6.6666667\n2761   3.3333333\n2762   2.3333333\n2763   0.6666667\n2764  -6.0000000\n2765  -1.0000000\n2766  -1.6666667\n2767   2.6666667\n2768   3.6666667\n2769   3.3333333\n2770   2.3333333\n2771   8.6666667\n2772   4.6666667\n2773  -2.0000000\n2774  -5.0000000\n2775  -5.3333333\n2776   7.3333333\n2777  -0.3333333\n2778  -7.3333333\n2779  -2.3333333\n2780  -5.0000000\n2781  -3.3333333\n2782  -6.6666667\n2783   4.3333333\n2784   2.3333333\n2785   1.0000000\n2786   7.0000000\n2787   5.6666667\n2788  -2.6666667\n2789  -3.3333333\n2790   0.3333333\n2791   3.0000000\n2792  -6.0000000\n2793   2.6666667\n2794  -2.0000000\n2795  -4.3333333\n2796   3.0000000\n2797  -7.0000000\n2798  -2.6666667\n2799   2.3333333\n2800  -2.3333333\n2801  -2.6666667\n2802  -1.3333333\n2803  -0.6666667\n2804  -1.0000000\n2805   2.6666667\n2806  -0.3333333\n2807   0.0000000\n2808   5.0000000\n2809   3.6666667\n2810   4.6666667\n2811   3.3333333\n2812   2.6666667\n2813  -9.3333333\n2814  -9.0000000\n2815   1.0000000\n2816  -9.0000000\n2817   5.3333333\n2818   2.6666667\n2819   0.6666667\n2820   3.6666667\n2821   6.0000000\n2822  -4.0000000\n2823   5.0000000\n2824   4.6666667\n2825  -2.3333333\n2826  -4.0000000\n2827  -5.6666667\n2828  -6.3333333\n2829  -2.0000000\n2830  -5.0000000\n2831   0.3333333\n2832   6.0000000\n2833  -4.0000000\n2834  -1.0000000\n2835   1.6666667\n2836  -6.3333333\n2837  -3.3333333\n2838  -4.6666667\n2839   8.6666667\n2840   0.6666667\n2841   0.6666667\n2842   3.3333333\n2843   3.3333333\n2844   3.6666667\n2845   0.0000000\n2846 -11.3333333\n2847  -3.3333333\n2848   0.6666667\n2849   3.0000000\n2850  -9.6666667\n2851   2.0000000\n2852   4.3333333\n2853  -9.0000000\n2854   0.3333333\n2855   0.6666667\n2856  -5.3333333\n2857  -5.0000000\n2858  -2.0000000\n2859   1.3333333\n2860   3.3333333\n2861 -11.0000000\n2862   5.0000000\n2863   1.3333333\n2864  -2.6666667\n2865  -4.0000000\n2866   0.3333333\n2867 -12.0000000\n2868   1.6666667\n2869   2.0000000\n2870   5.0000000\n2871   1.0000000\n2872  -4.6666667\n2873  -6.0000000\n2874   0.6666667\n2875   1.3333333\n2876   1.3333333\n2877   0.3333333\n2878  -2.0000000\n2879  -4.0000000\n2880  -4.3333333\n2881  -4.6666667\n2882  -5.0000000\n2883   0.6666667\n2884  -3.6666667\n2885  -3.3333333\n2886  -2.3333333\n2887  -2.3333333\n2888  -4.0000000\n2889  -0.6666667\n2890  -2.6666667\n2891   2.6666667\n2892   1.6666667\n2893   0.6666667\n2894  -3.0000000\n2895  -2.6666667\n2896   7.3333333\n2897   1.3333333\n2898  -2.3333333\n2899   7.0000000\n2900  12.3333333\n2901  -2.3333333\n2902  -5.6666667\n2903   1.0000000\n2904   9.6666667\n2905   1.3333333\n2906   0.3333333\n2907   0.6666667\n2908   2.6666667\n2909  -5.6666667\n2910 -10.0000000\n2911  -4.6666667\n2912 -12.0000000\n2913  -1.3333333\n2914  -2.3333333\n2915   4.0000000\n2916   1.6666667\n2917   6.3333333\n2918   8.0000000\n2919  -2.6666667\n2920  -0.3333333\n2921   7.3333333\n2922   2.0000000\n2923   3.6666667\n2924  -7.6666667\n2925   2.3333333\n2926   3.3333333\n2927   7.3333333\n2928  -1.3333333\n2929  -1.6666667\n2930   4.0000000\n2931   3.6666667\n2932   2.6666667\n2933   2.3333333\n2934   2.6666667\n2935   0.0000000\n2936  -3.0000000\n2937   4.6666667\n2938  -3.3333333\n2939   0.0000000\n2940  -8.6666667\n2941  -7.0000000\n2942   3.3333333\n2943   6.3333333\n2944  -0.3333333\n2945  -3.0000000\n2946  -7.3333333\n2947   5.0000000\n2948  -3.6666667\n2949   7.6666667\n2950   4.6666667\n2951   1.0000000\n2952  -0.3333333\n2953  -3.0000000\n2954  -1.0000000\n2955   0.6666667\n2956   4.3333333\n2957   0.0000000\n2958   3.3333333\n2959  -3.3333333\n2960   2.0000000\n2961   2.3333333\n2962  -5.3333333\n2963  -8.6666667\n2964  -1.0000000\n2965  -6.6666667\n2966   1.3333333\n2967   0.6666667\n2968   1.0000000\n2969   1.6666667\n2970  -2.6666667\n2971   5.3333333\n2972  -4.0000000\n2973   6.3333333\n2974   1.3333333\n2975  -4.0000000\n2976  -2.3333333\n2977   2.6666667\n2978  -4.3333333\n2979   1.6666667\n2980  -1.6666667\n2981  -8.0000000\n2982  -2.6666667\n2983   3.3333333\n2984   4.6666667\n2985   8.0000000\n2986  -2.3333333\n2987  -0.6666667\n2988  -3.3333333\n2989   6.0000000\n2990   2.3333333\n2991   6.6666667\n2992   5.3333333\n2993   4.0000000\n2994  -4.6666667\n2995  -5.3333333\n2996  -5.0000000\n2997  -2.6666667\n2998  -3.6666667\n2999  -5.0000000\n3000  -2.3333333\n3001  -0.3333333\n3002   1.3333333\n3003  -3.6666667\n3004   4.0000000\n3005   0.3333333\n3006   5.0000000\n3007   4.3333333\n3008  -3.0000000\n3009   7.6666667\n3010   1.3333333\n3011   3.0000000\n3012  -0.6666667\n3013   0.3333333\n3014  -5.3333333\n3015  -4.3333333\n3016  -5.6666667\n3017  -5.3333333\n3018  -3.6666667\n3019  -2.6666667\n3020   2.6666667\n3021   3.0000000\n3022  -5.3333333\n3023  -3.0000000\n3024   7.0000000\n3025  -4.6666667\n3026   7.3333333\n3027   0.3333333\n3028  -6.3333333\n3029  -2.0000000\n3030  -7.0000000\n3031  -9.0000000\n3032  -4.3333333\n3033   7.0000000\n3034   5.3333333\n3035   1.6666667\n3036   3.0000000\n3037  -1.3333333\n3038  -3.3333333\n3039   9.3333333\n3040   2.3333333\n3041  -2.0000000\n3042   4.3333333\n3043  -4.0000000\n3044  -2.6666667\n3045  -2.0000000\n3046   1.3333333\n3047  -5.6666667\n3048   6.0000000\n3049   0.6666667\n3050  -2.6666667\n3051   6.0000000\n3052   0.3333333\n3053   1.6666667\n3054   3.6666667\n3055  -1.0000000\n3056   2.3333333\n3057   1.3333333\n3058  -0.6666667\n3059   6.0000000\n3060  -2.6666667\n3061  -0.3333333\n3062  -1.0000000\n3063 -10.0000000\n3064  -1.0000000\n3065  10.3333333\n3066  -0.3333333\n3067  -0.6666667\n3068  -4.6666667\n3069   3.3333333\n3070   4.0000000\n3071   3.6666667\n3072  -1.3333333\n3073   9.6666667\n3074   1.6666667\n3075  -3.3333333\n3076  -2.3333333\n3077  -1.3333333\n3078  -5.0000000\n3079  -1.0000000\n3080 -10.6666667\n3081  -6.3333333\n3082  -7.0000000\n3083  -3.6666667\n3084   9.3333333\n3085  -1.6666667\n3086   4.3333333\n3087  -6.0000000\n3088   4.3333333\n3089  -5.6666667\n3090  -2.0000000\n3091  -6.0000000\n3092   8.3333333\n3093  -9.6666667\n3094   7.6666667\n3095  -4.0000000\n3096   0.0000000\n3097   0.3333333\n3098  -5.3333333\n3099  -4.3333333\n3100  -5.6666667\n3101   0.6666667\n3102   3.6666667\n3103  -1.0000000\n3104   6.3333333\n3105   4.3333333\n3106   6.0000000\n3107  -2.6666667\n3108   2.6666667\n3109  10.0000000\n3110   3.6666667\n3111  -6.6666667\n3112  -2.6666667\n3113  -0.6666667\n3114   3.6666667\n3115  -4.6666667\n3116  -1.6666667\n3117   5.6666667\n3118   0.3333333\n3119   0.6666667\n3120  -3.0000000\n3121   4.3333333\n3122  -2.6666667\n3123   0.0000000\n3124   1.3333333\n3125  -4.0000000\n3126  -1.3333333\n3127   3.6666667\n3128   0.0000000\n3129  -0.3333333\n3130  -2.6666667\n3131   1.0000000\n3132   2.6666667\n3133   5.3333333\n3134   7.6666667\n3135  -1.0000000\n3136  -0.6666667\n3137   2.0000000\n3138   1.6666667\n3139   2.3333333\n3140  -7.0000000\n3141  -5.6666667\n3142   2.3333333\n3143  -3.0000000\n3144   0.3333333\n3145  -3.6666667\n3146  -2.0000000\n3147  -8.0000000\n3148 -11.3333333\n3149  -1.3333333\n3150   4.0000000\n3151  -2.6666667\n3152  -1.3333333\n3153   2.3333333\n3154  -3.0000000\n3155   4.3333333\n3156  -6.6666667\n3157   6.3333333\n3158  -7.0000000\n3159  -4.3333333\n3160   0.6666667\n3161   7.0000000\n3162   3.6666667\n3163   8.3333333\n3164  -3.3333333\n3165  -5.6666667\n3166   0.6666667\n3167   4.6666667\n3168   0.3333333\n3169   0.6666667\n3170  -6.3333333\n3171   6.3333333\n3172   4.6666667\n3173   9.0000000\n3174  -2.6666667\n3175  -4.6666667\n3176  -6.6666667\n3177   0.6666667\n3178  -2.0000000\n3179  -2.6666667\n3180  -0.6666667\n3181   2.0000000\n3182  -3.0000000\n3183  -0.6666667\n3184   2.6666667\n3185  -2.3333333\n3186   6.6666667\n3187   1.6666667\n3188   1.3333333\n3189 -11.3333333\n3190   3.3333333\n3191  -4.0000000\n3192   0.0000000\n3193   5.6666667\n3194   1.3333333\n3195  -0.6666667\n3196   0.3333333\n3197   4.0000000\n3198  11.0000000\n3199  -4.3333333\n3200  -3.3333333\n3201  -7.0000000\n3202  -0.3333333\n3203   7.6666667\n3204   4.6666667\n3205   8.6666667\n3206   0.0000000\n3207  -0.3333333\n3208   2.6666667\n3209  -0.3333333\n3210  -7.6666667\n3211   3.3333333\n3212  -0.3333333\n3213   7.0000000\n3214  -6.3333333\n3215  -5.0000000\n3216  -6.0000000\n3217   4.0000000\n3218  -6.0000000\n3219  -7.3333333\n3220   1.0000000\n3221  -3.0000000\n3222  10.6666667\n3223  -1.3333333\n3224  -3.0000000\n3225  -2.0000000\n3226  -6.6666667\n3227   5.6666667\n3228  -1.3333333\n3229   3.0000000\n3230  -2.3333333\n3231  -2.3333333\n3232   1.6666667\n3233  -0.3333333\n3234  -2.3333333\n3235  -3.0000000\n3236   4.3333333\n3237  -2.3333333\n3238  -0.6666667\n3239  -2.6666667\n3240  -4.3333333\n3241   0.0000000\n3242   5.3333333\n3243   3.6666667\n3244  -2.0000000\n3245  -4.0000000\n3246  -3.6666667\n3247   3.6666667\n3248   2.6666667\n3249 -10.0000000\n3250   1.6666667\n3251  -9.6666667\n3252   2.6666667\n3253  -1.6666667\n3254  -0.6666667\n3255  -2.3333333\n3256  -6.0000000\n3257  -6.6666667\n3258   9.0000000\n3259  -1.3333333\n3260  -3.0000000\n3261  -0.3333333\n3262  -0.6666667\n3263  -6.0000000\n3264   1.0000000\n3265   6.3333333\n3266  -3.3333333\n3267   6.6666667\n3268  -0.3333333\n3269  -6.0000000\n3270  10.0000000\n3271   6.6666667\n3272  -4.6666667\n3273   5.6666667\n3274   5.3333333\n3275  -4.3333333\n3276  -1.0000000\n3277   7.6666667\n3278  -3.6666667\n3279   2.3333333\n3280  -3.6666667\n3281   0.6666667\n3282   3.3333333\n3283  -3.0000000\n3284   3.6666667\n3285   0.6666667\n3286   1.3333333\n3287   2.0000000\n3288  -0.3333333\n3289   0.0000000\n3290   1.6666667\n3291   3.3333333\n3292   6.3333333\n3293  -4.6666667\n3294   3.0000000\n3295  -6.3333333\n3296   1.0000000\n3297  -7.0000000\n3298  -4.6666667\n3299   2.0000000\n3300   4.0000000\n3301   1.6666667\n3302  -2.0000000\n3303  -1.0000000\n3304   2.3333333\n3305  -1.0000000\n3306  -2.6666667\n3307  -3.0000000\n3308 -10.0000000\n3309  -0.3333333\n3310   2.3333333\n3311   5.0000000\n3312  -9.0000000\n3313  -1.0000000\n3314   0.3333333\n3315   4.6666667\n3316   1.6666667\n3317  -0.3333333\n3318  -0.6666667\n3319   0.0000000\n3320  -8.0000000\n3321  -0.3333333\n3322   0.0000000\n3323  -1.6666667\n3324   2.6666667\n3325  -6.0000000\n3326   1.6666667\n3327  -7.0000000\n3328   1.6666667\n3329   1.6666667\n3330   2.3333333\n3331  -4.3333333\n3332  -3.3333333\n3333   1.0000000\n3334  -4.0000000\n3335   0.0000000\n3336   1.0000000\n3337   4.6666667\n3338   2.3333333\n3339  -0.3333333\n3340  -4.6666667\n3341   9.0000000\n3342  -6.6666667\n3343  -2.0000000\n3344  -6.6666667\n3345   3.6666667\n3346  -2.6666667\n3347   2.6666667\n3348  -6.6666667\n3349  -8.0000000\n3350   8.0000000\n3351   3.3333333\n3352   3.0000000\n3353   7.0000000\n3354   5.6666667\n3355   8.3333333\n3356   0.6666667\n3357   2.6666667\n3358   3.3333333\n3359   2.3333333\n3360  -5.3333333\n3361  -4.0000000\n3362   2.0000000\n3363  -8.0000000\n3364  -1.6666667\n3365  -6.0000000\n3366  -1.3333333\n3367  -4.0000000\n3368   6.6666667\n3369   8.0000000\n3370  -5.0000000\n3371   8.6666667\n3372  -1.3333333\n3373  -8.6666667\n3374   1.0000000\n3375  -4.6666667\n3376  -4.6666667\n3377   2.0000000\n3378  -5.6666667\n3379  -3.6666667\n3380   4.6666667\n3381  -6.6666667\n3382   2.3333333\n3383   4.0000000\n3384   5.3333333\n3385   3.3333333\n3386   5.0000000\n3387  -0.3333333\n3388   2.3333333\n3389  -2.6666667\n3390   1.0000000\n3391  -0.6666667\n3392   1.0000000\n3393   2.0000000\n3394   4.3333333\n3395   4.3333333\n3396   2.0000000\n3397  -0.6666667\n3398  -0.3333333\n3399   8.6666667\n3400   0.3333333\n3401   2.3333333\n3402   1.0000000\n3403   5.6666667\n3404   2.3333333\n3405  -0.6666667\n3406   4.0000000\n3407  -2.6666667\n3408   6.6666667\n3409   1.6666667\n3410  -3.0000000\n3411  -1.3333333\n3412   1.6666667\n3413  -3.0000000\n3414   1.6666667\n3415   1.6666667\n3416  -2.0000000\n3417   0.3333333\n3418  -1.6666667\n3419  -0.6666667\n3420  -5.6666667\n3421  -9.0000000\n3422  -5.0000000\n3423  -1.3333333\n3424   3.0000000\n3425  -4.3333333\n3426   1.0000000\n3427  -7.6666667\n3428   2.6666667\n3429  -4.0000000\n3430   5.3333333\n3431  -2.6666667\n3432   4.6666667\n3433   5.0000000\n3434   4.0000000\n3435  -2.0000000\n3436   2.0000000\n3437   2.6666667\n3438  -5.3333333\n3439  -4.3333333\n3440  -5.3333333\n3441  -6.6666667\n3442  -3.0000000\n3443   0.6666667\n3444   5.6666667\n3445  -5.3333333\n3446   2.3333333\n3447  -0.6666667\n3448  -1.0000000\n3449  -5.0000000\n3450  -8.3333333\n3451   1.0000000\n3452  -2.3333333\n3453  -2.6666667\n3454   1.3333333\n3455   7.0000000\n3456   3.6666667\n3457  -2.0000000\n3458   1.6666667\n3459  -2.0000000\n3460  -9.0000000\n3461   4.3333333\n3462   2.3333333\n3463   1.6666667\n3464  -4.3333333\n3465  -0.3333333\n3466   3.6666667\n3467  -5.6666667\n3468  -4.0000000\n3469   2.3333333\n3470   6.6666667\n3471 -10.6666667\n3472   6.6666667\n3473   7.0000000\n3474  -6.0000000\n3475  -6.3333333\n3476  -4.3333333\n3477  -2.3333333\n3478  -2.3333333\n3479  -2.6666667\n3480  -2.3333333\n3481  -1.3333333\n3482   0.3333333\n3483   2.6666667\n3484  -4.3333333\n3485   3.6666667\n3486  -1.6666667\n3487   1.0000000\n3488  -2.0000000\n3489  -0.6666667\n3490  -3.6666667\n3491   0.0000000\n3492  -6.3333333\n3493   4.3333333\n3494  -3.0000000\n3495  -4.0000000\n3496   3.0000000\n3497  -1.3333333\n3498   4.0000000\n3499   4.0000000\n3500   0.3333333\n3501  -0.3333333\n3502  -1.6666667\n3503  -5.6666667\n3504  -0.3333333\n3505   4.3333333\n3506   4.3333333\n3507   4.0000000\n3508   6.3333333\n3509  -2.3333333\n3510   0.6666667\n3511  -3.6666667\n3512  -0.6666667\n3513  -5.0000000\n3514  -4.6666667\n3515  -4.3333333\n3516   8.3333333\n3517  -4.3333333\n3518  -2.0000000\n3519  -5.3333333\n3520   2.6666667\n3521  -3.0000000\n3522  -1.6666667\n3523   7.0000000\n3524   3.0000000\n3525  -2.3333333\n3526   7.6666667\n3527   4.0000000\n3528   2.0000000\n3529  -7.0000000\n3530  -4.3333333\n3531   3.3333333\n3532   6.6666667\n3533   4.0000000\n3534   0.0000000\n3535  -4.3333333\n3536   8.6666667\n3537  13.0000000\n3538  -0.3333333\n3539   5.0000000\n3540  -4.0000000\n3541   6.0000000\n3542 -14.0000000\n3543  -1.3333333\n3544  -7.0000000\n3545   9.6666667\n3546 -15.3333333\n3547   2.0000000\n3548   1.6666667\n3549   0.6666667\n3550   0.3333333\n3551  -2.3333333\n3552   2.3333333\n3553  -5.6666667\n3554   3.3333333\n3555  -3.3333333\n3556  -3.3333333\n3557   5.6666667\n3558   5.6666667\n3559   1.3333333\n3560   3.6666667\n3561   8.0000000\n3562   4.3333333\n3563   5.0000000\n3564  -6.6666667\n3565  -6.6666667\n3566  -2.0000000\n3567   7.6666667\n3568  -2.3333333\n3569  -1.0000000\n3570   1.6666667\n3571  -3.3333333\n3572   2.0000000\n3573   4.3333333\n3574   7.0000000\n3575   1.6666667\n3576  -1.0000000\n3577   2.0000000\n3578  -3.6666667\n3579   0.3333333\n3580   0.6666667\n3581  -6.6666667\n3582   2.3333333\n3583   5.0000000\n3584  -1.6666667\n3585  -5.6666667\n3586   7.0000000\n3587   7.3333333\n3588   4.0000000\n3589   2.6666667\n3590   0.0000000\n3591   1.6666667\n3592  -3.0000000\n3593  -2.3333333\n3594  -6.0000000\n3595   1.3333333\n3596   5.3333333\n3597  -6.3333333\n3598   4.0000000\n3599  -2.6666667\n3600   3.3333333\n3601  -2.3333333\n3602   1.6666667\n3603  -2.3333333\n3604   6.0000000\n3605   0.0000000\n3606   2.0000000\n3607   3.3333333\n3608   4.6666667\n3609  -3.3333333\n3610  -1.0000000\n3611  -2.0000000\n3612   2.6666667\n3613   8.3333333\n3614  -4.6666667\n3615  -0.3333333\n3616  -1.6666667\n3617   3.6666667\n3618 -10.6666667\n3619   1.3333333\n3620  -4.3333333\n3621  -0.6666667\n3622   0.0000000\n3623   1.0000000\n3624  -3.3333333\n3625  -4.6666667\n3626  -5.3333333\n3627   2.6666667\n3628   5.0000000\n3629   7.6666667\n3630  -6.3333333\n3631  -6.6666667\n3632  -2.6666667\n3633   4.0000000\n3634   2.3333333\n3635  -0.3333333\n3636  -2.3333333\n3637  -5.0000000\n3638  -1.3333333\n3639  -2.6666667\n3640   2.6666667\n3641   0.6666667\n3642   3.0000000\n3643   4.0000000\n3644  -3.0000000\n3645  -3.6666667\n3646  -3.6666667\n3647   3.3333333\n3648   5.6666667\n3649   0.0000000\n3650  -3.3333333\n3651  -2.6666667\n3652   1.3333333\n3653   6.0000000\n3654   2.3333333\n3655   1.0000000\n3656  -2.6666667\n3657   2.3333333\n3658   7.6666667\n3659   4.0000000\n3660  -2.3333333\n3661   4.0000000\n3662   0.0000000\n3663   4.6666667\n3664   1.6666667\n3665   4.6666667\n3666  -7.6666667\n3667   3.3333333\n3668  -2.3333333\n3669   7.0000000\n3670  -0.6666667\n3671   3.6666667\n3672  -1.0000000\n3673  -2.6666667\n3674  -1.6666667\n3675   0.0000000\n3676  -5.6666667\n3677  -9.6666667\n3678  -1.6666667\n3679  -3.3333333\n3680  -2.3333333\n3681  -0.6666667\n3682   4.0000000\n3683  -1.0000000\n3684   0.0000000\n3685  -5.3333333\n3686   6.3333333\n3687  -3.0000000\n3688   1.0000000\n3689  -2.3333333\n3690   0.6666667\n3691  -8.0000000\n3692  -3.6666667\n3693  -2.6666667\n3694   4.3333333\n3695   0.6666667\n3696   1.6666667\n3697  -6.0000000\n3698   5.6666667\n3699  -4.0000000\n3700   4.3333333\n3701   9.6666667\n3702   9.3333333\n3703   1.0000000\n3704   0.3333333\n3705   0.3333333\n3706   3.6666667\n3707  -0.6666667\n3708  -5.3333333\n3709  -7.3333333\n3710  -0.6666667\n3711  -5.0000000\n3712   6.3333333\n3713   7.0000000\n3714   0.0000000\n3715   2.6666667\n3716  -0.3333333\n3717   5.0000000\n3718   2.0000000\n3719   1.6666667\n3720  -3.0000000\n3721   3.3333333\n3722  -4.6666667\n3723   8.6666667\n3724  -1.6666667\n3725  -8.0000000\n3726  -2.0000000\n3727   3.6666667\n3728  -1.3333333\n3729  12.6666667\n3730   5.6666667\n3731   5.0000000\n3732   5.3333333\n3733   1.0000000\n3734  -2.6666667\n3735  -4.6666667\n3736  -1.3333333\n3737  -2.0000000\n3738  -3.3333333\n3739   0.3333333\n3740  -2.6666667\n3741  -5.0000000\n3742   1.3333333\n3743  -7.6666667\n3744   0.6666667\n3745   1.3333333\n3746   1.3333333\n3747   4.0000000\n3748  -0.3333333\n3749   5.0000000\n3750   8.6666667\n3751  10.0000000\n3752  -0.6666667\n3753   7.3333333\n3754   7.0000000\n3755  -0.6666667\n3756  -1.6666667\n3757  -0.6666667\n3758  -5.3333333\n3759  -8.3333333\n3760  -0.3333333\n3761  -8.6666667\n3762   4.6666667\n3763   5.6666667\n3764  -7.3333333\n3765   2.0000000\n3766  -2.0000000\n3767   8.3333333\n3768  -1.6666667\n3769  -6.0000000\n3770   8.3333333\n3771   0.3333333\n3772   2.6666667\n3773  -3.6666667\n3774   4.3333333\n3775   5.0000000\n3776   0.6666667\n3777   2.0000000\n3778   1.3333333\n3779  12.0000000\n3780  -6.3333333\n3781   5.3333333\n3782  -4.6666667\n3783   9.6666667\n3784  -1.6666667\n3785   0.0000000\n3786  -3.0000000\n3787  -2.0000000\n3788   5.0000000\n3789   3.3333333\n3790  -0.3333333\n3791   3.3333333\n3792   0.6666667\n3793  -2.0000000\n3794   6.3333333\n3795  -8.6666667\n3796   7.3333333\n3797   7.0000000\n3798  -2.3333333\n3799   0.3333333\n3800  -8.0000000\n3801  -2.6666667\n3802   2.0000000\n3803   0.3333333\n3804  -1.6666667\n3805   7.0000000\n3806  -7.0000000\n3807   1.6666667\n3808  -4.0000000\n3809  -2.3333333\n3810   0.3333333\n3811  -5.0000000\n3812  -3.3333333\n3813   4.6666667\n3814   6.3333333\n3815  -1.3333333\n3816   1.3333333\n3817  -3.6666667\n3818   2.6666667\n3819   3.3333333\n3820  -4.6666667\n3821   2.6666667\n3822   3.0000000\n3823   5.6666667\n3824   2.3333333\n3825  -5.0000000\n3826   9.6666667\n3827  -0.6666667\n3828  -4.0000000\n3829   5.0000000\n3830  -3.6666667\n3831   4.0000000\n3832   1.0000000\n3833   8.3333333\n3834   5.3333333\n3835  -7.3333333\n3836   7.3333333\n3837  -4.6666667\n3838  -0.3333333\n3839  -1.6666667\n3840   4.0000000\n3841  -1.6666667\n3842   1.0000000\n3843  -4.3333333\n3844  -5.0000000\n3845  -2.6666667\n3846   5.3333333\n3847   5.3333333\n3848   6.3333333\n3849  -8.0000000\n3850   8.6666667\n3851   9.0000000\n3852   4.6666667\n3853  -0.3333333\n3854   6.3333333\n3855  -1.6666667\n3856  -2.6666667\n3857  -3.6666667\n3858  -6.3333333\n3859   2.6666667\n3860   4.0000000\n3861  -2.6666667\n3862   0.6666667\n3863   1.6666667\n3864   5.3333333\n3865  -3.3333333\n3866  -1.0000000\n3867  -0.3333333\n3868   2.0000000\n3869  -2.6666667\n3870   3.6666667\n3871   3.0000000\n3872  -6.0000000\n3873  -0.3333333\n3874   7.3333333\n3875  -2.6666667\n3876 -11.3333333\n3877   5.3333333\n3878  -0.6666667\n3879  -7.3333333\n3880  11.3333333\n3881 -14.3333333\n3882  -6.0000000\n3883  -3.0000000\n3884  -3.3333333\n3885   5.3333333\n3886   0.6666667\n3887   7.0000000\n3888  -5.0000000\n3889   0.3333333\n3890  -1.3333333\n3891  -2.3333333\n3892   1.0000000\n3893   0.0000000\n3894  -7.6666667\n3895   4.0000000\n3896   6.6666667\n3897   3.0000000\n3898  -4.3333333\n3899   3.0000000\n3900  -5.0000000\n3901   6.0000000\n3902  -8.3333333\n3903  -0.3333333\n3904   0.3333333\n3905  -7.3333333\n3906  -4.3333333\n3907   0.6666667\n3908  -6.6666667\n3909   4.3333333\n3910   4.6666667\n3911  -2.6666667\n3912  -8.3333333\n3913  -1.3333333\n3914   4.0000000\n3915  -8.6666667\n3916   2.0000000\n3917  -8.6666667\n3918  -0.6666667\n3919  -1.0000000\n3920  -6.0000000\n3921  -4.0000000\n3922  -0.3333333\n3923  -1.6666667\n3924  -1.0000000\n3925   3.3333333\n3926   7.0000000\n3927   7.0000000\n3928  -2.6666667\n3929   0.6666667\n3930   6.6666667\n3931  -6.0000000\n3932   3.0000000\n3933   5.6666667\n3934   5.0000000\n3935   7.3333333\n3936  -3.0000000\n3937  -4.6666667\n3938  -1.0000000\n3939   0.3333333\n3940   8.6666667\n3941  -2.6666667\n3942   5.3333333\n3943   0.6666667\n3944   1.0000000\n3945   2.0000000\n3946   4.6666667\n3947  -4.6666667\n3948  -2.0000000\n3949  -5.6666667\n3950   0.0000000\n3951   6.3333333\n3952   3.0000000\n3953   1.6666667\n3954   1.6666667\n3955   4.0000000\n3956   6.0000000\n3957   0.3333333\n3958   1.3333333\n3959  -1.6666667\n3960   4.6666667\n3961   8.0000000\n3962   9.0000000\n3963   8.3333333\n3964   1.3333333\n3965  -1.3333333\n3966  -1.6666667\n3967  -4.3333333\n3968  -3.3333333\n3969  -0.6666667\n3970   3.6666667\n3971  -3.0000000\n3972   0.0000000\n3973  -4.6666667\n3974   7.6666667\n3975   4.0000000\n3976  -2.3333333\n3977   6.3333333\n3978   2.6666667\n3979   7.3333333\n3980   0.3333333\n3981  -1.6666667\n3982  -2.0000000\n3983  -1.3333333\n3984   2.6666667\n3985   1.3333333\n3986  -2.3333333\n3987   2.3333333\n3988  -0.6666667\n3989 -11.0000000\n3990   1.6666667\n3991   5.3333333\n3992  -0.6666667\n3993   4.0000000\n3994   2.6666667\n3995  -5.6666667\n3996   1.0000000\n3997   0.6666667\n3998   5.0000000\n3999   5.0000000\n4000  -1.0000000\n4001  -1.0000000\n4002   4.3333333\n4003   2.3333333\n4004   9.3333333\n4005   2.6666667\n4006  14.0000000\n4007  -1.3333333\n4008  -6.0000000\n4009   6.6666667\n4010  -1.0000000\n4011   5.3333333\n4012   8.3333333\n4013   1.6666667\n4014   3.6666667\n4015  -2.6666667\n4016  -2.3333333\n4017   6.0000000\n4018   2.6666667\n4019  -5.3333333\n4020  -7.0000000\n4021  -5.3333333\n4022   2.0000000\n4023   0.0000000\n4024   7.6666667\n4025  -1.6666667\n4026   4.0000000\n4027  -0.3333333\n4028   0.0000000\n4029  -1.3333333\n4030  -6.6666667\n4031  -2.0000000\n4032   8.6666667\n4033   6.0000000\n4034   3.0000000\n4035  -0.3333333\n4036   0.3333333\n4037  -1.3333333\n4038  -4.6666667\n4039  -2.6666667\n4040  -2.3333333\n4041   4.3333333\n4042  -5.3333333\n4043  -1.0000000\n4044   3.0000000\n4045  -4.3333333\n4046  -0.3333333\n4047   1.0000000\n4048   5.3333333\n4049   3.6666667\n4050  -1.6666667\n4051  -3.3333333\n4052  -2.0000000\n4053   9.0000000\n4054  -4.6666667\n4055   9.3333333\n4056  -6.0000000\n4057   0.6666667\n4058   3.3333333\n4059   3.3333333\n4060   0.0000000\n4061  -2.3333333\n4062  -1.6666667\n4063  -9.3333333\n4064   5.0000000\n4065  -6.0000000\n4066   3.3333333\n4067   5.0000000\n4068  -3.6666667\n4069   2.3333333\n4070  -0.6666667\n4071   4.6666667\n4072   4.0000000\n4073   5.3333333\n4074  -2.3333333\n4075  -5.3333333\n4076   0.0000000\n4077  -8.3333333\n4078  -4.3333333\n4079  -0.3333333\n4080   0.3333333\n4081  -6.6666667\n4082   8.3333333\n4083   2.0000000\n4084   4.0000000\n4085   7.6666667\n4086  -6.6666667\n4087  -2.6666667\n4088   3.3333333\n4089  -3.3333333\n4090  -5.3333333\n4091   0.3333333\n4092   3.6666667\n4093  -6.6666667\n4094   5.3333333\n4095   0.3333333\n4096   2.3333333\n4097   1.6666667\n4098   2.6666667\n4099  -7.0000000\n4100  -0.3333333\n4101   6.3333333\n4102   3.6666667\n4103  -4.3333333\n4104   1.0000000\n4105   0.3333333\n4106   3.3333333\n4107  -4.6666667\n4108  -4.3333333\n4109  -2.3333333\n4110   2.0000000\n4111  -3.6666667\n4112   0.3333333\n4113   5.6666667\n4114  -5.0000000\n4115   1.6666667\n4116  -3.6666667\n4117  -1.6666667\n4118  -6.0000000\n4119   4.6666667\n4120  -2.6666667\n4121  -0.6666667\n4122  -1.3333333\n4123   3.0000000\n4124   0.0000000\n4125   3.6666667\n4126  -5.0000000\n4127   1.6666667\n4128  -4.6666667\n4129  -3.0000000\n4130  -2.6666667\n4131  -6.3333333\n4132   6.0000000\n4133   7.6666667\n4134   8.3333333\n4135   0.3333333\n4136   3.6666667\n4137   6.3333333\n4138   3.0000000\n4139   1.0000000\n4140   4.0000000\n4141  -3.0000000\n4142   5.3333333\n4143   3.6666667\n4144  -6.3333333\n4145  -5.3333333\n4146  -8.0000000\n4147   4.3333333\n4148   1.3333333\n4149  -8.3333333\n4150   3.3333333\n4151   0.3333333\n4152  -2.3333333\n4153 -10.0000000\n4154   0.0000000\n4155  -2.3333333\n4156  -1.3333333\n4157   0.0000000\n4158   3.3333333\n4159  -0.3333333\n4160   1.0000000\n4161  -3.3333333\n4162  -2.3333333\n4163   5.3333333\n4164  -4.3333333\n4165   2.0000000\n4166   4.6666667\n4167   0.6666667\n4168   4.0000000\n4169  -5.0000000\n4170  -4.3333333\n4171   1.0000000\n4172  -7.0000000\n4173   3.0000000\n4174   0.3333333\n4175   6.6666667\n4176  -1.6666667\n4177   0.6666667\n4178   7.3333333\n4179  -1.3333333\n4180   6.3333333\n4181   0.3333333\n4182  -2.3333333\n4183  -0.6666667\n4184   4.0000000\n4185   0.6666667\n4186  -3.0000000\n4187   0.6666667\n4188   6.3333333\n4189   7.6666667\n4190   1.6666667\n4191   6.3333333\n4192   2.0000000\n4193   0.3333333\n4194   7.6666667\n4195  -6.6666667\n4196  -1.6666667\n4197  -1.0000000\n4198   0.0000000\n4199   4.6666667\n4200  -1.0000000\n4201  -5.6666667\n4202  -1.6666667\n4203   0.6666667\n4204   0.3333333\n4205  -1.3333333\n4206  -2.6666667\n4207   5.0000000\n4208  -3.6666667\n4209  -6.3333333\n4210   9.0000000\n4211  -6.0000000\n4212   4.0000000\n4213   4.6666667\n4214   0.0000000\n4215  -0.3333333\n4216  -3.3333333\n4217   4.6666667\n4218  -6.6666667\n4219  -3.0000000\n4220   0.0000000\n4221  -2.3333333\n4222   4.0000000\n4223   4.0000000\n4224  -6.0000000\n4225   2.0000000\n4226   0.3333333\n4227   2.3333333\n4228  -5.0000000\n4229  -3.0000000\n4230  -7.6666667\n4231  -7.3333333\n4232  -4.3333333\n4233   1.6666667\n4234  -5.0000000\n4235  -2.3333333\n4236   1.3333333\n4237   3.3333333\n4238   2.6666667\n4239  -3.3333333\n4240   1.3333333\n4241  -7.6666667\n4242   7.6666667\n4243   4.3333333\n4244  -0.6666667\n4245  -5.6666667\n4246   0.3333333\n4247  -2.0000000\n4248   2.6666667\n4249  -4.0000000\n4250  -1.6666667\n4251   2.3333333\n4252   2.3333333\n4253   4.0000000\n4254   2.0000000\n4255   6.6666667\n4256   7.3333333\n4257  -0.6666667\n4258  -2.3333333\n4259  -3.3333333\n4260  -2.3333333\n4261   0.0000000\n4262  -1.6666667\n4263  -0.3333333\n4264   3.3333333\n4265   3.3333333\n4266   1.6666667\n4267   1.0000000\n4268  -0.3333333\n4269  -8.0000000\n4270  -1.6666667\n4271  -3.3333333\n4272  -0.6666667\n4273  -3.0000000\n4274   1.3333333\n4275   1.6666667\n4276   2.6666667\n4277  -7.3333333\n4278   2.6666667\n4279  -4.3333333\n4280  -7.0000000\n4281  -5.6666667\n4282  -1.6666667\n4283   8.0000000\n4284   8.3333333\n4285   1.0000000\n4286  -6.0000000\n4287  -6.3333333\n4288   1.6666667\n4289  -5.0000000\n4290   2.0000000\n4291  -2.3333333\n4292   5.6666667\n4293   1.6666667\n4294  -6.0000000\n4295  -0.3333333\n4296   3.3333333\n4297   5.3333333\n4298   4.0000000\n4299  -2.6666667\n4300  -5.0000000\n4301   0.3333333\n4302  -1.3333333\n4303  -3.6666667\n4304  -4.3333333\n4305  -1.3333333\n4306   0.0000000\n4307  -2.6666667\n4308   0.3333333\n4309   1.0000000\n4310  -0.3333333\n4311   2.6666667\n4312 -10.3333333\n4313  -4.3333333\n4314   8.3333333\n4315   3.6666667\n4316   2.6666667\n4317   0.3333333\n4318   2.0000000\n4319  -1.3333333\n4320   7.3333333\n4321   0.3333333\n4322  -3.3333333\n4323   0.6666667\n4324   2.6666667\n4325   2.3333333\n4326   3.0000000\n4327   3.0000000\n4328   7.3333333\n4329  -8.3333333\n4330   3.3333333\n4331  -3.3333333\n4332   1.6666667\n4333   3.0000000\n4334  -0.6666667\n4335   0.0000000\n4336   3.6666667\n4337  -6.6666667\n4338  -6.6666667\n4339   5.3333333\n4340  -6.6666667\n4341  -2.6666667\n4342  -4.6666667\n4343  -3.0000000\n4344  -1.3333333\n4345  -6.0000000\n4346   2.3333333\n4347   0.0000000\n4348  -2.3333333\n4349  -1.3333333\n4350  -2.6666667\n4351   6.0000000\n4352   8.6666667\n4353  -3.0000000\n4354   3.6666667\n4355  -2.0000000\n4356   5.3333333\n4357  -7.6666667\n4358   2.3333333\n4359   4.0000000\n4360  -8.0000000\n4361 -11.3333333\n4362 -10.3333333\n4363  -0.6666667\n4364   0.3333333\n4365  10.0000000\n4366  -1.3333333\n4367  -0.6666667\n4368 -10.6666667\n4369   2.6666667\n4370  -2.3333333\n4371  -0.3333333\n4372   1.3333333\n4373   2.0000000\n4374  -0.6666667\n4375   6.0000000\n4376  -2.6666667\n4377   6.6666667\n4378   0.0000000\n4379  -2.3333333\n4380  -9.6666667\n4381  -5.6666667\n4382  -7.3333333\n4383   2.0000000\n4384  -2.3333333\n4385   5.0000000\n4386   4.3333333\n4387   5.0000000\n4388   2.6666667\n4389  -1.6666667\n4390  -6.3333333\n4391  -3.6666667\n4392  11.6666667\n4393  -5.3333333\n4394   2.3333333\n4395   7.0000000\n4396  -0.6666667\n4397   0.6666667\n4398  -8.6666667\n4399  -7.6666667\n4400   5.3333333\n4401   6.6666667\n4402   3.6666667\n4403  -3.6666667\n4404  -4.6666667\n4405  -6.3333333\n4406  -2.3333333\n4407  -1.6666667\n4408  -3.0000000\n4409  -5.3333333\n4410   4.0000000\n4411  -3.0000000\n4412  -5.3333333\n4413   4.0000000\n4414   2.6666667\n4415  -1.6666667\n4416   8.3333333\n4417  -0.6666667\n4418   2.3333333\n4419   0.3333333\n4420   6.0000000\n4421  -5.6666667\n4422   4.6666667\n4423   6.3333333\n4424   0.0000000\n4425  -9.0000000\n4426  -7.3333333\n4427  -1.3333333\n4428  -9.6666667\n4429  -4.3333333\n4430   5.0000000\n4431   4.0000000\n4432  -7.6666667\n4433  -0.3333333\n4434  -3.3333333\n4435   6.3333333\n4436   4.3333333\n4437   0.3333333\n4438  -7.3333333\n4439   1.6666667\n4440   5.3333333\n4441   5.0000000\n4442   2.3333333\n4443   7.3333333\n4444  -5.0000000\n4445  -9.0000000\n4446   0.3333333\n4447   3.3333333\n4448   4.0000000\n4449  -4.6666667\n4450  -1.3333333\n4451  -9.6666667\n4452   7.6666667\n4453   3.6666667\n4454   7.3333333\n4455   0.3333333\n4456   5.0000000\n4457  -2.3333333\n4458   2.0000000\n4459   0.0000000\n4460   2.3333333\n4461   2.6666667\n4462  -6.6666667\n4463  -2.0000000\n4464  -5.0000000\n4465  -5.0000000\n4466  -6.3333333\n4467   8.0000000\n4468  -8.3333333\n4469   5.3333333\n4470   5.6666667\n4471  -6.6666667\n4472  -2.0000000\n4473  -2.6666667\n4474  -0.3333333\n4475  -3.6666667\n4476   5.6666667\n4477  -1.0000000\n4478   4.0000000\n4479  -0.6666667\n4480   2.0000000\n4481   1.0000000\n4482   4.3333333\n4483  -2.6666667\n4484   1.6666667\n4485   0.6666667\n4486  -1.3333333\n4487   0.0000000\n4488   5.3333333\n4489   2.0000000\n4490   6.3333333\n4491   5.0000000\n4492  -2.3333333\n4493  -1.0000000\n4494   5.3333333\n4495   1.3333333\n4496   5.6666667\n4497   4.6666667\n4498   3.3333333\n4499   1.0000000\n4500  -1.0000000\n4501   1.6666667\n4502   2.3333333\n4503   5.3333333\n4504   1.3333333\n4505  -0.6666667\n4506  -6.6666667\n4507   6.6666667\n4508   6.0000000\n4509   2.3333333\n4510   2.0000000\n4511  -0.3333333\n4512   4.6666667\n4513  -6.0000000\n4514   1.3333333\n4515   7.6666667\n4516  -0.6666667\n4517  -1.0000000\n4518  -0.6666667\n4519  -0.6666667\n4520  -1.0000000\n4521   5.3333333\n4522   4.0000000\n4523   1.3333333\n4524   6.3333333\n4525  -4.3333333\n4526   1.6666667\n4527   0.6666667\n4528   1.0000000\n4529   2.3333333\n4530   4.3333333\n4531   1.0000000\n4532   9.3333333\n4533   2.0000000\n4534   0.3333333\n4535   2.3333333\n4536  -5.0000000\n4537  11.0000000\n4538   0.6666667\n4539   4.0000000\n4540   5.3333333\n4541  -8.0000000\n4542   0.3333333\n4543  -0.3333333\n4544   4.3333333\n4545   4.3333333\n4546   7.3333333\n4547   6.0000000\n4548   1.6666667\n4549   0.6666667\n4550   3.3333333\n4551  10.0000000\n4552   3.0000000\n4553  -3.0000000\n4554  -1.3333333\n4555  -3.3333333\n4556   0.0000000\n4557  -3.0000000\n4558  -0.6666667\n4559  -7.0000000\n4560   6.6666667\n4561   4.3333333\n4562  -6.3333333\n4563  -5.3333333\n4564   1.0000000\n4565   2.0000000\n4566  -3.3333333\n4567  -4.0000000\n4568   1.6666667\n4569  -8.3333333\n4570  -1.3333333\n4571  -6.0000000\n4572  -8.0000000\n4573   0.0000000\n4574  11.0000000\n4575  -7.0000000\n4576   5.6666667\n4577 -12.0000000\n4578   1.0000000\n4579  -0.3333333\n4580   5.6666667\n4581   4.3333333\n4582   0.0000000\n4583  -3.3333333\n4584   7.3333333\n4585   6.0000000\n4586  -2.6666667\n4587  -8.3333333\n4588   4.6666667\n4589  -5.3333333\n4590   5.0000000\n4591  -3.0000000\n4592  -3.0000000\n4593   4.3333333\n4594  -6.6666667\n4595  -0.6666667\n4596  -1.0000000\n4597  -9.0000000\n4598  -2.0000000\n4599  -4.6666667\n4600   3.6666667\n4601   1.6666667\n4602   2.0000000\n4603  -1.6666667\n4604  -2.3333333\n4605   1.3333333\n4606  -1.3333333\n4607 -10.0000000\n4608  -9.0000000\n4609   5.3333333\n4610   9.3333333\n4611   1.0000000\n4612  -2.3333333\n4613   3.0000000\n4614   4.0000000\n4615   2.0000000\n4616  -2.6666667\n4617  -3.3333333\n4618   3.0000000\n4619   0.6666667\n4620   3.0000000\n4621   0.6666667\n4622  -3.3333333\n4623  -1.6666667\n4624   5.6666667\n4625  -1.6666667\n4626   0.3333333\n4627   2.0000000\n4628  -0.6666667\n4629  -0.3333333\n4630   4.6666667\n4631  -1.6666667\n4632   1.6666667\n4633  -5.0000000\n4634  -5.6666667\n4635  -0.6666667\n4636   2.0000000\n4637  -4.3333333\n4638  -6.6666667\n4639  -6.0000000\n4640  -4.6666667\n4641   2.6666667\n4642  -5.3333333\n4643   7.3333333\n4644  -2.3333333\n4645  -5.0000000\n4646   3.6666667\n4647  -6.0000000\n4648   6.3333333\n4649   1.0000000\n4650   0.6666667\n4651  -3.6666667\n4652  -7.6666667\n4653   1.0000000\n4654   4.0000000\n4655   7.0000000\n4656   4.6666667\n4657   4.0000000\n4658   1.6666667\n4659   6.6666667\n4660  -5.3333333\n4661  -1.0000000\n4662   2.6666667\n4663   1.3333333\n4664   4.3333333\n4665  -1.0000000\n4666   7.3333333\n4667 -13.3333333\n4668  -2.0000000\n4669  -6.3333333\n4670   7.6666667\n4671   3.0000000\n4672   0.3333333\n4673  -1.6666667\n4674   4.0000000\n4675  -7.0000000\n4676  -0.3333333\n4677   3.3333333\n4678  -3.6666667\n4679   5.0000000\n4680   0.6666667\n4681  -3.3333333\n4682  -1.6666667\n4683   2.6666667\n4684   1.6666667\n4685  -4.3333333\n4686  -1.3333333\n4687  -1.6666667\n4688   3.6666667\n4689  -1.0000000\n4690   3.0000000\n4691   3.0000000\n4692   1.0000000\n4693  -2.0000000\n4694   3.6666667\n4695  -8.0000000\n4696  -6.0000000\n4697  -1.6666667\n4698  -4.0000000\n4699   6.6666667\n4700  -3.0000000\n4701   3.0000000\n4702  -4.3333333\n4703  -0.3333333\n4704  -2.3333333\n4705   7.3333333\n4706   2.3333333\n4707   2.6666667\n4708  -5.3333333\n4709   1.6666667\n4710   7.0000000\n4711  -5.0000000\n4712  -4.0000000\n4713  -5.0000000\n4714   7.3333333\n4715  -3.0000000\n4716   5.0000000\n4717  -5.0000000\n4718   3.6666667\n4719 -10.3333333\n4720  -2.6666667\n4721  -6.6666667\n4722   0.0000000\n4723   4.0000000\n4724   0.6666667\n4725  -2.6666667\n4726   3.0000000\n4727  -2.6666667\n4728  -1.3333333\n4729   7.0000000\n4730   3.3333333\n4731   3.6666667\n4732  -4.0000000\n4733  -3.3333333\n4734   3.3333333\n4735  -4.0000000\n4736  -1.6666667\n4737   7.0000000\n4738  -7.3333333\n4739  -0.3333333\n4740  -1.0000000\n4741  -8.0000000\n4742   5.0000000\n4743  -7.6666667\n4744  -5.3333333\n4745  -2.6666667\n4746  -7.3333333\n4747  -9.3333333\n4748   1.3333333\n4749  -8.6666667\n4750  -2.0000000\n4751   1.3333333\n4752   2.3333333\n4753   6.3333333\n4754   6.3333333\n4755   5.0000000\n4756   0.3333333\n4757   6.3333333\n4758  -0.3333333\n4759  -3.6666667\n4760  12.0000000\n4761   5.0000000\n4762   1.0000000\n4763  -4.0000000\n4764  -2.3333333\n4765 -10.6666667\n4766  -0.6666667\n4767  -0.3333333\n4768  -0.3333333\n4769  12.0000000\n4770   1.6666667\n4771  -0.6666667\n4772   2.6666667\n4773   0.6666667\n4774  -3.0000000\n4775   5.6666667\n4776  -6.6666667\n4777   3.0000000\n4778   1.6666667\n4779   5.6666667\n4780   6.6666667\n4781   1.6666667\n4782   7.0000000\n4783   2.6666667\n4784  12.6666667\n4785  -4.3333333\n4786   3.0000000\n4787  -1.6666667\n4788  -1.0000000\n4789   8.3333333\n4790  -3.0000000\n4791  -8.6666667\n4792  -3.0000000\n4793  -6.0000000\n4794   4.3333333\n4795  -2.3333333\n4796   8.0000000\n4797  -0.6666667\n4798   0.6666667\n4799   6.3333333\n4800  -2.3333333\n4801   1.0000000\n4802  -5.3333333\n4803  -5.0000000\n4804  -1.6666667\n4805  -4.0000000\n4806   1.6666667\n4807  -0.3333333\n4808  -0.6666667\n4809  -0.6666667\n4810   4.0000000\n4811  -9.3333333\n4812  -5.6666667\n4813   1.3333333\n4814   2.6666667\n4815   1.6666667\n4816  -2.3333333\n4817  -2.3333333\n4818  -2.3333333\n4819   5.0000000\n4820  -1.6666667\n4821   1.0000000\n4822   2.3333333\n4823   4.3333333\n4824   5.3333333\n4825   6.0000000\n4826  -4.6666667\n4827  -3.6666667\n4828   1.3333333\n4829   3.3333333\n4830   3.0000000\n4831   0.6666667\n4832  -6.6666667\n4833   3.6666667\n4834   5.6666667\n4835  -6.0000000\n4836  -5.6666667\n4837   1.0000000\n4838  -0.6666667\n4839  -0.3333333\n4840  -7.3333333\n4841  -4.0000000\n4842   8.3333333\n4843   9.6666667\n4844   9.0000000\n4845   2.3333333\n4846   3.3333333\n4847  -3.0000000\n4848   2.3333333\n4849   4.0000000\n4850  -0.3333333\n4851   8.3333333\n4852   5.6666667\n4853   5.6666667\n4854  -1.6666667\n4855   0.6666667\n4856   0.6666667\n4857  -4.3333333\n4858  -1.6666667\n4859   0.3333333\n4860   7.0000000\n4861   2.0000000\n4862   1.3333333\n4863  -2.6666667\n4864  -4.3333333\n4865 -10.3333333\n4866  -5.3333333\n4867   2.6666667\n4868  -1.3333333\n4869 -10.0000000\n4870   0.6666667\n4871   1.0000000\n4872   7.3333333\n4873   0.0000000\n4874   2.3333333\n4875  -7.3333333\n4876   3.3333333\n4877   3.0000000\n4878   4.6666667\n4879   0.6666667\n4880  -7.3333333\n4881  -1.6666667\n4882   2.6666667\n4883  -2.3333333\n4884   1.3333333\n4885  -1.3333333\n4886   5.0000000\n4887  -6.3333333\n4888   2.6666667\n4889  -1.6666667\n4890  -8.3333333\n4891  -5.0000000\n4892  -6.0000000\n4893  -9.6666667\n4894   0.6666667\n4895   4.3333333\n4896   0.0000000\n4897  -4.3333333\n4898  -8.3333333\n4899  -2.0000000\n4900  -3.3333333\n4901   1.6666667\n4902   1.3333333\n4903  -2.3333333\n4904   1.6666667\n4905  -6.0000000\n4906  -1.6666667\n4907  -4.0000000\n4908   0.3333333\n4909  -0.6666667\n4910   5.0000000\n4911   8.6666667\n4912   2.0000000\n4913   0.3333333\n4914  -7.6666667\n4915  -4.0000000\n4916  -2.0000000\n4917   3.6666667\n4918   1.6666667\n4919   1.6666667\n4920   4.0000000\n4921  -0.3333333\n4922   7.3333333\n4923  -4.0000000\n4924  -3.6666667\n4925   1.6666667\n4926  -1.6666667\n4927  -7.6666667\n4928  -2.3333333\n4929   0.6666667\n4930   5.6666667\n4931   5.3333333\n4932   0.3333333\n4933   2.0000000\n4934  -3.0000000\n4935   3.6666667\n4936   2.3333333\n4937  -0.3333333\n4938   6.6666667\n4939   2.6666667\n4940  -4.6666667\n4941  -5.6666667\n4942  -0.3333333\n4943   1.6666667\n4944  -2.3333333\n4945   2.0000000\n4946   4.6666667\n4947  -7.0000000\n4948   4.6666667\n4949  -1.0000000\n4950  -4.3333333\n4951  -3.3333333\n4952   6.3333333\n4953   1.0000000\n4954   0.0000000\n4955   3.0000000\n4956  -2.6666667\n4957   5.0000000\n4958   2.6666667\n4959   0.0000000\n4960   5.0000000\n4961  -1.3333333\n4962  -4.6666667\n4963  -0.3333333\n4964   9.3333333\n4965  -2.6666667\n4966   3.0000000\n4967   0.6666667\n4968  -1.3333333\n4969  -3.6666667\n4970  -1.3333333\n4971  -5.3333333\n4972  -1.3333333\n4973   4.6666667\n4974   7.0000000\n4975  -0.6666667\n4976   8.3333333\n4977   0.0000000\n4978  -4.6666667\n4979   3.3333333\n4980   4.0000000\n4981   1.6666667\n4982   7.0000000\n4983   0.6666667\n4984   5.6666667\n4985  -3.3333333\n4986   1.6666667\n4987   1.6666667\n4988  -0.3333333\n4989   6.0000000\n4990  -4.0000000\n4991   6.6666667\n4992  11.0000000\n4993  -6.3333333\n4994   5.3333333\n4995  -3.0000000\n4996  -1.3333333\n4997  -7.3333333\n4998   6.6666667\n4999  -2.0000000\n\n\nSince the p-value is high, we shall not reject the null hypothesis. Any observed difference might be due to chance, and there is no significant difference between the groups - Non-veg and Veg.\n\ntip_modified %&gt;%\n  gf_histogram(~Tip, fill = ~Preferance) \n\n\n\n\n\n\n\n\n\ntip_modified %&gt;%\n  gf_density(~Tip,\n             fill = ~Gender,\n             alpha = 0.8,\n             title = \"DENSITY PLOT\"\n    \n  )\n\n\n\n\n\n\n\n\n\nThis data is not normally distributed. A normal distribution would depict a bell curve. Here, the tips are heavily concentrated in the lower values, and there’s a long right tail. Hence, the data is heavily skewed to the right for both genders.\nOverall, tips are typically low, with a few outliers where people gave much higher amounts, especially among males."
  },
  {
    "objectID": "posts/pocket-money/index.html",
    "href": "posts/pocket-money/index.html",
    "title": "Pocket Money [A3]",
    "section": "",
    "text": "Pocket Money Data-set\nThis data-set shows the money spent by each individual on that particular day.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nlibrary(broom)\n\n\nmoney &lt;- read_csv(\"../../data/Pocket_Money.csv\")\n\nNew names:\nRows: 82 Columns: 5\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): Name, Gender dbl (2): Sr no, Money_spent lgl (1): ...5\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...5`\n\nmoney\n\n# A tibble: 82 × 5\n   `Sr no` Name     Gender Money_spent ...5 \n     &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;        &lt;dbl&gt; &lt;lgl&gt;\n 1       1 Aagam    Male           150 NA   \n 2       2 Aakash   Male           240 NA   \n 3       3 Aarushi  Female         382 NA   \n 4       4 Abheeta  Female          60 NA   \n 5       5 Adithya  Male            68 NA   \n 6       6 Aditya   Male           300 NA   \n 7       7 Akanksha Female         270 NA   \n 8       8 Amruta   Female         190 NA   \n 9       9 Anaaya   Female         300 NA   \n10      10 Anish    Male             0 NA   \n# ℹ 72 more rows\n\n\n\nmoney %&gt;% \n  crosstable(Money_spent ~ Gender) %&gt;% \n  as_flextable()\n\nlabelvariableGenderFemaleMaleMoney_spentMin / Max0 / 1.3e+040 / 1.0e+04Med [IQR]280.0 [85.0;500.0]250.0 [150.0;842.0]Mean (std)693.3 (2035.8)748.6 (1636.5)N (NA)41 (0)41 (0)\n\n\n\nmoney_modified &lt;- money %&gt;% \n  dplyr::mutate(\n    Gender = as_factor(Gender)\n  )\n\nglimpse(money_modified)\n\nRows: 82\nColumns: 5\n$ `Sr no`     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ Name        &lt;chr&gt; \"Aagam\", \"Aakash\", \"Aarushi\", \"Abheeta\", \"Adithya\", \"Adity…\n$ Gender      &lt;fct&gt; Male, Male, Female, Female, Male, Male, Female, Female, Fe…\n$ Money_spent &lt;dbl&gt; 150, 240, 382, 60, 68, 300, 270, 190, 300, 0, 250, 85, 700…\n$ ...5        &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\nshapiro.test(money_modified$Money_spent)\n\n\n    Shapiro-Wilk normality test\n\ndata:  money_modified$Money_spent\nW = 0.34508, p-value &lt; 2.2e-16\n\n\nThe closer the value of W is to 1, the more likely the data is to be normally distributed. Here, W = 0.34508 (quite far from 1). Hence the data is not normally distributed.\n\nTherefore, we do not need to do the t.test, but the wilcox test. However, I would want to compare the means of groups while assuming normality. So let’s do the t.test first and then move on to the wilcox test.\n\nmosaic::t_test(Money_spent ~ Gender, data = money_modified) \n\n\n    Welch Two Sample t-test\n\ndata:  Money_spent by Gender\nt = 0.13555, df = 76.468, p-value = 0.8925\nalternative hypothesis: true difference in means between group Male and group Female is not equal to 0\n95 percent confidence interval:\n -757.0748  867.6602\nsample estimates:\n  mean in group Male mean in group Female \n            748.6098             693.3171 \n\n\n\nWhile the Shapiro test indicates that the data for Money_spent is not normally distributed, the t-test finds no significant difference in mean Money_spent between males and females, as indicated by a high p-value.\n\nlet’s now do the wilcox test to get more clarity.\n\nwilcox.test(Money_spent ~ Gender, data = money_modified) %&gt;%  \n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\n# A tibble: 1 × 4\n  statistic p.value method                                           alternative\n      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                                            &lt;chr&gt;      \n1      936.   0.381 Wilcoxon rank sum test with continuity correcti… two.sided  \n\n\np-value is low. Hence, I shall not reject the null hypothesis, suggesting that there isn’t any statistically significant difference between the two genders and the money spent on that day.\n\nmoney_modified %&gt;% \ngf_histogram(~Money_spent, fill = ~Gender)"
  },
  {
    "objectID": "posts/Grades-at-SMI/index.html",
    "href": "posts/Grades-at-SMI/index.html",
    "title": "Grades-Dataset",
    "section": "",
    "text": "Grades across disciplines at SMI (B.Des, B.Voc, B.Fa)\nThis data-set contains grades of student across B.Des, B.Voc and B.Fa at SMI.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nlibrary(broom)\nlibrary(supernova)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(ggprism)\nlibrary(patchwork)\n\n\ngrades &lt;- read_csv(\"../../data/Grades.csv\")\n\nRows: 90 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Degree, Course, Letter-Grade, Gender\ndbl (3): SN, Year, Score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ngrades\n\n# A tibble: 90 × 7\n      SN Degree Course  Year `Letter-Grade` Score Gender\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; \n 1     1 B.Des  CAC        2 A                8   F     \n 2     2 B.Des  CAC        2 O                9.6 F     \n 3     3 B.Des  IADP       2 A+               9.2 F     \n 4     4 B.Des  CE         2 O                9.8 F     \n 5     5 B.Des  BSSD       2 P                3   M     \n 6     6 B.Des  CAC        2 O                9.5 F     \n 7     7 B.Des  PSD        2 A+               9   F     \n 8     8 B.Des  PSD        2 A+               9   F     \n 9     9 B.Des  PSD        2 A+               9   F     \n10    10 B.Des  BSSD       3 A+               9   F     \n# ℹ 80 more rows\n\n\n\nskimr::skim(grades)\n\n\nData summary\n\n\nName\ngrades\n\n\nNumber of rows\n90\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nDegree\n0\n1\n4\n5\n0\n3\n0\n\n\nCourse\n0\n1\n2\n5\n0\n15\n0\n\n\nLetter-Grade\n0\n1\n1\n2\n0\n7\n0\n\n\nGender\n0\n1\n1\n1\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSN\n0\n1\n45.50\n26.12\n1\n23.25\n45.5\n67.75\n90\n▇▇▇▇▇\n\n\nYear\n0\n1\n2.33\n0.62\n1\n2.00\n2.0\n3.00\n3\n▁▁▇▁▆\n\n\nScore\n0\n1\n8.06\n1.13\n3\n7.00\n8.0\n9.00\n10\n▁▁▆▇▇\n\n\n\n\n\n\ninspect(grades)\n\n\ncategorical variables:  \n          name     class levels  n missing\n1       Degree character      3 90       0\n2       Course character     15 90       0\n3 Letter-Grade character      7 90       0\n4       Gender character      2 90       0\n                                   distribution\n1 B.Des (33.3%), B.FA (33.3%) ...              \n2 DMA (22.2%), UIID (14.4%), DMP (12.2%) ...   \n3 A (33.3%), A+ (27.8%), B+ (18.9%) ...        \n4 F (63.3%), M (36.7%)                         \n\nquantitative variables:  \n   name   class min    Q1 median    Q3 max      mean         sd  n missing\n1    SN numeric   1 23.25   45.5 67.75  90 45.500000 26.1247010 90       0\n2  Year numeric   1  2.00    2.0  3.00   3  2.333333  0.6180797 90       0\n3 Score numeric   3  7.00    8.0  9.00  10  8.063333  1.1346880 90       0"
  }
]